language = "R"
parent = ""
name = "r"
title = "R"
description = """
[R](https://www.r-project.org/) is an easy-to-learn high-level programming language especially tailored to data science applications.

Pros:

- **Easy to learn**
  - High-level
  - Dynamically typed
- **Dynamic evaluation**, enabling powerful functions and more readable specification of formulas and models
- **Very reliable [ecosystem](https://cran.r-project.org/)**, compared to Python.
  Packages need to meet many requirements and demonstrate compatibility with dependencies.
- **High-quality data science packages**
- **Large community and help sources**
- **Rapid prototyping**
- **Excellent [glue language](https://www.devx.com/terms/glue-language/)**
  - Many packages interface with C or other fast languages to achieve performant code
  - Interoperable with many other languages
- **Reliable and standardized tooling**
- **Fluent inferface**: supports chaining functions, yielding much more readable analysis scripts.
- **Excellent notebook support**
- **Native vector/matrix support in the language**
- **Good documention**: functions are generally well-documented and include code examples.

Cons:

- **Lack of proper namespaces**: you are guaranteed to stumble into import order conflicts or naming conflicts.
- **Cryptic error messages**: R's standard error messages are very confusing. The inconsistent/unreadable stack trace does not help either.
- **Confusing object-oriented systems**: there are at least [three systems](https://adv-r.hadley.nz/oo-tradeoffs.html) for implementing object-oriented programming to some degree ([S3](https://adv-r.hadley.nz/s3.html), [S4](https://adv-r.hadley.nz/s4.html), [R6](https://adv-r.hadley.nz/r6.html)). Enough said.
- **Inconsistent standard library**: Quite a learning hurdle to get over.
- **Dot operator**: increases the flexibility of functions, but documentation of options is often severely lacking.
- **Very slow**: This is not a deal-breaker though for a glue/scripting language, and for prototyping purposes.
- **Dynamic evaluation**: A powerful feature, but is very confusing to new users, and difficult to implement for advanced users.
  - Environments: generally confusing for users, and can lead to fun surprising (serializing a simple linear formula resulting in a 10 GB file).
- **Dynamically typed**: great for rapid prototyping, not for large frameworks.
"""

[_source]
section = "Sourcing"
description = "Running an R script"

[_source.file]
action = "Run R script file"
code = "source('file.R')"

[_source.file.path]
action = "Get sourced file from within script"
code = "as.character(sys.call(1))[2]"
details = "Does not work during start-up!"

[_source.file.dir]
action = "Get sourced directory from within script"
code = "dirname(as.character(sys.call(1))[2])"


[options]
section = "Options"

[options.error.debug]
action = "Enable debug (browse) on error"
code = "options(error=recover)"

[options.warn.error]
action = "Treat warnings as errors"
code = "options(warn=2)"

[options.traceback]
action = "More concise (readable) traceback"
code = "options(error=function() traceback(max.lines=3))"

[options.scipen]
action = "Disable scientific notation"
code = "options(scipen=999)"


[version]
section = "Version checks"

[version.gte]
action = "Run code conditional on R version being later or equal than the given version number"
code = "if (compareVersion(paste(version$major, version$minor, sep='.'), '3.6.0') >= 0)"


[rng]
section = "Random number generation"

[rng.legacy]
action = "Use legacy RNG (R<3.6) for newer R versions"
code = """
if (compareVersion(
    paste(version$major, version$minor, sep='.'),
    '3.6.0') >= 0
) {
    RNGkind(sample.kind='Rounding')
}
"""
details = "A fix to reproduce RNG of R 3.5.0, for reproducing old results"


[output]
section = "Output"

[output.cat]
action = "Output object"
code = "cat(x)"

[output.cat.str]
action = "Output string"
code = "cat('hello')"

[output.print]
action = "Print object"
code = "print(x)"

[output.print.string]
action = "Print string"
code = "print('hello')"

[output.msg]
action = "Show message"
code = "message('msg')"

[output.warning]
action = "Show warning"
code = "warning('warning')"

[output.warning.now]
action = "Show warning right now"
code = "warning('warning', .immediate=TRUE)"

[output.error]
action = "Trigger and show error"
code = "stop('this is serious')"

[output.redirect.file]
action = "Redirect output to file"
code = "sink('log.txt')"
details = "Use sink() to restore"

[output.capture.str]
action = "Capture any output as string"
code = "txt = capture.output({...})"

[output.suppress.object]
action = "Suppress automatic printing of object in interactive mode"
code = "invisible(x)"

[output.suppress]
action = "Suppress all output"
code = "capture.output({...})"

[output.suppress.sink]
code = "sink('nul:')"
details = "'/dev/null' on linux?"

[output.suppress.msg]
action = "Suppress messages"
code = "suppressMessages({...})"

[output.suppress.msg.onload]
action = "Suppress package messages on load"
code = "suppressPackageStartupMessages({...})"

[output.suppress.warnings]
action = "Suppress warnings"
code = "suppressWarnings({...})"
