partial = true
language = "R"
parent = "r.stats"
after = "formula"
name = "nlme"
title = "nlme"
description = """
Useful links:

 * https://quantdev.ssri.psu.edu/sites/qdev/files/ILD_Ch06_2017_MLMwithHeterogeneousVariance.html
"""
code = "library(nlme)"


[create]
section = "Create"

[create.lme.intercept]
action = "Random intercept model with _subject_ as grouping factor"
code = "lme(fixed = y ~ 1, random = ~ 1 | subject)"

[create.specify]
section = "Specify"
description = "Further specification options for `lme()`"

[create.specify.intercept]
action = "Random intercept per group"
code = "random = ~ 1 | subject"

[create.specify.intercept.list]
code = "random = list(subject = pdSymm(form = ~ 1))"

[create.specify.intercept.sdb.factor]
action = "Random intercept, with different between-subject SD per secondary grouping"
code = "random = list(subject = pdDiag(form = ~ diagnosis))"

[create.specify.intercept.sdw.factor]
action = "Within-subject error per secondary grouping"
code = "weights = varIdent(form = ~ 1 | diagnosis)"

[create.specify.ar1]
action = "With AR-1 correlation structure"
code = "correlation = corAR1(form = ~ 1 | subject)"



[assess]
section = "Model fit"

[assess.loglik]
action = "Log-likelihood"
code = "logLik(model)"

[assess.aic]
action = "AIC"
code = "AIC(model)"

[assess.bic]
action = "BIC"
code = "BIC(model)"

[assess.icc]
action = "ICC"
code = "performance::icc(model)"
details = "Proportion of the total variance explained by the between-cluster variance. Higher is better. 0.1 is considered a meaningful threshold."

[assess.rsq.marginal]
action = "Marginal pseudo R-squared"
code = "r.squaredGLMM(model)[1, 'R2m']"

[assess.rsq.conditional]
action = "Conditional pseudo R-squared"
code = "r.squaredGLMM(model)[1, 'R2c']"

[assess.plot.residuals]
action = "Plot residuals against predicted"
code = "plot(model)"

[assess.plot.re]
action = "Plot random effects"
code = "plot(ranef(model))"

[assess.plot.qq]
action = "Q-Q plot"
code = "car::qqPlot(residuals(model))"


[extract]
section = "Extract info from a fitted model."

[extract.fixef.coefs]
action = "Fixed effects coefficients"
code = "fixef(model)"

[extract.fixef.coefs.interval]
action = "Fixed effects coefficient intervals"
code = "intervals(model)"

[extract.varsummary]
action = "Variance and SD summary"
code = "VarCorr(model)"

[extract.vcov]
action = "Variance-covariance matrix"
code = "vcov(model)"

[extract.varw]
action = "Within-group variance"
code = "sigma(model)^2"

[extract.sdw]
action = "Within-group SD"
code = "sigma(model)"

[extract.sdw.factor]
action = "Within-subject SD for group _$GROUP_ (when using `weights=varIdent`)"
code = """
sigma(model) * coef(
    model$modelStruct$varStruct,
    unconstrained = FALSE,
    allCoef = TRUE
)['$GROUP']
"""

[extract.varb]
action = "Between-group variance"
code = "VarCorr(model)['Residual', 'Variance']"

[extract.sdb]
action = "Between-group SD"
code = "VarCorr(model)['Residual', 'StdDev']"


[extract.effect]
section = "Extract effect size"

[extract.effect.cohensd]
action = "Cohen's _d_ for main effects"
code = "EMAtools::lme.dscore(model, type = 'nlme')"

[extract.effect.cohensf]
action = "Cohen's _f_ for main effects"
code = "effectsize::cohens_f(model)"
details = "d = 2 * f"

[extract.effect.cohensd.diff]
action = "Cohen's _d_ for group difference"
code = """
emg = emmeans::emmeans(model, ~ diagnosis)
emmeans::eff_size(
    emg,
    sigma = sigma(model),
    edf = data.frame(pairs(emg))$df[1]
)
"""
details = "Use with care"


[hyptest]
section = "Hypothesis testing"

[hyptest.anova]
action = "Coefficient significance"
code = "car::Anova(model)"

[hyptest.lrt]
action = "Test for nested model improvement (likelihood ratio test)"
code = "performance::test_lrt(model0, model1)"

[hyptest.lrt.anova]
code = "anova(model0, model1)"
