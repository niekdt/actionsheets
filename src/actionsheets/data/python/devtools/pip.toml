language = "shell"
parent = "python.devtools"
name = "pip"
title = "pip"
description = "Package installer for Python (pip)"


[info]
section = "Info"

[info.pip]
action = "Pip version"
code = "python -m pip --version"

[info.pkg.outdated]
action = "List of outdated packages"
code = "pip list --outdated"


[add]
section = "Add packages"

[add.pypi]
action = "Install package from PyPI"
code = "pip install SomeProject"

[add.pypi.multi]
action = "Install multiple packages from PyPI"
code = "pip install SomePackage1 SomePackage2"

[add.pypi.force]
action = "Reinstall package from PyPI"
code = "pip install --force-reinstall SomeProject"

[add.pypi.version]
action = "Install package with specific version"
code = "pip install 'SomeProject==1.4'"

[add.pypi.pre]
action = "Install pre-release version of package"
code = "pip install --pre SomeProject"

[add.pypi.version.minor]
action = "Install package with specific version or "
code = "pip install 'SomeProject~=1.4.2'"

[add.pypi.nodeps]
action = "Install package, without dependencies"
code = "pip install --no-deps SomeProject"

[add.pypi.extra]
action = "Install package with optional variant (functionality)"
code = "pip install 'SomePackage[PDF]'"

[add.pypi.extras]
action = "Install package with optional variants"
code = "pip install 'SomePackage[PDF,EPUB]'"

[add.local]
action = "Install from local archive file"
code = "pip install ./downloads/SomeProject-1.0.4.tar.gz"

[add.git]
action = "Install from Git repository"
code = "pip install git+https://github.com/pypa/sampleproject.git"

[add.git.dir]
action = "Install from Git repository, with package located in the 'src' directory"
code = "pip install git+https://github.com/pypa/sampleproject.git#subdirectory=src"

[add.git.branch]
action = "Install from Git repository on branch"
code = "pip install git+https://github.com/pypa/sampleproject.git@main"


[upgrade]
section = "Upgrade packages"

[upgrade.pip]
action = "Upgrade pip"
code = "python -m pip install --upgrade pip"

[upgrade.pkg]
action = "Upgrade package and dependencies"
code = "pip install -U SomeProject"
details = "The handling of dependencies depends on the upgrade-strategy used."

[upgrade.pkg.nodep]
action = "Upgrade package, and dependencies if needed"
code = "pip install -U --upgrade-strategy=only-if-needed SomeProject"

[upgrade.all]
action = "Upgrade all packages on Windows"
code = "pip freeze | %{$_.split('==')[0]} | %{pip install --upgrade $_}"
details = "Not recommended! As it can result in cross-dependency version conflicts."
source = "https://www.activestate.com/resources/quick-reads/how-to-update-all-python-packages/"


[remove]
section = "Remove packages"

[remove.pkg]
action = "Uninstall a package"
code = "pip uninstall SomeProject"

[remove.requirements]
action = "Uninstall packages listed in *requirements.txt*"
code = "pip uninstall -r requirements.txt"

[save]
section = "Save state"

[save.all]
action = "Generate *requirements.txt* from **all** installed packages"
code = "pip freeze > requirements.txt"
details = "Great way to bloat your deps list..."

[save.imported]
action = "Generate *requirements.txt* from used imports only"
code = "pigar generate"
details = "Preferred over pipreqs, as that fails for misnamed modules"


[restore]
section = "Restore state"

[restore.requirements]
action = "Install packages from *requirements.txt*"
code = "pip install -r requirements.txt"
