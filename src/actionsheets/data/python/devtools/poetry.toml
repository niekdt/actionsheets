language = "shell"
parent = "python.devtools"
name = "poetry"
title = "poetry"
description = """
Package management tool. Manages dependencies, package setup and building using the standardized pyproject.toml file.
This replaces the need for setup.py, requirements.txt, MANIFEST.in and Pipfile.*.
Poetry isolates the virtualenv from the project.
"""

[new]
section = "New"

[new.project]
action = "Start a new Python project"
code = "poetry new --src $pkg"

[new.env]
action = "Initialize poetry for pre-existing project"
code = "poetry init"


[info]
section = "Info"

[info.packages.list]
action = "List installed packages"
code = "poetry show"

[info.pkg]
action = "Get info about installed package"
code = "poetry show $pkg"
details = "Add `-v` for more info"

[info.pkg.dir]
action = "Get path to package"
code = """poetry run python -c "import $pkg; print($pkg.__file__)"""


[add]
section = "Add packages"

[add.pkg]
action = "Add specific package(s)"
code = "poetry add $pkg1 $pkg2"

[add.pkg.latest]
action = "Add package(s), force install latest"
code = "poetry add $pkg1@latest"

[add.pkg.version]
action = "Add a package for a specific version"
code = "poetry add $pkg==1.0.1"

[add.dev.pkg]
action = "Add a dev package"
code = "poetry add -D $pkg"

[add.pkg.git]
action = "Add git dependency"
code = "poetry add git+https://github.com/niekdt/actionsheets.git"

[add.pkg.git.release]
action = "Add git dependency with version"
code = "poetry add git+https://github.com/niekdt/actionsheets.git#0.1.0"

[add.pkg.git.branch]
action = "Add git dependency on branch"
code = "poetry add git+https://github.com/niekdt/actionsheets.git#main"

[add.pkg.local]
action = "Add local dependency"
code = "poetry add ./my-package/"

[add.pkg.local.archive]
action = "Add local dependency archive"
code = "poetry add ../my-package/dist/my-package-0.1.0.tar.gz"


[update]
section = "Update packages"

[update.poetry]
action = "Update poetry"
code = "poetry self update"

[update.pkg.all]
action = "Update all packages"
code = "poetry update"

[update.pkg.all.ssh]
action = "Update all packages, including packages from (private) Git-SSH repositories with passphrase"
code = "poetry update -vv"
details = "Without the `-vv` option, poetry runs forever if a password is required for the SSH key"

[update.pkg]
action = "Update specific package(s)"
code = "poetry update $pkg1 $pkg2"


[remove]
section = "Remove packages"

[remove.pkg]
action = "Remove package(s)"
code = "poetry remove $pkg1 $pkg2"

[remove.lock]
action = "Remove dependencies not specified in lock file"
code = "poetry install --sync"


[save]
section = "Save state"

[save.lock]
action = "Generate lock file"
code = "poetry lock"

[save.reqs]
action = "Export environment as *requirements.txt*"
code = "poetry export -f requirements.txt > requirements.txt"
details = """
Requires a plugin, install via:
`poetry self add poetry-plugin-export`
"""
source = "https://python-poetry.org/docs/cli/#export"

[save.reqs.nohash]
action = "Export environment as *requirements.txt* without hashes"
code = "poetry export --without-hashes -f requirements.txt > requirements.txt"
details = """
Requires a plugin, install via:
`poetry self add poetry-plugin-export`
"""
source = "https://python-poetry.org/docs/cli/#export"


[restore]
section = "Restore state"

[restore.deps]
action = "Install all dependencies, but not the root project"
code = "poetry install --no-root"
details = "For `package.mode=false`, you can just run `poetry install`"

[restore.project]
action = "Install the project (if package), and all dependencies defined in the lock or project file"
code = "poetry install"

[restore.project.sync]
action = "Install the project (if package), and all required dependencies, and remove unused dependencies (sync)"
code = "poetry install --sync"

[restore.project.dev]
action = "Install the project with dev dependencies"
code = "poetry install --with dev"

[restore.project.group]
action = "Install the project (if package), and all dependencies, including optional dep group(s)"
code = "poetry install --with docs,tests"

[restore.project.verbose]
action = "Install the project with verbose output for troubleshooting"
code = "poetry -vvv install"

[ci]
section = "Continuous integration"
description = "For configuring authentication, see the Authentication section"

[ci.poetry]
action = "Install poetry and restore package project"
code = """
pip install poetry
poetry install --with dev
"""

[ci.cache]
action = "Use poetry with lockfile-based caching"
code = """
- uses: actions/cache@v3
  with:
    path: ~/.cache/pypoetry
    key: ${{ hashFiles('poetry.lock') }}
"""
language = "yaml"

[ci.flake8]
action = "Run flake8"
code = "poetry run flake8"

[ci.pytest]
action = "Run pytest"
code = "poetry run pytest"


[cfg]
section = "Config"

[cfg.git.client]
action = "Use system Git client instead of Dulwich"
code = "poetry config experimental.system-git-client true"

[cfg.git.client.env]
code = "export POETRY_EXPERIMENTAL_SYSTEM_GIT_CLIENT = true"


[auth]
section = "Authentication"
description = "Authentication for private repository or package access"

[auth.http]
section = "HTTPS"

[auth.http.token.gh.config]
action = "Set access token for private GitHub package _foo_ installed via HTTPS"
code = """
poetry config repositories.foo https://github.com/my_private_org/foo.git
poetry config http-basic.foo x-token-auth ${{ secrets.MY_TOKEN }}
"""
details = "Doesn't always work (??)"
source = "https://github.com/orgs/python-poetry/discussions/3794#discussioncomment-7650366"

[auth.http.token.gh.config.env]
code = """
export POETRY_REPOSITORIES_FOO_URL = https://github.com/my_private_org/foo.git
export POETRY_HTTP_BASIC_FOO_USERNAME = x-token-auth
export POETRY_HTTP_BASIC_FOO_PASSWORD = ${{ secrets.MY_TOKEN }}
"""
source = "https://python-poetry.org/docs/repositories/"

[auth.http.token.gh.config.git]
code = """
git config --global url."https://x-token-auth:${{ secrets.MY_TOKEN }}@github.com/my_private_org/foo".insteadOf "https://github.com/my_private_org/foo"
"""
details = "Fallback option"

[auth.ssh]
section = "SSH"

[auth.ssh.token.gh]
action = "Set access token for GitHub package installed via SSH (git@)"
code = "?"
details = "A solution is suggested in https://stackoverflow.com/a/78074270/22638740, but no supporting documentation"

[auth.ssh.token.http]
action = "Use HTTPS access token for private GitHub packages from _my_private_org_ that were added via SSH"
code = """
git config --global url."https://x-token-auth:${{ secrets.MY_TOKEN }}@github.com/my_private_org/".insteadOf "ssh://git@github.com/my_private_org/"
"""
source = "https://github.com/orgs/python-poetry/discussions/3794#discussioncomment-8934350"
