date = 2024-09-16
partial = true
language = "python"
parent = "python.pandas"
name = "series"
title = "Pandas Series"
description = """
Opinionated words of caution:

- Types are (currently?) a mess, and autocasting does not make this any better.
- Specify dtype when defining series to avoid surprises further down the pipeline.
- Missing values are a complete mess: None/Null/NA/NaN are all used interchangeably, despite the existence of is.na and is.null implying otherwise.
- The representation of missing values differs per type (float uses nan even for NA inputs, object uses NA), which makes the whole thing even more confusing.
  - This seems to be fixed with the new Int64 and Float64 types, although this won't help in practice as autocasting still uses the old types.
- Avoid indexes unless you have a good reason. Consider using a DataFrame instead.
- The `in` operator, counterintuitively, works on the index, not the values.
"""
code = "import pandas as pd"

[create]
section = "Create"

[create.empty]
section = "Create empty series"

[create.empty.object]
action = "Empty series (of object type)"
code = "pd.Series()"

[create.empty.bool]
action = "Empty boolean series"
code = "pd.Series(dtype=bool)"

[create.empty.category.undefined]
action = "Empty categorical series without defined categories"
code = "pd.Series(dtype='category')"

[create.empty.category]
action = "Empty categorical series with pre-defined categories"
code = "pd.Categorical([], categories=['a', 'b', 'c'])"

[create.empty.int]
action = "Empty int series"
code = "pd.Series(dtype=int)"

[create.empty.float]
action = "Empty float series"
code = "pd.Series(dtype=float)"

[create.empty.date]
action = "Empty datetime series"
code = "pd.Series(dtype='datetime64[ns]')"


[create.constant]
section = "Create series of constant values"

[create.constant.na]
action = "Series filled with NAs of length _n_ (of object type)"
code = "pd.Series([None] * n)"

[create.constant.value]
action = "Constant value _v_ of length _n_"
code = "pd.Series(v, index=range(n))"


[create.define]
section = "Create series from a list of values"

[create.define.list]
action = "Object series from a generic list of values"
code = "pd.Series([1, None, 'a'])"

[create.define.int]
action = "Int series from a list of integers"
code = "pd.Series([1, '2', 3], dtype='int')"

[create.define.int64]
action = "Nullable int series from a list of integers"
code = "pd.Series([1, None, 3], dtype = 'Int64')"
details = "Preserves None as <NA>"

[create.define.int64.na]
action = "Nullable int series filled with NA of length _n_"
code = "pd.Series([None] * 3, dtype='Int64')"

[create.define.float]
action = "Float series from list of numbers"
code = "pd.Series([1, None, 3], dtype='float')"
details = "None is converted to NaN!"

[create.define.float64]
action = "Nullable float series from a list of numbers"
code = "pd.Series([1, None, 3.5], dtype = 'Float64')"
details = "None, NA and NaN are all set to <NA>"

[create.define.float64.na]
action = "Nullable float series filled with NA of length _n_"
code = "pd.Series([None] * 3, dtype='Int64')"

[create.define.cat]
action = "Categorical series from list of strings"
code = "pd.Categorical(['b', 'b', 'a'], categories=['a', 'b', 'c'])"

[create.define.cat.na]
action = "Categorical series filled with NA of length _n_"
code = "pd.Categorical([None] * n, categories=['a', 'b', 'c'])"

[create.dataframe.column]
action = "From DataFrame column _s_"
code = "data[s]"


[test]
section = "Test"

[test.inherits]
action = "Is series or subclass"
code = "isinstance(x, pd.Series)"

[test.is]
action = "Is series and not subclass"
code = "type(x) is pd.Series"

[test.empty]
action = "Empty"
code = "x.empty"

[test.nempty]
action = "Not empty"
code = "not x.empty"

[test.length]
action = "Has length _n_"
code = "len(x) == n"

[test.type.bool]
action = "Is boolean series"
code = "pd.api.types.is_bool_dtype(x)"

[test.type.categorical]
action = "Is categorical series"
code = "isinstance(x.dtype, pd.CategoricalDtype)"

[test.type.categorical.ordered]
action = "Is ordered categorical series"
code = "isinstance(x.dtype, pd.CategoricalDtype) and x.ordered"

[test.type.numeric]
action = "Is numeric series"
code = "pd.api.types.is_numeric_dtype(x)"
details = "For example, int or float"

[test.type.int]
action = "Is integer series"
code = "pd.api.types.is_integer_dtype(x)"
details = "For example, int or Int64"

[test.type.uint]
action = "Is unsigned integer series"
code = "pd.api.types.is_unsigned_integer_dtype(x)"

[test.type.float]
action = "Is float series"
code = "pd.api.types.is_float_dtype(x)"
details = "For example, float or Float64"

[test.type.datetime]
action = "Is datetime64 series"
code = "pd.api.types.is_datetime64_dtype(x)"

[test.type.datetime.ns]
action = "Is datetime64[ns] series"
code = "pd.api.types.is_datetime64_ns_dtype(x)"

[test.type.str]
action = "Is string series"
code = "pd.api.types.is_string_dtype(x)"

[test.type.object]
action = "Is object series"
code = "pd.api.types.is_object_dtype(x)"

[test.hashable]
action = "Is hashable series"
code = "pd.api.types.is_hashable(x)"

[test.duplicate.none]
action = "No duplicate elements (all unique)"
code = "x.is_unique"

[test.duplicate.any]
action = "Any duplicate elements"
code = "not x.is_unique"

[test.contains.na]
action = "Contains NA"
code = "x.hasnans"

[test.contains.na.all]
action = "Contains only NA"
code = "x.isna().all()"

[test.contains.na.none]
action = "Contains no NA"
code = "x.notna().all()"

[test.contains.value]
action = "Contains value _v_, ignoring NAs"
code = "x.isin([v]).any()"
details = "WARNING: `v in x' tests the indices instead!"

[test.contains.value.eq]
code = "any(x == v)"

[test.contains.values]
action = "Contains any of the values _v1_, _v2_, ignoring NAs"
code = "x.isin([v1, v2]).any()"

[test.missing.value]
action = "Does not contain value _v_"
code = "all(x != v)"

[test.order.increasing]
action = "Are elements in increasing order"
code = "x.is_monotonic_increasing"

[test.order.decreasing]
action = "Are elements in decreasing order"
code = "x.is_monotonic_decreasing"


[test.bool]
section = "Test boolean series"

[test.bool.'true'.all]
action = "All values are True"
code = "x.all()"

[test.bool.'false'.all]
action = "All values are False"
code = "not x.any()"


[test.str]
section = "Tests for string series"

[test.str.contains]
action = "Contains string _s_"
code = "x.str.contains(s).any()"


[test.assert]
section = "Assertions"

[test.assert.equal]
action = "Assert series equal"
code = "pd.testing.assert_series_equal(x, y)"

[test.assert.equal._name]
action = "Assert series equal, ignoring the names"
code = "pd.testing.assert_series_equal(x, y, check_names=False)"


[extract]
section = "Extract"

[extract.length]
action = "Number of elements"
code = "x.size"

[extract.length.len]
code = "len(x)"

[extract.hash]
action = "Hash"
code = "hash(x.values.tobytes())"

[extract.dtype]
action = "Dtype"
code = "x.dtype"

[extract.nunique]
action = "Number of unique elements, ignoring NAs"
code = "x.nunique()"

[extract.min]
action = "Smallest value, ignoring NAs"
code = "x.min()"

[extract.max]
action = "Greatest value, ignoring NAs"
code = "x.max()"

[extract.min.index]
action = "Index of the smallest value, ignoring NAs"
code = "x.idxmin()"

[extract.max.index]
action = "Index of the greatest value, ignoring NAs"
code = "x.idxmax()"

[extract.value.counts]
action = "Count occurrence per value"
code = "x.value_counts()"


[extract.type]
section = "Dtype-specific operations"

[extract.type.list.length]
action = "Get length of each list element"
code = "x.list.len()"

[extract.type.list.item]
action = "Get the _i_th item of each list element"
code = "x.list[i]"


[update]
section = "Update"
description = "Warning: updates may change the dtype of the series!"

[update.elem.index.na]
action = "Set element at index _i_ to NA"
code = "x[i] = pd.NA"

[update.elem.index.value]
action = "Set element at index _i_ to value _v_"
code = "x[i] = v"


[derive]
section = "Derive"

[derive.cast]
section = "Cast"

[derive.cast.numeric]
action = "Cast series to numeric dtype"
code = "pd.to_numeric(x)"


[derive.order]
section = "Order"

[derive.order.reverse]
action = "Reverse"
code = "x[::-1]"

[derive.order.sort.asc]
action = "Sort ascendingly"
code = "x.sort_values()"
details = "Nulls are placed last"

[derive.order.sort.desc]
action = "Sort descendingly"
code = "x.sort_values(ascending=False)"
details = "Nulls are placed last"

[derive.order.shuffle]
action = "Shuffle"
code = "x.sample(frac=1)"


[derive.transform]
section = "Transform"

[derive.transform.mask]
section = "Mask"

[derive.transform.mask.duplicate]
action = "Duplicate mask"
code = "x.duplicated()"

[derive.transform.fill.na]
action = "Fill NA by value_v_"
code = "x.fillna(value=v)"

[derive.transform.replace.value.na]
action = "Replace value _v_ by NA"
code = "x.replace(V, pd.NA)"
details = "May cast series to another type if nulls are not supported (example: int)"

[derive.transform.cast]
section = "Cast to type"

[derive.transform.cast.bool]
action = "Cast to boolean"
code = "x.astype(bool)"

[derive.transform.cast.int]
action = "Cast to integer"
code = "x.astype(int)"

[derive.transform.cast.float]
action = "Cast to float"
code = "x.astype(float)"

[derive.transform.cast.str]
action = "Cast to string"
code = "x.astype(str)"

[derive.transform.cast.categorical]
action = "Cast to categorical (nominal)"
code = "x.astype('category')"

[derive.transform.cast.categorical.levels]
action = "Cast to categorical (nominal) with given categories"
code = "pd.Categorical(x, categories=['a', 'b', 'c'])"

[derive.transform.cast.categorical.ordered]
action = "Cast to ordered categorical (ordinal)"
code = "pd.Categorical(x, ordered=True)"

[derive.transform.cast.ordered.categorical]
action = "Cast ordered categorical to unordered categorical"
code = "x.as_unordered()"

[derive.transform.cast.categorical.int]
action = "Cast categorical to integer codes"
code = "pd.Series(z.codes)"


[derive.grow]
section = "Grow"


[derive.shrink]
section = "Shrink"

[derive.shrink.head]
action = "First _n_ elements"
code = "x.head(n)"

[derive.shrink.tail]
action = "Last _n_ elements"
code = "x.tail(n)"

[derive.shrink.slice]
action = "Slice"
code = "x[a:b]"

[derive.shrink.sample]
action = "Sample _n_ elements"
code = "x.sample(n)"

[derive.shrink.duplicates]
action = "Remove duplicates"
code = "x.drop_duplicates()"


[convert]
section = "Convert"

[convert.list]
action = "To list"
code = "x.tolist()"

[convert.list.2]
code = "list(x)"

[convert.set]
action = "To set of unique values"
code = "set(x)"
details = "`NA` is included only once, `nan` is only included once"

[convert.dataframe]
action = "To DataFrame (single column)"
code = "x.to_frame()"

[convert.numpy]
action = "To Numpy ND array"
code = "x.to_numpy()"

[convert.dict]
action = "To dict (index-value pairs)"
code = "x.to_dict()"

[convert.str.json]
action = "To JSON index-value array"
code = "x.to_json()"
