{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"python/","title":"Python","text":""},{"location":"python/#python","title":"Python","text":"<p>Python is an easy-to-learn high-level general-purpose programming language. It is especially suitable for beginners to programming, amateurs/hobbyists, scientists, engineers.</p> <p>Pros:</p> <ul> <li>Easy to learn</li> <li>High-level</li> <li>Dynamically typed</li> <li>Simple and readable syntax</li> <li>Vast ecosystem</li> <li>Large community and help sources</li> <li>Rapid prototyping</li> <li>Excellent glue language</li> <li>Many packages interface with C or other fast languages to achieve performant code</li> <li>Interoperable with many other languages</li> </ul> <p>Cons:</p> <ul> <li>Very slow: About 50 times slower than C. This is not a deal-breaker though for a glue/scripting language, and for prototyping purposes.</li> <li>Low-quality packages: There are almost no imposed requirements on packages and compability between packages: Expect compatibility issues, breaking functionality across package versions, unintuitive APIs, and lacking documentation.</li> <li>Non-standardized tooling: despite the emphasis on the Pythonic way, there are hilariously many cases of competing tools, packages, and standards: see dependency management, repository structure, unit testing, to name a few.</li> <li>Dynamically typed: great for rapid prototyping, not for large frameworks.</li> <li>No built-in language support for vector and matrix operations: results in needlessly verbose code for any engineering or data science applications.</li> <li>No fluent interface: No support for chaining function calls, which is a common use case in analysis scripts and data manipulation. This results in many data science libraries resorting to the builder pattern, which forces the use of implementing subclasses just to call another function.</li> </ul> <p>Short Python cheatsheets:</p> <ul> <li>https://www.pythoncheatsheet.org/</li> <li>https://quickref.me/python</li> </ul>"},{"location":"python/#run","title":"Run","text":""},{"location":"python/#script","title":"Script","text":"Action Code Details  Start Python script, wait for completion  <pre><code>os.system('python script.py')\n</code></pre>  Start Python script with arguments, wait for completion  <pre><code>os.system('python script.py -file \"hello.csv\")\n</code></pre>"},{"location":"python/#environment","title":"Environment","text":""},{"location":"python/#environment-variables","title":"Environment variables","text":"<p>All snippets require <code>import os</code>. Updates to the environment are not reflected in the <code>os.environ</code> mapping.</p> Action Code Details  Get list of all environment variables  <pre><code>list(os.environ)\n</code></pre>  Get all environment variables as dict  <pre><code>dict(os.environ)\n</code></pre>  Check if environment variable exists  <pre><code>'path' in os.environ\n</code></pre> Case-insensitive  Get value of environment variable, error if not found  <pre><code>os.environ['path']\n</code></pre>  Try get value of environment variable, or return <code>None</code> <pre><code>os.getenv('path')\n</code></pre>  Try get value of environment variable, or return <code>None</code> <pre><code>os.environ.get('path')\n</code></pre>  Try get value of environment variable, or return default value v <pre><code>os.environ.get('missingvar', v)\n</code></pre>  Set / update environment variable  <pre><code>os.environ['derp'] = 'hello'\n</code></pre>  Set environment variable only if it is not yet defined  <pre><code>os.environ.setdefault('derp', 'world')\n</code></pre>  Delete environment variable, error if not defined  <pre><code>del os.environ['derp']\n</code></pre>  Delete environment variable, error if not defined  <pre><code>os.environ.pop('derp')\n</code></pre>  Try delete environment variable  <pre><code>os.environ.pop('derp', None)\n</code></pre>"},{"location":"python/class/","title":"Classes","text":""},{"location":"python/class/#classes","title":"Classes","text":"<p>Class mechanism and handling</p>"},{"location":"python/class/#extract","title":"Extract","text":"Action Code Details  Get class name as string  <pre><code>cls.__name__\n</code></pre>"},{"location":"python/class/#subclasses","title":"Subclass(es)","text":"Action Code Details  Get direct subclasses  <pre><code>cls.__subclasses__()\n</code></pre>  Find direct subclass by name v <pre><code>subclasses = [c for c in cls.__subclasses__() if c.__name__ == v]\nsubclasses[0]\n</code></pre>  Find all non-abstract direct subclasses  <pre><code>import inspect\nsubclasses = [c for c in cls.__subclasses__() if not inspect.isabstract(c)]\n</code></pre>"},{"location":"python/cli/","title":"Command-line interface","text":""},{"location":"python/cli/#command-line-interface","title":"Command-line interface","text":"<p>Defining and processing a command-line interface. Uses the argparse module.</p>"},{"location":"python/cli/#create","title":"Create","text":"<p>Create an command-line arguments parser</p> Action Code Details  Define an argument parser  <pre><code>import argparse\nparser = argparse.ArgumentParser(\n  prog = 'My CLI program',\n  description = 'Description of functionality here',\n  epilog = 'Text at the bottom of the help file'\n)\n</code></pre>"},{"location":"python/cli/#add-argument-to-the-parser","title":"Add argument to the parser","text":"Action Code Details  Define positional argument  <pre><code>parser.add_argument('file')\n</code></pre>  Define optional positional argument  <pre><code>parser.add_argument('dest', nargs='?')\n</code></pre>  Define positional argument accepting multiple values  <pre><code>parser.add_argument('files', type = str, nargs='+')\n</code></pre>  Define flag to enable a feature (default is False)  <pre><code>parser.add_argument('-f', '--force', action = 'store_true')\n</code></pre>  Define flag to disable a feature (default is True)  <pre><code>parser.add_argument('--disable', action = 'store_false')\n</code></pre>  Define string option  <pre><code>parser.add_argument('-s', '--source', type = str)\n</code></pre>  Define int option  <pre><code>parser.add_argument('--seed', type = int)\n</code></pre>  Define float option  <pre><code>parser.add_argument('value', type = float)\n</code></pre>  Define categorical option  <pre><code>parser.add_argument('answer', choices = ['a', 'b', 'c'])\n</code></pre>  Define valid path option  <pre><code>parser.add_argument('path', type = pathlib.Path)\n</code></pre>  Define openable file option  <pre><code>parser.add_argument('file', type = open)\n</code></pre>  Define writable file option  <pre><code>parser.add_argument('dest', type = argparse.FileType('w'))\n</code></pre>  Define option that takes a value  <pre><code>parser.add_argument('--seed')\n</code></pre>  Define option that optionally takes a value  <pre><code>parser.add_argument('--seed', nargs = '?')\n</code></pre>  Define required option  <pre><code>parser.add_argument('--seed', required = True)\n</code></pre> Required options are considered bad form. Use positional arguments instead."},{"location":"python/cli/#parse","title":"Parse","text":"Action Code Details  Parse system arguments using the created argparse instance  <pre><code>args = parser.parse_args()\n</code></pre>"},{"location":"python/cli/#test","title":"Test","text":"Action Code Details  Test if no arguments were provided  <pre><code>len(sys.argv) &lt;= 1\n</code></pre>"},{"location":"python/cli/#get","title":"Get","text":"Action Code Details  Get program or script that invoked the process  <pre><code>sys.argv[0]\n</code></pre>  Number of arguments  <pre><code>len(sys.argv)\n</code></pre>"},{"location":"python/collections/","title":"Collections","text":""},{"location":"python/collections/#collections","title":"Collections","text":"<p>For an overview of the abstract classes provided by the collections module, see here.</p> <p>Code <pre><code>import collections\n</code></pre></p>"},{"location":"python/collections/#test","title":"Test","text":"Action Code Details  Is collection  <pre><code>isinstance(x, collections.abc.Collection)\n</code></pre> e.g., <code>str</code>, <code>tuple</code>, <code>list</code>, <code>set</code>, <code>dict</code>  Is sequence (defined ordering of elements)  <pre><code>isinstance(x, collections.abc.Sequence)\n</code></pre> e.g., <code>str</code>, <code>tuple</code>, <code>list</code>  Is mapping  <pre><code>isinstance(x, collections.abc.Mapping)\n</code></pre> e.g., <code>dict</code>  Is set  <pre><code>isinstance(x, collections.abc.Set)\n</code></pre> e.g., <code>set</code>"},{"location":"python/collections/dict/","title":"Dict","text":"","tags":["dictionary","map"]},{"location":"python/collections/dict/#dict","title":"Dict","text":"<p>Maps hashable objects to a value</p>","tags":["dictionary","map"]},{"location":"python/collections/dict/#create","title":"Create","text":"<p>Create a dictionary</p> Action Code Details  Define empty dictionary  <pre><code>x = {}\n</code></pre>  Define with string keys and values  <pre><code>x = {'color': 'blue', 'size': 'large'}\n</code></pre>  Define with integer keys  <pre><code>x = {1: 'a', 2: 'b', 3: 'c'}\n</code></pre>  Generate from comprehension over list of keys  <pre><code>keys = ['a', 'b', 'c']\n{key: key.upper() for key in keys}\n</code></pre>  Define from keys iterator and constant value v <pre><code>dict.fromkeys(key_iter, v)\n</code></pre>  Define dynamically from iterators for keys and values  <pre><code>x = dict(zip(key_iter, value_iter))\n</code></pre>","tags":["dictionary","map"]},{"location":"python/collections/dict/#test","title":"Test","text":"Action Code Details  Is dict or subclass  <pre><code>isinstance(x, dict)\n</code></pre>  Is dict but not subclass  <pre><code>type(x) is dict\n</code></pre>  Is empty  <pre><code>x\n</code></pre>  Is not empty  <pre><code>not x\n</code></pre>  Contains key k <pre><code>k in x\n</code></pre>  Contains value v <pre><code>v in x.values()\n</code></pre>  Contains value <code>None</code> <pre><code>None in x.values()\n</code></pre>  Contains specific keys  <pre><code>{k1, k2}.issubset(x)\n</code></pre>  Contains keys keys <pre><code>set(keys).issubset(x)\n</code></pre>  Contains specific values  <pre><code>{v1, v2}.issubset(x.values())\n</code></pre>  Contains values values <pre><code>set(values).issubset(x.values())\n</code></pre>  Contains duplicate values  <pre><code>len(x) != len(set(x.values()))\n</code></pre>","tags":["dictionary","map"]},{"location":"python/collections/dict/#extract","title":"Extract","text":"Action Code Details  Number of key-value elements  <pre><code>len(x)\n</code></pre>  Hash  <pre><code>hash(frozenset(x.items()))\n</code></pre>  Keys  <pre><code>x.keys()\n</code></pre> As <code>dict_keys</code>  Keys as list  <pre><code>list(x)\n</code></pre>  Keys as sorted list  <pre><code>sorted(x)\n</code></pre>  All keys with value v <pre><code>[k for k in x if x[k] == v]\n</code></pre>  Values  <pre><code>x.values()\n</code></pre> As <code>dict_values</code>  Values as list  <pre><code>list(x.values())\n</code></pre>  Values sorted by keys  <pre><code>[x[k] for k in sorted(x)]\n</code></pre>  Values from list of keys  <pre><code>[x[k] for k in keys_list]\n</code></pre>  Entries (as list of tuples)  <pre><code>x.items()\n</code></pre>  Value from key  <pre><code>x['color']\n</code></pre> Throws an error if missing  Try get value from key  <pre><code>x.get('color')\n</code></pre> Returns <code>None</code> if missing  Try get value from key, with default v if missing  <pre><code>x.get('color', v)\n</code></pre>  First key with value v <pre><code>next(k for k in x if x[k] == v)\n</code></pre>  Get index of key k <pre><code>list(x.keys()).index(k)\n</code></pre>","tags":["dictionary","map"]},{"location":"python/collections/dict/#update","title":"Update","text":"Action Code Details  Update entry value  <pre><code>x['size'] = 'small'\n</code></pre>  Update entry, error if missing  <pre><code>?\n</code></pre> ?  Rename entry  <pre><code>x['new'] = x.pop('old')\n</code></pre>","tags":["dictionary","map"]},{"location":"python/collections/dict/#grow","title":"Grow","text":"Action Code Details  Add or update entry  <pre><code>x['size'] = 'small'\n</code></pre>  Add entry with value if it does not exist  <pre><code>x.setdefault('size', 'medium')\n</code></pre>","tags":["dictionary","map"]},{"location":"python/collections/dict/#shrink","title":"Shrink","text":"Action Code Details  Remove all entries (clear)  <pre><code>x.clear()\n</code></pre>  Remove entry by key  <pre><code>del x['size']\n</code></pre>  Remove entries by keys  <pre><code>for k in keys: del x[k]\n</code></pre>  Remove entry by key, get value  <pre><code>x.pop('size')\n</code></pre>  Remove keys, get values  <pre><code>[x.pop(k) for k in keys]\n</code></pre>  Remove last-inserted entry, get value  <pre><code>x.popitem()\n</code></pre>","tags":["dictionary","map"]},{"location":"python/collections/dict/#combine","title":"Combine","text":"<p>Instead of merging several dictionaries, consider using a ChainMap, which is often much faster.</p> Action Code Details  Merge with another dictionary  <pre><code>x |= y\n</code></pre>  Merge with another dictionary  <pre><code>x.update(y)\n</code></pre>","tags":["dictionary","map"]},{"location":"python/collections/dict/#derive","title":"Derive","text":"Action Code Details  Copy  <pre><code>x.copy()\n</code></pre>  Copy  <pre><code>dict(x)\n</code></pre>  Subset for keys  <pre><code>{k: x[k] for k in keys}\n</code></pre> Error if a key is missing  Subset for keys with default v <pre><code>{k: x.get(k, default=v) for k in keys}\n</code></pre>  Subset (intersection) for keys  <pre><code>{k: x[k] for k in x.keys() if k in keys}\n</code></pre> Returns empty dict if all keys are missing  Subset except for keys  <pre><code>{k: x[k] for k in x.keys() if k not in keys}\n</code></pre>","tags":["dictionary","map"]},{"location":"python/collections/dict/#combine_1","title":"Combine","text":"Action Code Details  Merge dictionaries  <pre><code>z = x | y\n</code></pre>  Merge dictionaries  <pre><code>z = {**x, **y}\n</code></pre>","tags":["dictionary","map"]},{"location":"python/collections/dict/#convert","title":"Convert","text":"Action Code Details  List of key-value tuples  <pre><code>x.items()\n</code></pre>  JSON string  <pre><code>json.dumps(x)\n</code></pre>  JSON string, handle non-string entries  <pre><code>json.dumps(x, default = str)\n</code></pre>","tags":["dictionary","map"]},{"location":"python/collections/dict/#iterate","title":"Iterate","text":"Action Code Details  Loop over keys  <pre><code>for key in x:\n</code></pre>  Loop over values  <pre><code>for value in x.values():\n</code></pre>  Loop over key-value pairs  <pre><code>for key, value in x.items():\n</code></pre> More efficient than a key-based for-loop as each <code>x[k]</code> lookup requires recomputation of the hash for k","tags":["dictionary","map"]},{"location":"python/collections/dict/#show","title":"Show","text":"Action Code Details  Pretty print  <pre><code>pprint.pprint(x)\n</code></pre>","tags":["dictionary","map"]},{"location":"python/collections/iter/","title":"Iterators","text":"","tags":["iterable"]},{"location":"python/collections/iter/#iterators","title":"Iterators","text":"","tags":["iterable"]},{"location":"python/collections/iter/#create","title":"Create","text":"Action Code Details  Indefinite counter  <pre><code>itertools.count()\n</code></pre>  Create counter starting from n <pre><code>itertools.count(n)\n</code></pre>  Create counter starting from n with step size s <pre><code>itertools.count(n, s)\n</code></pre>  Create limited counter from n to m <pre><code>?\n</code></pre>  Repeat constant value v by n times  <pre><code>itertools.repeat(v, n)\n</code></pre>  2D coordinates grid from (0, 0) to (n - 1, m - 1 )  <pre><code>itertools.product(range(n), range(m))\n</code></pre>  From string (over chars)  <pre><code>iter(str)\n</code></pre>  From list  <pre><code>iter(lst)\n</code></pre>  Enumeration pairs (index, element) from list  <pre><code>enumerate(lst)\n</code></pre>  From list, indefinitely  <pre><code>itertools.cycle(lst)\n</code></pre>  From list, n times  <pre><code>itertools.product(lst, n)\n</code></pre>  Concatenate lists  <pre><code>itertools.chain(lst1, lst2)\n</code></pre>  Key-value pairs from dict  <pre><code>enumerate(dct)\n</code></pre>  Create n copies of iterable  <pre><code>itertools.tee(x, 2)\n</code></pre>  Create n copies of iterable  <pre><code>x1, x2 = itertools.tee(x)\n</code></pre>","tags":["iterable"]},{"location":"python/collections/iter/#usage","title":"Usage","text":"Action Code Details  Loop over iterator  <pre><code>for i in iter:\n    print(i)\n</code></pre>","tags":["iterable"]},{"location":"python/collections/iter/#test","title":"Test","text":"<p>Note that all tests consume.</p> Action Code Details  All elements are true  <pre><code>all(bool_iter)\n</code></pre>  Any element is true  <pre><code>any(bool_iter)\n</code></pre>  All elements are false  <pre><code>not any(bool_iter)\n</code></pre>  Any element is false  <pre><code>not all(bool_iter)\n</code></pre>  All elements are equal  <pre><code>g = groupby(x)\nnext(g, True) and not next(g, False)\n</code></pre>  All elements are true conditional on function  <pre><code>all(map(boolFun, iter))\n</code></pre>","tags":["iterable"]},{"location":"python/collections/iter/#extract","title":"Extract","text":"<p>Operations (partially) consume the iterable unless mentioned otherwise.</p> Action Code Details  Get remaining length  <pre><code>sum(1 for _ in iter)\n</code></pre> Fully consumes  Next element  <pre><code>next(iter)\n</code></pre>  Get next element with default if depleted  <pre><code>next(iter, 0)\n</code></pre>  Get n th element  <pre><code>next(itertools.islice(x, n, None), default)\n</code></pre>  Get first element according to criterion  <pre><code>next(e for e in x if e == 1)\n</code></pre>  Get first element according to criterion  <pre><code>next(filter(lambda e: e == 1, x))\n</code></pre>  Get index of first true element  <pre><code>?\n</code></pre>  Get index of first false element  <pre><code>?\n</code></pre>","tags":["iterable"]},{"location":"python/collections/iter/#update","title":"Update","text":"Action Code Details  Clear (consume fully)  <pre><code>collections.deque(x, maxlen=0)\n</code></pre>","tags":["iterable"]},{"location":"python/collections/iter/#derive","title":"Derive","text":"Action Code Details  First n items of iterable  <pre><code>itertools.islice(x, n)\n</code></pre>  Last n items of iterable  <pre><code>iter(collections.deque(x, maxlen = n))\n</code></pre>  Drop first n items of iterable  <pre><code>itertools.islice(x, start=n)\n</code></pre>  Drop while predicate is true  <pre><code>itertools.dropwhile(lambda x: x &lt; 5, x)\n</code></pre>  Slice based on (index) integer iterable  <pre><code>?\n</code></pre>  Filter based on boolean function  <pre><code>filter(bool_fun, iterable)\n</code></pre>  Filter based on boolean iterable  <pre><code>itertools.compress(x, mask_iter)\n</code></pre>  Inverse filter iterable based on a boolean iterable  <pre><code>itertools.filterfalse(mask, x)\n</code></pre>  Take while predicate is true  <pre><code>itertools.takewhile(lambda x: x &lt; 5, x)\n</code></pre>  Filter iterables based on boolean function  <pre><code>filter(lambda x: x[0] != x[1], zip(iter1, iter2))\n</code></pre>","tags":["iterable"]},{"location":"python/collections/iter/#transform-iterable","title":"Transform iterable","text":"<p>Using the derived iterable consumes the original one as well.</p> Action Code Details  Transform elements by expression  <pre><code>x + 1 for x in iter\n</code></pre>  Map elements with function  <pre><code>map(fun, iter)\n</code></pre>  Invert boolean iterator  <pre><code>map(lambda x: not x, bool_iter)\n</code></pre>  Invert boolean iterator  <pre><code>map(operator.not_, bool_iter)\n</code></pre>  Cumulative sum  <pre><code>itertools.accumulate(iter)\n</code></pre>  Accumulate function (reduce() with keeping all results)  <pre><code>itertools.accumulate(iter, fun)\n</code></pre>","tags":["iterable"]},{"location":"python/collections/iter/#grow","title":"Grow","text":"Action Code Details  Append iterable  <pre><code>itertools.chain(iter, append_iter)\n</code></pre>  Prepend iterable  <pre><code>itertools.chain(prepend_iter, iter)\n</code></pre>  Cartesian product of two or more iterables  <pre><code>itertools.product(x, y, ...)\n</code></pre>  Repeat iterable indefinitely  <pre><code>itertools.cycle(x)\n</code></pre>  Repeat iterable n times  <pre><code>itertools.repeat(x, n)\n</code></pre>  Repeat each element of iterable n times  <pre><code>itertools.chain.from_iterable(itertools.repeat(tuple(x), n))\n</code></pre>","tags":["iterable"]},{"location":"python/collections/iter/#shrink","title":"Shrink","text":"","tags":["iterable"]},{"location":"python/collections/iter/#combine-iterables","title":"Combine iterables","text":"Action Code Details  Chain iterables (concatenate)  <pre><code>itertools.chain.from_iterable(x, y, ...)\n</code></pre>  Combine iterable elements as tuple, stop on shortest iterable  <pre><code>zip(x, y, ...)\n</code></pre>  Combine iterable elements as tuple, expect equal length  <pre><code>zip(x, y, ..., strict=True)\n</code></pre> Throws error if an iterable is depleted prematurely  Combine iterable elements as tuple until all iterables are exhausted, with default value for depleted iterables  <pre><code>itertools.zip_longest(x, y, ..., fillvalue = None)\n</code></pre>  Create combinations of pairs  <pre><code>itertools.combinations(x, 2)\n</code></pre>  Create combinations of size n <pre><code>itertools.combinations(x, n)\n</code></pre>  Create combinations of size n with replacement  <pre><code>itertools.combinations_with_replacement(x, n)\n</code></pre>  Create combinations of pairs with replacement (so including pairs of (A, A))  <pre><code>itertools.combinations_with_replacement(x, 2)\n</code></pre>  Create permutations  <pre><code>itertools.permutations(x)\n</code></pre>","tags":["iterable"]},{"location":"python/collections/iter/#convert","title":"Convert","text":"Action Code Details  List  <pre><code>list(iter)\n</code></pre>  Tuple  <pre><code>tuple(iter)\n</code></pre>  Dict  <pre><code>dict(zip(key_iter, value_iter))\n</code></pre>","tags":["iterable"]},{"location":"python/collections/list/","title":"List","text":""},{"location":"python/collections/list/#list","title":"List","text":"<p>An ordered collection of elements</p> <p>Details Tips:</p> <ul> <li>Lists can be efficiently used as a stack through <code>append()</code> (for push) and <code>pop()</code>.</li> <li>Sorting seems to be broken for numeric lists containing NaN</li> </ul>"},{"location":"python/collections/list/#create-list","title":"Create list","text":"Action Code Details  Empty list  <pre><code>[]\n</code></pre>  List with single element  <pre><code>['hello']\n</code></pre>  Define with values  <pre><code>[1, 3, 9]\n</code></pre>  Define with n repeated values v <pre><code>[v] * n\n</code></pre>  List of n increasing counts, starting from zero  <pre><code>list(range(n))\n</code></pre>  List of increasing counts, starting from zero with step size s <pre><code>list(range(0, n, s))\n</code></pre>  List of n decreasing counts to zero  <pre><code>list(range(n, 0, -1))\n</code></pre>  List of n decreasing counts to zero, with step size s <pre><code>list(range(n, 0, -s))\n</code></pre>  List of increasing integers between [a, b]  <pre><code>list(range(a, b))\n</code></pre>  From tuple  <pre><code>t = (1, 3, 9)\nx = list(t)\n</code></pre>  From iterable  <pre><code>x = list(iter)\n</code></pre> Fully consumes the iterable.  Lists from zipped list  <pre><code>a = (1, 2); b = (-1, -2)\nab = zip(a, b)\na2, b2 = zip(*ab)\n</code></pre>  Sample n random integers between [ a, b ) with replacement  <pre><code>import random\nrandom.choices(range(a, b), k=n)\n</code></pre> Considerably faster than list comprehension  Sample n random integers between [ a, b ) w/o replacement  <pre><code>random.sample(range(a, b), n)\n</code></pre>  From lists generated dynamically by iterating over a generating function fun <pre><code>list(itertools.chain.from_iterable(\n    [fun(e) for e in entries]\n))\n</code></pre>  Generate list of r-length permutation tuples from indices up to b <pre><code>list(itertools.combinations_with_replacement(range(b), r))\n</code></pre> Returns <code>[(0, 0), (0, 1), ..., (b - 1, b - 1)]</code>"},{"location":"python/collections/list/#test","title":"Test","text":"Action Code Details  Is list or subclass  <pre><code>isinstance(x, list)\n</code></pre>  Is list and not subclass  <pre><code>type(x) is list\n</code></pre>  Empty  <pre><code>not x\n</code></pre>  Not empty  <pre><code>x\n</code></pre>  Pairwise equal to another list  <pre><code>x == y\n</code></pre>  Contains <code>None</code> <pre><code>None in x\n</code></pre>  Contains element e <pre><code>e in x\n</code></pre>  Contains elements  <pre><code>{1, 2}.issubset(x)\n</code></pre>  Contains elements elems <pre><code>set(elems).issubset(x)\n</code></pre>  Does not contain element e <pre><code>e not in x\n</code></pre>  Elements are all of type t <pre><code>all(isinstance(e, t) for e in x)\n</code></pre> e.g., type <code>str</code>  All elements True  <pre><code>all(x)\n</code></pre>  Any element True  <pre><code>any(x)\n</code></pre>  Are elements sorted  <pre><code>x == sorted(x)\n</code></pre>  No duplicate elements  <pre><code>len(x) == len(set(x))\n</code></pre>  Has duplicate elements  <pre><code>len(x) != len(set(x))\n</code></pre>"},{"location":"python/collections/list/#extract","title":"extract","text":"Action Code Details  Number of elements (length)  <pre><code>len(x)\n</code></pre>  Hash  <pre><code>hash(tuple(x))\n</code></pre>  First element  <pre><code>x[0]\n</code></pre>  Last element  <pre><code>x[-1]\n</code></pre>  Random element  <pre><code>import random\nrandom.choice(x)\n</code></pre>  Number of occurrences of element  <pre><code>x.count(e)\n</code></pre>  Index of element  <pre><code>x.index(e)\n</code></pre> Throws error if not found  Index of element in slice [a,b]  <pre><code>x.index(e, a, b)\n</code></pre> Throws error if not found"},{"location":"python/collections/list/#aggregate","title":"Aggregate","text":"Action Code Details  Min  <pre><code>min(x)\n</code></pre>  Max  <pre><code>max(x)\n</code></pre>  Sum  <pre><code>sum(x)\n</code></pre>  Mean  <pre><code>sum(x) / len(x)\n</code></pre> Faster than <code>fmean</code> and <code>mean</code> from <code>statistics</code>  Most frequent element (mode)  <pre><code>statistics.mode(x)\n</code></pre>"},{"location":"python/collections/list/#update","title":"Update","text":""},{"location":"python/collections/list/#transform","title":"Transform","text":"Action Code Details  Update element at index i <pre><code>x[i] = e2\n</code></pre>  Update slice with list  <pre><code>x[2:3] = [5, 6]\n</code></pre>"},{"location":"python/collections/list/#order","title":"Order","text":"Action Code Details  Reverse elements  <pre><code>x.reverse()\n</code></pre>  Sort elements ascending  <pre><code>x.sort()\n</code></pre>  Sort elements descending  <pre><code>x.sort(reverse=True)\n</code></pre>  Sort on transformed elements, ascending  <pre><code>x.sort(key=str.lower)\n</code></pre>"},{"location":"python/collections/list/#grow","title":"Grow","text":"Action Code Details  Append element  <pre><code>x.append(e)\n</code></pre>  Append a list  <pre><code>x += y\n</code></pre>  Append a list  <pre><code>x.extend(y)\n</code></pre>  Insert at index i <pre><code>x.insert(i, e)\n</code></pre>"},{"location":"python/collections/list/#shrink","title":"Shrink","text":"Action Code Details  Clear  <pre><code>x.clear()\n</code></pre>  Clear  <pre><code>x[:] = []\n</code></pre> Probably slower  Remove at index i <pre><code>del x[i]\n</code></pre>  Remove at index i <pre><code>x[i] = []\n</code></pre>  Remove slice  <pre><code>del x[2:3]\n</code></pre>  Remove slice  <pre><code>x[2:3] = []\n</code></pre>  Remove element (first occurrence)  <pre><code>x.remove(e)\n</code></pre>  Remove all elements with value  <pre><code>?\n</code></pre>  Remove last index and return the element (pop)  <pre><code>x.pop()\n</code></pre>  Remove at index i and return the element  <pre><code>x.pop(e, i)\n</code></pre>"},{"location":"python/collections/list/#derive","title":"Derive","text":"Action Code Details  Shallow copy  <pre><code>x.copy()\n</code></pre> Fastest for large lists  Shallow copy  <pre><code>[*x]\n</code></pre> Fastest for small lists  Shallow copy  <pre><code>x[:]\n</code></pre> Probably very slow  Shallow copy  <pre><code>copy.copy(x)\n</code></pre> Not sure what the difference to <code>.copy()</code> is  Deep copy (don't preserve refs)  <pre><code>copy.deepcopy(x)\n</code></pre> Constructs a new compound object and then, recursively, inserts copies into it of the objects found in the original."},{"location":"python/collections/list/#transform_1","title":"Transform","text":"Action Code Details  Transform via expression  <pre><code>[e + 1 for e in x]\n</code></pre>  Map function  <pre><code>[fun(e) for e in x]\n</code></pre>  Map function  <pre><code>list(map(fun, x))\n</code></pre> Slow  Elements to string  <pre><code>[str(e) for e in x]\n</code></pre>  Conditional update  <pre><code>[e if e != 0 else -1 for e in x]\n</code></pre>  Ternary map  <pre><code>[e if e &gt; 2 else 10 for e in x]\n</code></pre>  Nested ternary map  <pre><code>[e if e &gt; 2 else 10 if e &lt; 3 else 5 for e in x]\n</code></pre> Good luck reading this  Rank ascendingly  <pre><code>list(scipy.stats.rankdata(x))\n</code></pre> Uses scipy package  Sort-index ascendingly  <pre><code>list(np.argsort(x))\n</code></pre> Uses numpy package  Sort-index ascendingly  <pre><code>sorted(range(len(x)), key=x.__getitem__)\n</code></pre>  Sort-index ascendingly  <pre><code>[e[0] for e in sorted(enumerate(x), key=lambda x: x[1])]\n</code></pre> Tedious"},{"location":"python/collections/list/#order_1","title":"Order","text":"Action Code Details  Reverse  <pre><code>reversed(x)\n</code></pre>  Sort ascendingly  <pre><code>sorted(x)\n</code></pre> Elements must be sortable!  Sort descendingly  <pre><code>sorted(x, reverse=True)\n</code></pre> Elements must be sortable!  Sort by reference order list  <pre><code>[x for _, x in sorted(zip(ref_order, x))]\n</code></pre>  Naturally sort string elements  <pre><code>from natsort import natsorted\nnatsorted(x)\n</code></pre> E.g., sort as ['abc1', 'abc2', 'abc10']  Shuffle elements  <pre><code>random.shuffle(x)\n</code></pre>"},{"location":"python/collections/list/#grow_1","title":"Grow","text":"Action Code Details  Replicate list n times  <pre><code>x * n\n</code></pre>  Replicate to ensure length n <pre><code>from itertools import islice, cycle\nlist(islice(cycle(x), n))\n</code></pre>  Append element  <pre><code>x + [e]\n</code></pre>  Append elements  <pre><code>x + [e1, e2, e3]\n</code></pre>  Append a list  <pre><code>x + y\n</code></pre>"},{"location":"python/collections/list/#shrink_1","title":"Shrink","text":"Action Code Details  Slice  <pre><code>x[1:3]\n</code></pre>  First n elements (head)  <pre><code>x[:n]\n</code></pre>  Last n elements (tail)  <pre><code>x[-n:]\n</code></pre>  Select n elements at random  <pre><code>import random\nrandom.choices(x, k=n)\n</code></pre>  Remove first n elements  <pre><code>x[n:]\n</code></pre>  Remove last n elements  <pre><code>x[:-n]\n</code></pre>  List of elements from a list of indices  <pre><code>[x[i] for i in indices]\n</code></pre>  Filter on condition  <pre><code>[e for e in x if e &gt; 0]\n</code></pre>  Filter on predicate function  <pre><code>filter(fun, x)\n</code></pre>"},{"location":"python/collections/list/#combine-lists","title":"Combine lists","text":"Action Code Details  Concatenate lists  <pre><code>x + y + z\n</code></pre>"},{"location":"python/collections/list/#iterate","title":"Iterate","text":"<p>Iterate over the elements of the list</p> Action Code Details  Loop over elements  <pre><code>for e in x:\n</code></pre>  Loop over elements and index  <pre><code>for i, e in enumerate(x):\n</code></pre>  Loop over elements and index, starting from index s <pre><code>for i, e in enumerate(x, s):\n</code></pre>  Loop over multiple lists  <pre><code>for a, b in zip(x, y):\n</code></pre>  Loop over multiple lists, with index  <pre><code>for i, (a, b) in enumerate(zip(x, y)):\n</code></pre>  Iterate over a list of lists for each nested element  <pre><code>itertools.chain.from_iterable(x)\n</code></pre>"},{"location":"python/collections/list/#convert","title":"Convert","text":"Action Code Details  Multiple assignment  <pre><code>x = [1, 2]\na, b = x\n</code></pre>  Tuple  <pre><code>tuple(x)\n</code></pre>  Set  <pre><code>set(x)\n</code></pre>  To dict (from keys and values)  <pre><code>dict(zip(keys, values))\n</code></pre>  Flatten a list of lists  <pre><code>list(itertools.chain.from_iterable(x))\n</code></pre>"},{"location":"python/collections/set/","title":"Set","text":""},{"location":"python/collections/set/#set","title":"Set","text":"<p>A collection of unique items, unordered and unindexed.</p>"},{"location":"python/collections/set/#create","title":"Create","text":"<p>Create a set</p> Action Code Details  Empty set  <pre><code>set()\n</code></pre> <code>{}</code> defines a dictionary!  Define with values  <pre><code>{'apple', 'banana', 'pear'}\n</code></pre>  From tuple  <pre><code>set(x)\n</code></pre>  From list  <pre><code>set(x)\n</code></pre>  From iterable (consumes)  <pre><code>set(x)\n</code></pre>"},{"location":"python/collections/set/#test","title":"Test","text":"Action Code Details  Is set or subclass  <pre><code>isinstance(x, set)\n</code></pre>  Is set and not subclass  <pre><code>type(x) is set\n</code></pre>  Empty  <pre><code>not x\n</code></pre>  Not empty  <pre><code>x\n</code></pre>  Contains value v <pre><code>v in x\n</code></pre>  Contains <code>None</code> <pre><code>None in x\n</code></pre>  Contains all of the given values  <pre><code>{v1, v2}.issubset(x)\n</code></pre>  Contains all of the given values  <pre><code>x.issuperset([v1, v2])\n</code></pre>  Contains any of the given values  <pre><code>not x.isdisjoint([v1, v2])\n</code></pre>  Contains none of the given values  <pre><code>x.isdisjoint([v1, v2])\n</code></pre>"},{"location":"python/collections/set/#compare-with-another-set","title":"Compare with another set","text":"Action Code Details  Sets share no values  <pre><code>x.isdisjoint(y)\n</code></pre>  Set is a subset of the other: all values of x are in y  <pre><code>x.issubset(y)\n</code></pre>  Set is a superset of the other: all values of y are in x  <pre><code>x.issuperset(y)\n</code></pre>"},{"location":"python/collections/set/#extract","title":"Extract","text":"Action Code Details  Number of (unique) values  <pre><code>len(x)\n</code></pre>  Hash  <pre><code>hash(frozenset(x))\n</code></pre>"},{"location":"python/collections/set/#update","title":"Update","text":""},{"location":"python/collections/set/#grow","title":"Grow","text":"Action Code Details  Add value if needed  <pre><code>x.add('strawberry')\n</code></pre>  Add multiple values if needed  <pre><code>x.update(['strawberry', 'kiwi'])\n</code></pre>"},{"location":"python/collections/set/#shrink","title":"Shrink","text":"Action Code Details  Remove all values (clear)  <pre><code>x.clear()\n</code></pre>  Remove value  <pre><code>x.remove('strawberry')\n</code></pre> Throws error if value is missing  Remove value if needed  <pre><code>x.discard('strawberry')\n</code></pre>"},{"location":"python/collections/set/#derive","title":"Derive","text":""},{"location":"python/collections/set/#combine","title":"Combine","text":"<p>Combine with another set</p> Action Code Details  Union with another set  <pre><code>x | y\n</code></pre>  Union with another set  <pre><code>x.union(y)\n</code></pre>  Intersection with another set: get values which are present in both sets  <pre><code>x &amp; y\n</code></pre>  Intersection with another set: get values which are present in both sets  <pre><code>x.intersect(y)\n</code></pre>  Difference to another set: get values which are not present in the other set  <pre><code>x - y\n</code></pre>  Difference to another set: get values which are not present in the other set  <pre><code>x.difference(y)\n</code></pre>  Symmetric difference with another set: get values that are not present in both sets  <pre><code>x ^ y\n</code></pre>  Symmetric difference with another set: get values that are not present in both sets  <pre><code>x.symmetric_difference(y)\n</code></pre>"},{"location":"python/collections/set/#convert","title":"Convert","text":"<p>The order of the values in the output should not be relied on</p> Action Code Details  Tuple of values  <pre><code>tuple(x)\n</code></pre>  List of values  <pre><code>list(x)\n</code></pre>"},{"location":"python/collections/tuple/","title":"Tuple","text":"","tags":["immutable","pair"]},{"location":"python/collections/tuple/#tuple","title":"Tuple","text":"<p>An ordered immutable collection of elements.</p>","tags":["immutable","pair"]},{"location":"python/collections/tuple/#create","title":"Create","text":"Action Code Details  Empty tuple  <pre><code>()\n</code></pre>  Define with single element  <pre><code>(1,)\n</code></pre> Comma is important  Define with multiple elements  <pre><code>(1, 2, 3)\n</code></pre>  Define with elements via multiple assignment  <pre><code>x = 1, 2, 3\n</code></pre>  From iterator  <pre><code>tuple(a)\n</code></pre>  From iterator by unpacking  <pre><code>(*a,)\n</code></pre>  From comprehension  <pre><code>tuple(v * 2 for v in a)\n</code></pre>","tags":["immutable","pair"]},{"location":"python/collections/tuple/#test","title":"Test","text":"Action Code Details  Empty  <pre><code>not x\n</code></pre>  Not empty  <pre><code>x\n</code></pre>  Contains value v <pre><code>v in x\n</code></pre>  Contains duplicate values  <pre><code>len(v) != len(set(v))\n</code></pre>  Does not contain value v <pre><code>v not in x\n</code></pre>  All elements are <code>True</code> <pre><code>all(x)\n</code></pre>  Any element is <code>True</code> <pre><code>any(x)\n</code></pre>  No elements are <code>True</code> <pre><code>not any(x)\n</code></pre>","tags":["immutable","pair"]},{"location":"python/collections/tuple/#extract","title":"Extract","text":"Action Code Details  Length  <pre><code>len(x)\n</code></pre>  Hash  <pre><code>hash(x)\n</code></pre>  Value at index i (_i_th value)  <pre><code>x[i]\n</code></pre>  Value from end index j <pre><code>x[-j]\n</code></pre>  Count occurrences of value v <pre><code>x.count(v)\n</code></pre>  First index of value v <pre><code>x.index(v)\n</code></pre> Error if missing  First index of value v between index range [ n, m ]  <pre><code>x.index(v, n, m)\n</code></pre> Error if missing in range","tags":["immutable","pair"]},{"location":"python/collections/tuple/#aggregate","title":"Aggregate","text":"Action Code Details  Sum elements  <pre><code>sum(x)\n</code></pre>  Min of elements  <pre><code>min(x)\n</code></pre>  Max of elements  <pre><code>max(x)\n</code></pre>","tags":["immutable","pair"]},{"location":"python/collections/tuple/#update","title":"Update","text":"<p>Although tuples are immutable, it's possible to update the tuple stored in a variable in-place</p>","tags":["immutable","pair"]},{"location":"python/collections/tuple/#grow","title":"Grow","text":"Action Code Details  Append element  <pre><code>x += (1,)\n</code></pre>  Append elements  <pre><code>x += (1, 2)\n</code></pre>","tags":["immutable","pair"]},{"location":"python/collections/tuple/#combine","title":"Combine","text":"Action Code Details  Append tuple y <pre><code>x += y\n</code></pre>  Append elements of list y <pre><code>x += tuple(y)\n</code></pre>","tags":["immutable","pair"]},{"location":"python/collections/tuple/#derive","title":"Derive","text":"","tags":["immutable","pair"]},{"location":"python/collections/tuple/#order","title":"Order","text":"Action Code Details  Reverse  <pre><code>x[::-1]\n</code></pre>  Reverse  <pre><code>tuple(reversed(x))\n</code></pre> Much slower in all cases  Sort ascendingly  <pre><code>tuple(sorted(x))\n</code></pre>  Shuffle  <pre><code>tuple(random.sample(x, k=len(x)))\n</code></pre>","tags":["immutable","pair"]},{"location":"python/collections/tuple/#grow_1","title":"Grow","text":"Action Code Details  Replicate elements n times  <pre><code>x * n\n</code></pre>","tags":["immutable","pair"]},{"location":"python/collections/tuple/#shrink","title":"Shrink","text":"Action Code Details  Slice between [ n, m ] (subset)  <pre><code>x[n:m]\n</code></pre>  First n elements  <pre><code>x[:n]\n</code></pre>  Last n elements  <pre><code>x[-n:]\n</code></pre>","tags":["immutable","pair"]},{"location":"python/collections/tuple/#combine_1","title":"Combine","text":"Action Code Details  Concatenate tuples  <pre><code>x + y + z\n</code></pre>","tags":["immutable","pair"]},{"location":"python/collections/tuple/#convert","title":"Convert","text":"Action Code Details  Multiple assignment  <pre><code>a, b = x\n</code></pre> Number of variables must match tuple length  Comma-separated string  <pre><code>str(x)\n</code></pre>  List  <pre><code>list(x)\n</code></pre>  List  <pre><code>[*x]\n</code></pre>  Set  <pre><code>set(x)\n</code></pre>  Set  <pre><code>{*x}\n</code></pre>","tags":["immutable","pair"]},{"location":"python/controlflow/","title":"Control flows","text":""},{"location":"python/controlflow/#control-flows","title":"Control flows","text":""},{"location":"python/controlflow/#conditional-flows","title":"Conditional flows","text":"Action Code Details  If statement  <pre><code>if a == 2:\n    print('A is 2')\n</code></pre>  If statement on single line (one-liner)  <pre><code>if x &lt; y &lt; z: print(x); print(y); print(z)\n</code></pre>  If-else statement  <pre><code>if a == 2:\n    print('A is 2')\nelse:\n    print('A is not 2')\n</code></pre>  Nested if-else statements  <pre><code>if a == 2:\n    print('A is 2')\nelif a == 3:\n    print('A is 3')\nelse:\n    print('A is not 2 and 3')\n</code></pre>  Switch statement (match)  <pre><code>match fruit:\n    case 'banana':\n        print('Fruit is banana')\n    case 'apple':\n        print('Apple')\n</code></pre>  Switch statement with default  <pre><code>match fruit:\n    case 'banana':\n        print('Fruit is banana')\n    case 'apple':\n        print('Apple')\n    case _:  # default\n        print('Undefined object')\n</code></pre>  Switch statement with conditional (guarded) cases  <pre><code>match fruit:\n    case 'banana':\n        print('Banana')\n    case 'apple' if in_stock &gt; 5:\n        print('Apple available')\n    case _:  # default\n        print('Unavailable')\n</code></pre>"},{"location":"python/controlflow/#iterative-flows","title":"Iterative flows","text":"Action Code Details  While loop  <pre><code>while condition():\n    work()\n</code></pre>  Infinite while loop  <pre><code>while True:\n    pass\n</code></pre>  While loop with skips  <pre><code>while condition():\n    if condition2():\n        continue\n    work()\n</code></pre>  While loop with finalization  <pre><code>while condition():\n    work()\nelse:\n    print('Work completed')\n</code></pre>  Do-while loop  <pre><code>while True:\n    work()\n    if condition():\n        break\n</code></pre> Not natively supported in Python. This snippet does not work with Else because the loop is terminated using <code>break</code>.  For loop  <pre><code>for i in range(4):\n    work(i)\n</code></pre>  For loop with finalization  <pre><code>for i in range(4):\n    work(i)\nelse:\n    print('Success')\n</code></pre>  For loop with skips  <pre><code>for i in range(4):\n    if i == 2:\n        continue\n    work(i)\n</code></pre>"},{"location":"python/controlflow/#errorexception-flows","title":"Error/exception flows","text":"Action Code Details  Assert statement  <pre><code>assert True != False\n</code></pre>  Assert statement with custom message  <pre><code>assert True != False, 'faulty logic'\n</code></pre>  Raise error e <pre><code>raise e\n</code></pre>  Try statement  <pre><code>try:\n    io_action()\n</code></pre>  Try statement with general exception handling  <pre><code>import sys\ntry:\n    io_action()\nexcept:\n    print(repr(sys.exception()))\n</code></pre>  Try statement with exception handling  <pre><code>try:\n    io_action()\nexcept e as FileNotFoundError:\n    print(repr(sys.exception()))\n</code></pre>  Try statement with handling of multiple exceptions  <pre><code>try:\n    io_action()\nexcept e as FileNotFoundError:\n    print('File is missing')\nexcept e as InterruptedError:\n    print('Interrupted')\n</code></pre>  Try statement with exception group handling  <pre><code>try:\n    io_action()\nexcept* OSError as e:\n    print(f'caught {type(e)} with nested {e.exceptions}')\n</code></pre> Note the asterisk  Try statement with finalization when executation completed successfully (no errors, returns, breaks)  <pre><code>try:\n    io_action()\nelse:\n    print('Success!')\n</code></pre>  Try statement with cleanup statement  <pre><code>try:\n    io_action()\nfinally:\n    print('We are done')\n</code></pre> The finally clause is always executed, even when the try statement errs, returns, or breaks.  With statement  <pre><code>with a() as A:\n    work()\n</code></pre> Run statements using a context manager, which ensures safe handling of resources, handling both opening (enter) and closing (exit).  Multiple with statements  <pre><code>with a() as A, b() as B:\n    work()\n</code></pre>"},{"location":"python/devtools/","title":"Devtools","text":""},{"location":"python/devtools/#devtools","title":"Devtools","text":""},{"location":"python/devtools/pip/","title":"pip","text":""},{"location":"python/devtools/pip/#pip","title":"pip","text":"<p>Package installer for Python (pip)</p>"},{"location":"python/devtools/pip/#info","title":"Info","text":"Action Code Details  Pip version  <pre><code>python -m pip --version\n</code></pre>  List of outdated packages  <pre><code>pip list --outdated\n</code></pre>"},{"location":"python/devtools/pip/#add-packages","title":"Add packages","text":"Action Code Details  Install package from PyPI  <pre><code>pip install SomeProject\n</code></pre>  Install multiple packages from PyPI  <pre><code>pip install SomePackage1 SomePackage2\n</code></pre>  Reinstall package from PyPI  <pre><code>pip install --force-reinstall SomeProject\n</code></pre>  Install package with specific version  <pre><code>pip install 'SomeProject==1.4'\n</code></pre>  Install package with specific version or   <pre><code>pip install 'SomeProject~=1.4.2'\n</code></pre>  Install pre-release version of package  <pre><code>pip install --pre SomeProject\n</code></pre>  Install package, without dependencies  <pre><code>pip install --no-deps SomeProject\n</code></pre>  Install package with optional variant (functionality)  <pre><code>pip install 'SomePackage[PDF]'\n</code></pre>  Install package with optional variants  <pre><code>pip install 'SomePackage[PDF,EPUB]'\n</code></pre>  Install from local archive file  <pre><code>pip install ./downloads/SomeProject-1.0.4.tar.gz\n</code></pre>  Install from Git repository  <pre><code>pip install git+https://github.com/pypa/sampleproject.git\n</code></pre>  Install from Git repository, with package located in the 'src' directory  <pre><code>pip install git+https://github.com/pypa/sampleproject.git#subdirectory=src\n</code></pre>  Install from Git repository on branch  <pre><code>pip install git+https://github.com/pypa/sampleproject.git@main\n</code></pre>"},{"location":"python/devtools/pip/#upgrade-packages","title":"Upgrade packages","text":"Action Code Details  Upgrade pip  <pre><code>python -m pip install --upgrade pip\n</code></pre>  Upgrade package and dependencies  <pre><code>pip install -U SomeProject\n</code></pre> The handling of dependencies depends on the upgrade-strategy used.  Upgrade package, and dependencies if needed  <pre><code>pip install -U --upgrade-strategy=only-if-needed SomeProject\n</code></pre>  Upgrade all packages on Windows  <pre><code>pip freeze | %{$_.split('==')[0]} | %{pip install --upgrade $_}\n</code></pre> Not recommended! As it can result in cross-dependency version conflicts."},{"location":"python/devtools/pip/#remove-packages","title":"Remove packages","text":"Action Code Details  Uninstall a package  <pre><code>pip uninstall SomeProject\n</code></pre>  Uninstall packages listed in requirements.txt <pre><code>pip uninstall -r requirements.txt\n</code></pre>"},{"location":"python/devtools/pip/#save-state","title":"Save state","text":"Action Code Details  Generate requirements.txt from all installed packages  <pre><code>pip freeze &gt; requirements.txt\n</code></pre> Great way to bloat your deps list...  Generate requirements.txt from used imports only  <pre><code>pigar generate\n</code></pre> Preferred over pipreqs, as that fails for misnamed modules"},{"location":"python/devtools/pip/#restore-state","title":"Restore state","text":"Action Code Details  Install packages from requirements.txt <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"python/devtools/poetry/","title":"poetry","text":""},{"location":"python/devtools/poetry/#poetry","title":"poetry","text":"<p>Package management tool. Manages dependencies, package setup and building using the standardized pyproject.toml file. This replaces the need for setup.py, requirements.txt, MANIFEST.in and Pipfile.*. Poetry isolates the virtualenv from the project.</p>"},{"location":"python/devtools/poetry/#new","title":"New","text":"Action Code Details  Start a new Python project  <pre><code>poetry new --src $pkg\n</code></pre>  Initialize poetry for pre-existing project  <pre><code>poetry init\n</code></pre>"},{"location":"python/devtools/poetry/#info","title":"Info","text":"Action Code Details  List installed packages  <pre><code>poetry show\n</code></pre>  Get info about installed package  <pre><code>poetry show $pkg\n</code></pre> Add <code>-v</code> for more info  Get path to package  <pre><code>poetry run python -c \"import $pkg; print($pkg.__file__)\n</code></pre>"},{"location":"python/devtools/poetry/#add-packages","title":"Add packages","text":"Action Code Details  Add specific package(s)  <pre><code>poetry add $pkg1 $pkg2\n</code></pre>  Add package(s), force install latest  <pre><code>poetry add $pkg1@latest\n</code></pre>  Add a package for a specific version  <pre><code>poetry add $pkg==1.0.1\n</code></pre>  Add git dependency  <pre><code>poetry add git+https://github.com/niekdt/actionsheets.git\n</code></pre>  Add git dependency with version  <pre><code>poetry add git+https://github.com/niekdt/actionsheets.git#0.1.0\n</code></pre>  Add git dependency on branch  <pre><code>poetry add git+https://github.com/niekdt/actionsheets.git#main\n</code></pre>  Add local dependency  <pre><code>poetry add ./my-package/\n</code></pre>  Add local dependency archive  <pre><code>poetry add ../my-package/dist/my-package-0.1.0.tar.gz\n</code></pre>  Add a dev package  <pre><code>poetry add -D $pkg\n</code></pre>"},{"location":"python/devtools/poetry/#update-packages","title":"Update packages","text":"Action Code Details  Update poetry  <pre><code>poetry self update\n</code></pre>  Update specific package(s)  <pre><code>poetry update $pkg1 $pkg2\n</code></pre>  Update all packages  <pre><code>poetry update\n</code></pre>  Update all packages, including packages from (private) Git-SSH repositories with passphrase  <pre><code>poetry update -vv\n</code></pre> Without the <code>-vv</code> option, poetry runs forever if a password is required for the SSH key"},{"location":"python/devtools/poetry/#remove-packages","title":"Remove packages","text":"Action Code Details  Remove package(s)  <pre><code>poetry remove $pkg1 $pkg2\n</code></pre>  Remove dependencies not specified in lock file  <pre><code>poetry install --sync\n</code></pre>"},{"location":"python/devtools/poetry/#save-state","title":"Save state","text":"Action Code Details  Generate lock file  <pre><code>poetry lock\n</code></pre>  Export environment as requirements.txt <pre><code>poetry export -f requirements.txt &gt; requirements.txt\n</code></pre> Requires a plugin, install via: <code>poetry self add poetry-plugin-export</code>  Export environment as requirements.txt without hashes  <pre><code>poetry export --without-hashes -f requirements.txt &gt; requirements.txt\n</code></pre> Requires a plugin, install via: <code>poetry self add poetry-plugin-export</code>"},{"location":"python/devtools/poetry/#restore-state","title":"Restore state","text":"Action Code Details  Install all dependencies, but not the root project  <pre><code>poetry install --no-root\n</code></pre> For <code>package.mode=false</code>, you can just run <code>poetry install</code>  Install the project (if package), and all dependencies defined in the lock or project file  <pre><code>poetry install\n</code></pre>  Install the project (if package), and all required dependencies, and remove unused dependencies (sync)  <pre><code>poetry install --sync\n</code></pre>  Install the project with dev dependencies  <pre><code>poetry install --with dev\n</code></pre>  Install the project (if package), and all dependencies, including optional dep group(s)  <pre><code>poetry install --with docs,tests\n</code></pre>  Install the project with verbose output for troubleshooting  <pre><code>poetry -vvv install\n</code></pre>"},{"location":"python/devtools/poetry/#continuous-integration","title":"Continuous integration","text":"<p>For configuring authentication, see the Authentication section</p> Action Code Details  Install poetry and restore package project  <pre><code>pip install poetry\npoetry install --with dev\n</code></pre>  Use poetry with lockfile-based caching  <pre><code>- uses: actions/cache@v3\n  with:\n    path: ~/.cache/pypoetry\n    key: ${{ hashFiles('poetry.lock') }}\n</code></pre>  Run flake8  <pre><code>poetry run flake8\n</code></pre>  Run pytest  <pre><code>poetry run pytest\n</code></pre>"},{"location":"python/devtools/poetry/#config","title":"Config","text":"Action Code Details  Use system Git client instead of Dulwich  <pre><code>poetry config experimental.system-git-client true\n</code></pre>  Use system Git client instead of Dulwich  <pre><code>export POETRY_EXPERIMENTAL_SYSTEM_GIT_CLIENT = true\n</code></pre>"},{"location":"python/devtools/poetry/#authentication","title":"Authentication","text":"<p>Authentication for private repository or package access</p>"},{"location":"python/devtools/poetry/#https","title":"HTTPS","text":"Action Code Details  Set access token for private GitHub package foo installed via HTTPS  <pre><code>poetry config repositories.foo https://github.com/my_private_org/foo.git\npoetry config http-basic.foo x-token-auth ${{ secrets.MY_TOKEN }}\n</code></pre> Doesn't always work (??)  Set access token for private GitHub package foo installed via HTTPS  <pre><code>export POETRY_REPOSITORIES_FOO_URL = https://github.com/my_private_org/foo.git\nexport POETRY_HTTP_BASIC_FOO_USERNAME = x-token-auth\nexport POETRY_HTTP_BASIC_FOO_PASSWORD = ${{ secrets.MY_TOKEN }}\n</code></pre>  Set access token for private GitHub package foo installed via HTTPS  <pre><code>git config --global url.\"https://x-token-auth:${{ secrets.MY_TOKEN }}@github.com/my_private_org/foo\".insteadOf \"https://github.com/my_private_org/foo\"\n</code></pre> Fallback option"},{"location":"python/devtools/poetry/#ssh","title":"SSH","text":"Action Code Details  Set access token for GitHub package installed via SSH (git@)  <pre><code>?\n</code></pre> A solution is suggested in https://stackoverflow.com/a/78074270/22638740, but no supporting documentation  Use HTTPS access token for private GitHub packages from my_private_org that were added via SSH  <pre><code>git config --global url.\"https://x-token-auth:${{ secrets.MY_TOKEN }}@github.com/my_private_org/\".insteadOf \"ssh://git@github.com/my_private_org/\"\n</code></pre>"},{"location":"python/devtools/pytest/","title":"Pytest","text":""},{"location":"python/devtools/pytest/#pytest","title":"Pytest","text":"<p>Testing framework</p>"},{"location":"python/devtools/pytest/#assertions","title":"Assertions","text":"Action Code Details  Assert warning  <pre><code>with pytest.warns(UserWarning):\n</code></pre>  Assert any error  <pre><code>with pytest.raises(Exception) as excinfo:\n</code></pre>  Assert specific exception e <pre><code>with pytest.raises(e) as excinfo:\n</code></pre>  Assert either exception e1 or e2 <pre><code>with pytest.raises((e1, e2)):\n</code></pre>"},{"location":"python/devtools/pytest/#test-control-flow","title":"Test control flow","text":""},{"location":"python/devtools/pytest/#skip-tests","title":"Skip tests","text":"Action Code Details  Skip test  <pre><code>@pytest.mark.skip(reason='no way to currently test this')\n</code></pre>  Conditional skip  <pre><code>@pytest.mark.skipif(cond, reason)\n</code></pre>  Skip for Python version below x.y <pre><code>@pytest.mark.skipif(sys.version_info &lt; (x, y))\n</code></pre>  Skip if on Windows  <pre><code>@pytest.mark.skipif(sys.platform == 'win32')\n</code></pre>  Skip if module is missing  <pre><code>@pytest.importorskip('pandas')\n</code></pre>  Skip rest of the test if module is missing  <pre><code>docutils = pytest.importorskip('docutils')\n</code></pre>"},{"location":"python/devtools/pytest/#test-expectations","title":"Test expectations","text":"<p>Alternative definitions of success</p> Action Code Details  Expect test to fail  <pre><code>@pytest.mark.xfail()\n</code></pre>  Expect test to fail with exception e <pre><code>@pytest.mark.xfail(raises=e)\n</code></pre>  Fail test if not completed within n seconds  <pre><code>@pytest.mark.timeout(n)\n</code></pre>  Fail test on Windows  <pre><code>@pytest.mark.xfail(sys.platform == 'win32')\n</code></pre>"},{"location":"python/devtools/pytest/#parameterized-tests","title":"Parameterized tests","text":"Action Code Details  Parameterize test for argument x with list of options  <pre><code>@pytest.mark.parametrize('x', [1, 2, 3])\n</code></pre>  Parameterize test for multiple arguments  <pre><code>@pytest.mark.parametrize('length', [1, 2, 3])\n@pytest.mark.parametrize('value', [0, 1])\n</code></pre>  Parameterize for combination of arguments  <pre><code>@pytest.mark.parametrize('length,value', [(1, 0), (2, 1), (3, 1)])\n</code></pre>  Parameterize using parameterized fixture  <pre><code>@pytest.mark.parametrize('large_dynamic_data_file',\n    ['big.csv', 'big2.csv'], indirect=True)\n</code></pre>"},{"location":"python/devtools/pytest/#fixtures","title":"Fixtures","text":"Action Code Details  Define fixture  <pre><code>@pytest.fixture\ndef first_entry():\n    return 'a'\n</code></pre>  Define fixture with module scope  <pre><code>@pytest.fixture(scope='module')\n</code></pre>  Define fixture with cleanup  <pre><code># fixture code\nyield 'a'\n# cleanup code\n</code></pre>  Define fixture for use in every test  <pre><code>@pytest.fixture(autouse=True)\n</code></pre>  Define parameterized fixture, resulting in multiple tests  <pre><code>@pytest.fixture(params=[1, 2, 3, 4, 5])\ndef number(request):\n    return request.param\n</code></pre> Function signature must match the example  Disable GC for every test, collect in-between  <pre><code>@pytest.fixture(autouse=True)\ndef cleanup():\n    gc.collect()\n    gc.disable()\n</code></pre>  Parameterize tests with a dynamic list of file paths  <pre><code>@fixture(params = glob.glob(r'data\\*.csv')\ndef file_paths(request)\n    return request.param\n</code></pre>  Parameterize tests with a dynamic list of file names  <pre><code>@fixture(params = fnmatch.filter(os.listdir('data'), '*.csv')\ndef file_names(request)\n    return request.param\n</code></pre>  Parameterized test using a parameterizable fixture  <pre><code>@pytest.fixture\ndef tester(request):\n    return MyTester(request.param)\n\n@pytest.mark.parametrize('tester', [['var1', 'var2']], indirect=True)\ndef test_tc1(self, tester):\n    tester.dothis()\n</code></pre>"},{"location":"python/filesystem/","title":"File system","text":""},{"location":"python/filesystem/#file-system","title":"File system","text":"<p>File system operations</p>"},{"location":"python/filesystem/#test","title":"Test","text":"Action Code Details  File/dir exists  <pre><code>os.path.exists(path)\n</code></pre>  Is file  <pre><code>os.path.isfile(path)\n</code></pre>  Is empty file  <pre><code>os.path.getsize(path) == 0\n</code></pre> Throws error if the file does not exist  Is directory  <pre><code>os.path.isdir(path)\n</code></pre>  Is empty directory  <pre><code>not os.listdir(path)\n</code></pre>"},{"location":"python/filesystem/#file-handling","title":"File handling","text":"Action Code Details  Open temporary file with clean-up  <pre><code>with tempfile.NamedTemporaryFile() as file:\n    path = file.name\n</code></pre>"},{"location":"python/filesystem/#file-info","title":"File info","text":"Action Code Details  Filename  <pre><code>os.path.basename(r'C:\\Files\\derp.csv')\n</code></pre> Returns 'derp.csv'  Filename without extension  <pre><code>os.path.splitext(os.path.basename(r'C:\\Files\\derp.csv'))[0]\n</code></pre> Returns 'derp'  File extension  <pre><code>os.path.splitext(r'C:\\Files\\derp.csv')[1]\n</code></pre> Returns '.csv'  Parent directory name  <pre><code>os.path.basename(os.path.dirname((r'C:\\Files\\derp.csv'))\n</code></pre> Returns 'Files'  File size  <pre><code>os.path.getsize(path)\n</code></pre>"},{"location":"python/filesystem/#directory-handling","title":"Directory handling","text":"Action Code Details  Create directory  <pre><code>os.mkdir(path)\n</code></pre> Error when directory already exists  Create directory if missing  <pre><code>Path(path).mkdir(exist_ok=True)\n</code></pre>  Create directories, recursively  <pre><code>os.makedirs(dest_dir)\n</code></pre>  Create directories recursively if missing  <pre><code>os.makedirs(dest_dir, exist_ok=True)\n</code></pre>  Rename a directory  <pre><code>?\n</code></pre>  Delete directory and underlying files  <pre><code>shutil.rmtree(path)\n</code></pre> Error if the path does not exist  Delete directory and underlying files, if needed  <pre><code>shutil.rmtree(path, ignore_error = True)\n</code></pre>"},{"location":"python/filesystem/#info","title":"Info","text":"Action Code Details  Number of children  <pre><code>?\n</code></pre>  Number of files  <pre><code>?\n</code></pre>  Number of child directories  <pre><code>?\n</code></pre>"},{"location":"python/filesystem/path/","title":"Path handling","text":""},{"location":"python/filesystem/path/#path-handling","title":"Path handling","text":"<p>File system path handling</p>"},{"location":"python/filesystem/path/#create","title":"Create","text":"<p>Create or generate path(s)</p> Action Code Details  Current working directory  <pre><code>os.getcwd()\n</code></pre> Can be set using <code>os.chdir()</code>  From directory and given file name  <pre><code>os.path.join(dir_path, filename)\n</code></pre>  Temporary file path  <pre><code>tempfile.mktemp()\n</code></pre>  Temporary file path in directory  <pre><code>tempfile.mktemp(dir=dir_path)\n</code></pre>  Temporary file path with extension (suffix)  <pre><code>tempfile.mktemp('.txt')\n</code></pre>  Temporary directory path  <pre><code>tempfile.mkdtemp()\n</code></pre>  Temporary directory path in directory  <pre><code>tempfile.mkdtemp(dir=dir_path)\n</code></pre>  Directory path obtained interactively from user via dialog  <pre><code>import tkinter\nfrom tkinter import filedialog\ntkinter.Tk().withdraw()\npath = tkinter.filedialog.askdirectory()\n</code></pre> <code>withdraw()</code> is needed to prevent an annoying empty window from opening  File path obtained interactively from user via dialog  <pre><code>import tkinter\nfrom tkinter import filedialog\ntkinter.Tk().withdraw()\npath = tkinter.filedialog.askopenfile()\n</code></pre> <code>withdraw()</code> is needed to prevent an annoying empty window from opening"},{"location":"python/filesystem/path/#test","title":"Test","text":"Action Code Details  File/dir exists  <pre><code>os.path.exists(path)\n</code></pre>  File path  <pre><code>os.path.isfile(path)\n</code></pre>  Directory path  <pre><code>os.path.isdir(path)\n</code></pre>  Absolute path  <pre><code>os.path.isabs(path)\n</code></pre>  Paths refer to same file  <pre><code>os.path.samefile(path1, path2)\n</code></pre>  Is parent of path  <pre><code>?\n</code></pre>  Is child of path  <pre><code>?\n</code></pre>"},{"location":"python/filesystem/path/#derive","title":"Derive","text":"<p>Manipulate a path</p> Action Code Details  Filename  <pre><code>os.path.basename(r'C:\\Files\\derp.csv')\n</code></pre> Returns derp.csv  Filename without extension  <pre><code>os.path.splitext(os.path.basename(r'C:\\Files\\derp.csv'))[0]\n</code></pre> Returns derp  File extension  <pre><code>os.path.splitext(r'C:\\Files\\derp.csv')[1]\n</code></pre> Returns .csv  Normalize path  <pre><code>os.path.normpath(path)\n</code></pre>  Absolute path  <pre><code>os.path.abspath(path)\n</code></pre> Paths are relative to the working directory  Canonical path (resolving symlinks)  <pre><code>os.path.realpath(path)\n</code></pre>  Parent path  <pre><code>os.path.dirname(r'C:\\Files\\derp.csv')\n</code></pre> Returns C:\\Files  Parent directory name  <pre><code>os.path.basename(os.path.dirname((r'C:\\Files\\derp.csv'))\n</code></pre> Returns Files  Get common parent path between two or more paths  <pre><code>os.path.commonpath(paths)\n</code></pre>  Relative path to directory  <pre><code>os.path.relpath(path, start=dir_path)\n</code></pre>  Join path with subdirectories and/or file  <pre><code>os.path.join(path, ..., dirN, file)\n</code></pre>  File path without extension  <pre><code>os.path.splitext(path)[0]\n</code></pre>"},{"location":"python/filesystem/path/#extract","title":"Extract","text":"<p>All snippets return a list of string paths</p> Action Code Details  File names  <pre><code>os.listdir(dir_path)\n</code></pre>  File names that match Unix filter  <pre><code>fnmatch.filter(os.listdir(dir_path), '*.csv')\n</code></pre>  File names that match regex pattern  <pre><code>[f for f in os.listdir(dir_path) if re.match('\\.csv$', f)]\n</code></pre>  File paths  <pre><code>[os.path.join(dir_path, f) for f in os.listdir(dir_path)]\n</code></pre>  File paths that match Unix filter  <pre><code>glob.glob(os.path.join(path, '*.csv'))\n</code></pre>  File paths that match Unix filter, including nested entries (recursive)  <pre><code>glob.glob(os.path.join(path, '**\\*.csv'), recursive = True)\n</code></pre> The **\\ is required for recursive search to do anything.  File paths that match regex pattern  <pre><code>[os.path.join(dir_path, f)\n    for f in os.listdir(dir_path) if re.match(r'.+\\.csv$', f)]\n</code></pre>  Split path into parent path and basename  <pre><code>parent_path, base_name = os.path.split(path)\n</code></pre>  Split path into file path and extension  <pre><code>file_path, ext = os.path.splitext(path)\n</code></pre>"},{"location":"python/numpy/","title":"Numpy package","text":""},{"location":"python/numpy/#numpy-package","title":"Numpy package","text":""},{"location":"python/numpy/matrix/","title":"Matrices","text":""},{"location":"python/numpy/matrix/#matrices","title":"Matrices","text":"<p>2D-array operations</p>"},{"location":"python/numpy/matrix/#create","title":"Create","text":"Action Code Details  Undefined (size n x m)  <pre><code>np.empty((n, m))\n</code></pre> Warning: don't use the initial values!  Zeros (size n x m)  <pre><code>np.zeros((n, m))\n</code></pre>  Ones (size n x m)  <pre><code>np.ones((n, m))\n</code></pre>  True values (size n x m)  <pre><code>np.full((n, m), fill_value=True)\n</code></pre>  False values (size n x m)  <pre><code>np.full((n, m), fill_value=False)\n</code></pre>  Fill with value v (size n x m)  <pre><code>np.full((n, m), fill_value=v)\n</code></pre>  Identity matrix of size n x m <pre><code>np.eye(n, m)\n</code></pre>  Diagonal matrix from vector  <pre><code>np.diag(v)\n</code></pre>  From vectors as rows  <pre><code>np.row_stack((v1, v2))\n</code></pre>  From vectors as rows  <pre><code>np.vstack((v1, v2))\n</code></pre>  From vectors as rows  <pre><code>np.array([v1, v2])\n</code></pre>  From vectors as columns  <pre><code>np.column_stack((v1, v2))\n</code></pre>  From vectors as columns  <pre><code>np.stack((v1, v2), axis=1)\n</code></pre>  From vectors as columns  <pre><code>np.vstack((v1, v2)).transpose()\n</code></pre>"},{"location":"python/numpy/matrix/#extract","title":"Extract","text":"Action Code Details  Number of elements  <pre><code>m.size\n</code></pre>  Hash  <pre><code>hash(m.data.tobytes())\n</code></pre>  Element at row i, column j <pre><code>m[i,j]\n</code></pre>"},{"location":"python/numpy/matrix/#update","title":"Update","text":"<p>All operations are in-place</p> Action Code Details  Update element at row i, column j <pre><code>m[i,j] = v\n</code></pre>  Fill with scalar value  <pre><code>m.fill(v)\n</code></pre>  Fill with array values  <pre><code>m[...] = np.array(3)\n</code></pre>  Fill row i with scalar value  <pre><code>m[i] = v\n</code></pre>  Fill column j with scalar value  <pre><code>m[:,j] = v\n</code></pre>"},{"location":"python/numpy/matrix/#reshape","title":"Reshape","text":"Action Code Details  Transpose  <pre><code>m.transpose()\n</code></pre>  Resize to shape, fill with zeros  <pre><code>m.resize(m, d)\n</code></pre>"},{"location":"python/numpy/matrix/#derive","title":"Derive","text":"<p>All operations create a new instance</p>"},{"location":"python/numpy/matrix/#map","title":"Map","text":"<p>Operations are element-wise and preserve the shape of the matrix.</p> Action Code Details  Increment all elements with scalar value  <pre><code>m + v\n</code></pre>  Increment elements by the respective element of another matrix  <pre><code>m + m2\n</code></pre> Must have same shape  Find min between two matrices  <pre><code>np.fmin(m, m2)\n</code></pre>  Find max between two matrices  <pre><code>np.fmax(m, m2)\n</code></pre>  Clip (truncate) between [a, b]  <pre><code>np.clip(m, a_min=a, a_max=b)\n</code></pre> a_min &lt; a_max is not checked"},{"location":"python/numpy/matrix/#order","title":"Order","text":"<p>Operations preserve the shape of the matrix.</p> Action Code Details  Reverse elements  <pre><code>np.flip(m)\n</code></pre> Flattened view in reverse order  Sort elements descending  <pre><code>np.sort(m)\n</code></pre> NaNs are last  Sort elements by column descending  <pre><code>np.sort(m, axis=0)\n</code></pre>  Sort elements per row descending  <pre><code>np.sort(m, axis=1)\n</code></pre>  Reverse column order  <pre><code>np.fliplr(m)\n</code></pre>  Reverse row order  <pre><code>np.flipud(m)\n</code></pre>"},{"location":"python/numpy/matrix/#operations-that-increase-the-size-of-the-matrix","title":"Operations that increase the size of the matrix","text":"Action Code Details  Pad with sclar value  <pre><code>np.pad(m, pad_width=1, constant_values=v)\n</code></pre>  Pad with edge element  <pre><code>np.pad(m, pad_width=1, mode='edge')\n</code></pre>"},{"location":"python/numpy/matrix/#shrink","title":"Shrink","text":"<p>Operations that reduce the shape of the matrix</p> Action Code Details  Diagonal vector  <pre><code>np.diag(m)\n</code></pre>"},{"location":"python/numpy/matrix/#aggregate","title":"Aggregate","text":"<p>Summarize along an axis. Set <code>axis=1</code> for per-row operation.</p> Action Code Details  Min per column  <pre><code>np.min(m, axis=0)\n</code></pre> Use nanmin() to ignore NaNs  Max per column  <pre><code>np.max(m, axis=0)\n</code></pre> Use nanmax() to ignore NaNs  Max - min, per column  <pre><code>np.ptp(m, axis=0)\n</code></pre>  Sum per column  <pre><code>np.sum(m, axis=0)\n</code></pre> Use nansum() to ignore NaNs  Mean per column  <pre><code>np.mean(m, axis=0)\n</code></pre> Use nanmean() to ignore NaNs  Median per column  <pre><code>np.median(m, axis=0)\n</code></pre> Use nanmedian() to ignore NaNs"},{"location":"python/numpy/matrix/#reshape_1","title":"Reshape","text":"Action Code Details  Transpose  <pre><code>m.T\n</code></pre>  Transpose  <pre><code>m.transpose()\n</code></pre>  Rotate  <pre><code>np.rot90(m)\n</code></pre>  Reshape to specified dimensions  <pre><code>m.reshape(d)\n</code></pre>"},{"location":"python/numpy/matrix/#convert","title":"Convert","text":"Action Code Details  1D array (concat rows)  <pre><code>m.flatten()\n</code></pre>  1D array (concat columns)  <pre><code>m.T.flatten()\n</code></pre> More intuitive than specifying mode  1D array (concat columns)  <pre><code>m.flatten(mode='F')\n</code></pre>  List of rows  <pre><code>m.tolist()\n</code></pre>"},{"location":"python/numpy/ndarray/","title":"ND-arrays","text":""},{"location":"python/numpy/ndarray/#nd-arrays","title":"ND-arrays","text":"<p>ND-array operations</p>"},{"location":"python/numpy/ndarray/#create","title":"Create","text":"Action Code Details  Ensure at least 1D array (vector)  <pre><code>np.atleast_1d(x)\n</code></pre>  Ensure at least 2D array (matrix)  <pre><code>np.atleast_2d(x)\n</code></pre>  Ensure at least 3D array  <pre><code>np.atleast_3d(x)\n</code></pre>  Create 2D array from a list of vectors as columns  <pre><code>np.column_stack([v1, v2])\n</code></pre>"},{"location":"python/numpy/ndarray/#extract","title":"Extract","text":"Action Code Details  Number of elements  <pre><code>x.size\n</code></pre>  Number of dimensions  <pre><code>x.ndim\n</code></pre>  Dimension sizes  <pre><code>x.shape\n</code></pre>  Size of the first dimension  <pre><code>len(x)\n</code></pre>  Hash  <pre><code>hash(x.data.tobytes())\n</code></pre>"},{"location":"python/numpy/ndarray/#derive","title":"Derive","text":""},{"location":"python/numpy/ndarray/#shrink","title":"Shrink","text":"Action Code Details  Drop singular dimensions  <pre><code>a.squeeze()\n</code></pre>  Drop singular dimensions  <pre><code>np.squeeze(a)\n</code></pre>"},{"location":"python/numpy/ndarray/#reshape","title":"Reshape","text":"Action Code Details  Reshape to dimensions d <pre><code>x.reshape(d)\n</code></pre>"},{"location":"python/numpy/ndarray/#convert","title":"Convert","text":"Action Code Details  Bytes  <pre><code>x.tobytes()\n</code></pre> Not sure what difference with <code>data.tobytes()</code> is  Hash  <pre><code>hash(x.data.tobytes())\n</code></pre>"},{"location":"python/numpy/scalar/","title":"Scalars","text":""},{"location":"python/numpy/scalar/#scalars","title":"Scalars","text":"<p>0D-array operations</p>"},{"location":"python/numpy/scalar/#create","title":"Create","text":"Action Code Details  Boolean scalar  <pre><code>np.array(True)\n</code></pre>  Floating point scalar  <pre><code>np.array(0)\n</code></pre>  Int scalar  <pre><code>np.array(0, dtype=np.int64)\n</code></pre>"},{"location":"python/numpy/scalar/#test","title":"Test","text":"Action Code Details  Is scalar  <pre><code>x.ndim == 0\n</code></pre>  Is NaN  <pre><code>np.isnan(x)\n</code></pre>  Is infinite  <pre><code>np.isinf(x)\n</code></pre>  Is finite  <pre><code>np.isfinite(x)\n</code></pre>"},{"location":"python/numpy/scalar/#derive","title":"Derive","text":"Action Code Details  Log transform  <pre><code>np.log(x)\n</code></pre>  Log-10 transform  <pre><code>np.log10(x)\n</code></pre>"},{"location":"python/numpy/vector/","title":"Vectors","text":""},{"location":"python/numpy/vector/#vectors","title":"Vectors","text":"<p>1D-array operations</p>"},{"location":"python/numpy/vector/#create","title":"Create","text":"Action Code Details  Undefined, length n <pre><code>np.empty(n)\n</code></pre> Warning: don't use the initial values  Float zeros, length n <pre><code>np.zeros(n)\n</code></pre>  Int zeros, length n <pre><code>np.zeros(n, dtype=np.int64)\n</code></pre>  Ones, length n <pre><code>np.ones(n)\n</code></pre>  True values, length n <pre><code>np.full(n, fill_value=True)\n</code></pre>  False values, length n <pre><code>np.full(n, fill_value=False)\n</code></pre>  Fill with value v <pre><code>np.full(n, fill_value=v)\n</code></pre>  Increasing numbers [0, b-1]  <pre><code>np.arrange(b)\n</code></pre>  Increasing numbers [a, b]  <pre><code>np.arrange(a, b)\n</code></pre>  Numbers from a to b with step size s <pre><code>np.arrange(a, b, s)\n</code></pre>  Linear range from a to b of length n <pre><code>np.linspace(a, b, num=n)\n</code></pre>  From tuple  <pre><code>np.array(tuple)\n</code></pre>  From list  <pre><code>np.array(list)\n</code></pre>  From iter  <pre><code>np.fromiter(iter)\n</code></pre>  From iter (max length n)  <pre><code>np.fromiter(iter, count=n)\n</code></pre>  From two vectors  <pre><code>np.append(v1, v2)\n</code></pre>  From two vectors  <pre><code>np.concatenate((v1, v2))\n</code></pre>"},{"location":"python/numpy/vector/#test","title":"Test","text":"Action Code Details  Numpy array is vector  <pre><code>v.ndim == 1\n</code></pre>  Vectors are equal  <pre><code>np.array_equal(v, v2)\n</code></pre>  All numerical elements are equal  <pre><code>np.ptp(v) == 0\n</code></pre>  Logical type  <pre><code>v.dtype == np.bool_\n</code></pre>  Float type  <pre><code>v.dtype == np.float_\n</code></pre>  Integer type  <pre><code>v.dtype == np.int_\n</code></pre>  Contains nan  <pre><code>np.isnan(v).any()\n</code></pre>  Contains inf  <pre><code>np.isinf(v).any()\n</code></pre>  Contains value  <pre><code>value in v\n</code></pre>  Does not contain value  <pre><code>value not in v\n</code></pre>  All finite  <pre><code>np.isfinite(v).all()\n</code></pre>  All elements are equal to value  <pre><code>np.all(v == value)\n</code></pre>  All elements are equal to value  <pre><code>(v == value).all()\n</code></pre>  All numerical elements are close to value  <pre><code>np.all(np.isclose(v, value))\n</code></pre>"},{"location":"python/numpy/vector/#extract","title":"Extract","text":"Action Code Details  Number of elements  <pre><code>len(v)\n</code></pre>  Hash  <pre><code>hash(v.data.tobytes())\n</code></pre>  Unique values  <pre><code>numpy.unique(v)\n</code></pre>  Unique values  <pre><code>set(v)\n</code></pre>  Number of unique values  <pre><code>len(numpy.unique(v))\n</code></pre>  Count per unique value  <pre><code>np.unique(v, return_counts=True)\n</code></pre>  Count non-zero values  <pre><code>np.count_nonzero(v)\n</code></pre>  Count per positive integer from [0, max(v)]  <pre><code>np.bincount(v)\n</code></pre> Elements must be nonnegative ints  Index of first max element  <pre><code>np.argmax(v)\n</code></pre> Returns index of NaN if present!  Index of first min element  <pre><code>np.argmin(v)\n</code></pre> Returns index of NaN if present!"},{"location":"python/numpy/vector/#aggregate","title":"Aggregate","text":"<p>See the API docs for a complete list</p>"},{"location":"python/numpy/vector/#update","title":"Update","text":"<p>All operations are in-place</p>"},{"location":"python/numpy/vector/#transform","title":"Transform","text":"Action Code Details  Set first element  <pre><code>v[0] = value\n</code></pre>  Set last element  <pre><code>v[-1] = value\n</code></pre>  Set value of the _i_th element  <pre><code>v[i] = value\n</code></pre>  Fill with constant value  <pre><code>v[:] = value\n</code></pre>  Fill first n values  <pre><code>v[:n] = value\n</code></pre>"},{"location":"python/numpy/vector/#order","title":"Order","text":"Action Code Details  Sort elements ascending  <pre><code>v.sort()\n</code></pre> NaNs are put last  Sort elements descending  <pre><code>v[::-1].sort()\n</code></pre> Note that this puts NaNs first!"},{"location":"python/numpy/vector/#derive","title":"Derive","text":""},{"location":"python/numpy/vector/#map","title":"Map","text":"Action Code Details  Clip (truncate) between [a, b ]  <pre><code>np.clip(v, a_min=a, a_max=b)\n</code></pre>  Bin index  <pre><code>np.digitize(v, bins)\n</code></pre>  Piecewise-linear interpolation of coordinate mapping xp -&gt; yp  <pre><code>np.interp(v, xp, yp)\n</code></pre> No option for extrapolation!  Piecewise-linear interpolation with extrapolation  <pre><code>f = scipy.interpolate.interp1d(xp, yp, fill_value = 'extrapolate')\nf(v)\n</code></pre> Deprecated without replacement, lol  Ascending order (indices) of elements  <pre><code>np.argsort(v)\n</code></pre>  Descending order (indices) of elements  <pre><code>np.argsort(-v)\n</code></pre>"},{"location":"python/numpy/vector/#reorder-elements","title":"Reorder elements","text":"Action Code Details  Reverse elements  <pre><code>v[::-1]\n</code></pre>  Reverse elements  <pre><code>np.flip(v)\n</code></pre>  Shift elements forwards, with roll-over  <pre><code>np.roll(v, 1)\n</code></pre>  Shift elements backwards, with roll-over  <pre><code>np.roll(v, -1)\n</code></pre>  Sort ascending  <pre><code>np.sort(v)\n</code></pre> NaNs are last  Sort descending  <pre><code>v[np.argsort(-v)]\n</code></pre> NaNs are last"},{"location":"python/numpy/vector/#shrink","title":"Shrink","text":"Action Code Details  Pairwise difference to next element  <pre><code>np.diff(v)\n</code></pre> n-1 elements  Pairwise difference between elements with given lag  <pre><code>np.diff(v, n=lag)\n</code></pre>"},{"location":"python/numpy/vector/#grow","title":"Grow","text":"Action Code Details  Pad with value  <pre><code>np.pad(v, pad_width=1, constant_values=v)\n</code></pre>  Pad with outer elements  <pre><code>np.pad(v, pad_width=1, mode='edge')\n</code></pre>  Replicate n times  <pre><code>np.repeat(v, n)\n</code></pre>  Append vector  <pre><code>np.append(v1, v2)\n</code></pre>  Append vectors  <pre><code>np.concatenate((v1, v2, v3))\n</code></pre>"},{"location":"python/numpy/vector/#convert","title":"Convert","text":"Action Code Details  Bytes  <pre><code>v.tobytes()\n</code></pre>  Tuple  <pre><code>tuple(v)\n</code></pre>  List  <pre><code>v.tolist()\n</code></pre>  Set  <pre><code>set(v)\n</code></pre>"},{"location":"python/output/","title":"Output","text":""},{"location":"python/output/#output","title":"Output","text":"<p>Functionality for printing, logging or generating other program output</p>"},{"location":"python/output/#usage","title":"Usage","text":"Action Code Details  Print string  <pre><code>print('hello world')\n</code></pre>  Print string without newline  <pre><code>print('hello world', end='')\n</code></pre>  Print multiple strings, separated by space  <pre><code>print('hello', 'world')\n</code></pre>  Print multiplate strings, separated by comma  <pre><code>print('a', 'b', 'c', sep=',')\n</code></pre>  Print string-representation of object  <pre><code>print(x)\n</code></pre>"},{"location":"python/output/logging/","title":"Logging","text":""},{"location":"python/output/logging/#logging","title":"Logging","text":"<p>Functionality for event logging.</p> <p>Code <pre><code>import logging\n</code></pre></p>"},{"location":"python/output/logging/#create","title":"Create","text":"Action Code Details  Root logger  <pre><code>logging.root\n</code></pre>  Module-level logger  <pre><code>logger = logging.getLogger(__name__)\n</code></pre>"},{"location":"python/output/logging/#update","title":"Update","text":""},{"location":"python/output/logging/#update-root-logger","title":"Update root logger","text":"<p>The root API is inconsistent with the logger API</p> Action Code Details  Set root logging level to lvl <pre><code>logging.basicConfig(level=lvl)\n</code></pre>  Set root logging level to critical or fatal  <pre><code>logging.basicConfig(level='CRITICAL')\n</code></pre>  Set root logging level to error  <pre><code>logging.basicConfig(level='ERROR')\n</code></pre>  Set root logging level to warning  <pre><code>logging.basicConfig(level='WARNING')\n</code></pre>  Set root logging level to info  <pre><code>logging.basicConfig(level='INFO')\n</code></pre>  Set root logging level to debug  <pre><code>logging.basicConfig(level='DEBUG')\n</code></pre>  Disable root logger  <pre><code>logging.root.disable = True\n</code></pre>  Re-enable root logger  <pre><code>logging.root.disable = False\n</code></pre>  Capture warnings outputted via the <code>warnings</code> module  <pre><code>logging.captureWarnings(True)\n</code></pre> For example, <code>warnings.warn('uh oh')</code>  Set message format to show full datetime  <pre><code>logging.basicConfig(format='%(asctime)s %(message)s')\n</code></pre>"},{"location":"python/output/logging/#specific-logger","title":"Specific logger","text":"<p>Update specific logger stored in variable <code>logger</code></p> Action Code Details  Set logging level to lvl <pre><code>logger.setLevel(lvl)\n</code></pre> See levels here  Set logging level to critical or fatal  <pre><code>logger.setLevel('CRITICAL')\n</code></pre>  Set logging level to error  <pre><code>logger.setLevel('ERROR')\n</code></pre>  Set logging level to warning  <pre><code>logger.setLevel('WARNING')\n</code></pre>  Set logging level to info  <pre><code>logger.setLevel('INFO')\n</code></pre>  Set logging level to debug  <pre><code>logger.setLevel('DEBUG')\n</code></pre>  Disable logger  <pre><code>logger.disable = True\n</code></pre>  Re-enable logger  <pre><code>logger.disable = False\n</code></pre>"},{"location":"python/output/logging/#usage","title":"Usage","text":"<p>For logging to a specific logger, call the respective function on the logger instead of <code>logging</code>.</p> Action Code Details  Log error  <pre><code>logging.error('my error msg')\n</code></pre>  Log error with exception stack trace  <pre><code>logging.exception('my error msg')\n</code></pre> For use in exception handling  Log unavoidable warning  <pre><code>logging.warning('my warning msg')\n</code></pre>  Log avoidable warning  <pre><code>import warnings\nwarnings.warn('my warning msg')\n</code></pre> Make sure that <code>logging.captureWarnings(True)</code>  Log info  <pre><code>logging.info('my info msg')\n</code></pre>  Log debug message  <pre><code>logging.debug('my debug msg')\n</code></pre>"},{"location":"python/package/","title":"Package","text":"","tags":["pkg","library","module"]},{"location":"python/package/#package","title":"Package","text":"<p>Functions for importing packages or accessing information about packages.</p>","tags":["pkg","library","module"]},{"location":"python/package/#test","title":"Test","text":"Action Code Details  Check if package or top-level module Name exists  <pre><code>import importlib.util\nimportlib.util.find_spec(\"Name\") is not None\n</code></pre> Can be used to check for submodules, but this loads the parent import!  Check if package or module Pkg is loaded  <pre><code>'Pkg' in sys.modules\n</code></pre>","tags":["pkg","library","module"]},{"location":"python/package/#extract","title":"Extract","text":"Action Code Details  Get file path from package  <pre><code>from importlib import resources\npath = str(resources.files('actionsheets.data').joinpath('python.toml'))\n</code></pre>  Get file paths from package according to pattern, recursively  <pre><code>from importlib import resources\nfrom importlib.resources.abc import Traversable\n\ndef gather_files(entries: Iterator[Traversable]) -&gt; list[str]:\n    files_list = []\n    for entry in entries:\n        if entry.is_dir():\n            files_list += gather_files(entry.iterdir())\n        elif entry.name.endswith('.csv'):\n            files_list += [entry]\n    return files_list\n\ndata_root = resources.files('actionsheets.data')\npaths = gather_files(data_root.iterdir())\n</code></pre> Code could be simplified","tags":["pkg","library","module"]},{"location":"python/package/#package-meta-data","title":"Package meta data","text":"Action Code Details  Version of a given package  <pre><code>from importlib.metadata import version\nversion('actionsheets')\n</code></pre>  All package metadata, as dict  <pre><code>from importlib.metadata import metadata\ndict(metadata('actionsheets'))\n</code></pre> Conceals duplicate metadata entries","tags":["pkg","library","module"]},{"location":"python/package/#import","title":"Import","text":"Action Code Details  Import package or top-level module  <pre><code>import actionsheets\n</code></pre>  Try import package or top-level module  <pre><code>try:\n    import actionsheetsss\nexcept ImportError as e\n    print(e)\n</code></pre>  Try import package or top-level module, store result in indicator variable  <pre><code>try:\n    import actionsheets\n    assert actionsheets\n    _no_actionsheets = False\nexcept ImportError:\n    _no_actionsheets = True\n</code></pre>  Try to import submodule, catch error if not found  <pre><code>try:\n    import actionsheets.paper\nexcept ModuleNotFoundError as e:\n    print(e)\n</code></pre>","tags":["pkg","library","module"]},{"location":"python/pandas/","title":"Pandas package","text":""},{"location":"python/pandas/#pandas-package","title":"Pandas package","text":"<p>Opinionated: <code>pandas.DataFrame</code> seems to be the MS Excel of the Python data processing universe: Slow, write-once, inconsistent API, and many ways to achieve the same thing (the true pythonic way), but very handy for quick &amp; dirty data manipulation and popular for that reason.</p> <p>Words of caution:</p> <ul> <li>Needlessly high learning curve.</li> <li>Inconsistent API, functions do many different things, and many functions to do the same thing (very pythonic).</li> <li>Counterintuitive defaults (too many examples in 2 days of usage to even bother listing here).</li> <li>DataFrame, Series and Groupby outputs have mismatched APIs. Enjoy memorizing 3 interfaces and the subtle differences between them.</li> <li>The whole notion of (multi) indexes just complicates things with no benefit at all. Worse, indexes are impossible to ignore, as pandas will block certain operations if indexes don't match (which it caused itself).</li> <li>Unreadable / messy code</li> <li>Just look at any non-trivial example in practice.</li> <li>The inconsistent/complicated APIs encourage bad habits, resulting in even less readable code.</li> <li>Slow: the least of pandas' problems, but just another reason to not even bother</li> </ul> <p>Data manipulation doesn't need to be so tedious (see R dplyr, R data.table, polars).</p> <p>To conclude: The only good reason to use pandas is because your friends/colleagues are already using it.</p>"},{"location":"python/pandas/dataframe/","title":"Pandas DataFrame","text":""},{"location":"python/pandas/dataframe/#pandas-dataframe","title":"Pandas DataFrame","text":"<p>Opinionated words of caution:</p> <ul> <li>Data frames force a frustrating distinction between the \"data\" and index columns, despite this being completely meaningless in typical exploratory data analysis applications where what constitutes an index is highly context-dependent. Also, pandas is very slow regardless, so all effort on making effective use of index columns is a waste of time.</li> <li>Don't bother with index columns unless you want to polute your code with many <code>reset_index()</code> calls, or risk surprising results.</li> <li>On the other hand, you cannot ignore index columns, as you'll run into vague index errors whether you want it or not (e.g., assigning groupby results, shuffling rows).</li> <li>MultiIndex versus multiple indices. Just don't. If you cared about speed you would not be using pandas anyway.</li> <li>Many conflicting dtypes, inconsistencies in API functions for handling them, and ad-hoc mixing with numpy functions.</li> <li>Complex queries will be a series of data variable updates, which is hard to read, and guaranteed to lead to bugs at a later stage during refactoring.</li> <li>Inconsistent APIs between data frames, columns, groupby output, and index columns.</li> <li>Because of all the complexities above, writing good and clean pandas code is very hard, as is evident by the large volume of unreadable/anti-pattern-riddled pandas code online (e.g., stackoverflow).</li> </ul> <p>Code <pre><code>import pandas as pd\n</code></pre></p>"},{"location":"python/pandas/dataframe/#create","title":"Create","text":"Action Code Details  Empty  <pre><code>?\n</code></pre>  Single column from list  <pre><code>pd.DataFrame([1, 2, 3])\n</code></pre>  From column lists  <pre><code>pd.DataFrame({'A': [1, 2], 'fruits': ['banana', 'apple']})\n</code></pre>  From dictionary with column list entries  <pre><code>dict = {'Name': ['John', 'Sue'], 'Age': [40, 35]}\npd.DataFrame(dict)\n</code></pre>  From Numpy 2D array  <pre><code>import numpy as np\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\npd.DataFrame(arr, columns = ['a', 'b', 'c'])\n</code></pre>  From JSON string  <pre><code>import json\njson_dict = json.loads(json_string)\npd.DataFrame(json_dict)\n</code></pre>  From JSON file  <pre><code>pd.read_json(path)\n</code></pre>"},{"location":"python/pandas/dataframe/#test","title":"Test","text":"Action Code Details  Is data frame or subclass  <pre><code>isinstance(data, pd.DataFrame)\n</code></pre>  Is data frame and not subclass  <pre><code>type(data) is pd.DataFrame\n</code></pre>  Is empty  <pre><code>data.empty\n</code></pre>  Does column col contain NA value(s)  <pre><code>data[col].isna().values.any()\n</code></pre>"},{"location":"python/pandas/dataframe/#test-for-presence-of-columns","title":"Test for presence of columns","text":"Action Code Details  Has column col <pre><code>col in data\n</code></pre>  Has columns cols <pre><code>data.columns.isin(cols).all()\n</code></pre>  Has columns cols <pre><code>set(cols).issubset(data)\n</code></pre>  Only contains columns cols <pre><code>set(data) == set(cols)\n</code></pre>  Has any of these columns cols <pre><code>data.columns.isin(cols).any()\n</code></pre>  Has any of these columns cols <pre><code>set(data).issuperset(cols)\n</code></pre>  Does not have these columns cols <pre><code>set(cols).isdisjoint(data)\n</code></pre>"},{"location":"python/pandas/dataframe/#tests-for-column-types","title":"Tests for column types","text":"Action Code Details  Is column col boolean type  <pre><code>pd.api.types.is_bool_dtype(data[col])\n</code></pre>  Is column col categorical type  <pre><code>isinstance(data[col], pd.CategoricalDtype)\n</code></pre>  Is column col string type  <pre><code>pd.api.types.is_string_dtype(data[col])\n</code></pre>  Is column col numeric type  <pre><code>pd.api.types.is_numeric_dtype(data[col])\n</code></pre>  Is column col integer type  <pre><code>pd.api.types.is_integer_dtype(data[col])\n</code></pre>  Is column col datetime type  <pre><code>pd.api.types.is_datetime64_dtype(data[col])\n</code></pre>  Is column col datetime(nanosecond) type  <pre><code>data.dtypes[col] == numpy.dtype('datetime64[ns]'))\n</code></pre>"},{"location":"python/pandas/dataframe/#tests-for-values","title":"Tests for values","text":"Action Code Details  Contains NA  <pre><code>data.isna().any().any()\n</code></pre>  Contains no NA  <pre><code>data.notna().all().all()\n</code></pre>  Does column col contain any NA values  <pre><code>data[col].hasnan\n</code></pre>  Does column col not contain NA values  <pre><code>~data[col].hasnan\n</code></pre>  Do none of the columns cols contain NA values  <pre><code>data[['col1', 'col2']].notnull().all().all()\n</code></pre>  Contains any infinity  <pre><code>import numpy as np\ndata.isin([np.inf, -np.inf]).values.any()\n</code></pre>  Does column col contain any infinite values  <pre><code>import numpy as np\ndata['col'].isin([np.inf, -np.inf]).any()\n</code></pre>  Does column col contain any infinite values  <pre><code>import numpy as np\nnp.isinf(data['col']).any()\n</code></pre>"},{"location":"python/pandas/dataframe/#tests-for-duplicates","title":"Tests for duplicates","text":"Action Code Details  No duplicated rows (all unique)  <pre><code>~data.duplicated().any()\n</code></pre>  Some rows are duplicated  <pre><code>data.duplicated().any()\n</code></pre>  Some groups in column groupCol have duplicate elements in column valueCol <pre><code>data.duplicated(subset=['groupCol', 'valueCol']).any()\n</code></pre>  No groups in column groupCol have duplicated values for column valueCol <pre><code>~data.duplicated(subset=['groupCol', 'valueCol']).any()\n</code></pre>  No columns are duplicated by values  <pre><code>?\n</code></pre>  Some columns are duplicate by values  <pre><code>?\n</code></pre>"},{"location":"python/pandas/dataframe/#assertions","title":"Assertions","text":"Action Code Details  Assert frames are equal  <pre><code>pd.testing.assert_frame_equal(x, y)\n</code></pre>  Assert frames are equal, ignoring column order and row order  <pre><code>pd.testing.assert_frame_equal(x, y, check_like=True)\n</code></pre>"},{"location":"python/pandas/dataframe/#extract","title":"Extract","text":"<p>Snippets which return non-DataFrame output (e.g., scalar, series)</p> Action Code Details  Number of rows  <pre><code>len(data)\n</code></pre>  Number of rows  <pre><code>data.shape[0]\n</code></pre>  Extract row count by group group <pre><code>data.groupby('group').size().reset_index(name='count')\n</code></pre> Returns a data frame with group columns and a respective count column  Row names  <pre><code>data.index\n</code></pre>  Get column named name (as series)  <pre><code>data['name']\n</code></pre>  Column names  <pre><code>list(data)\n</code></pre>  Number of columns  <pre><code>len(data.columns)\n</code></pre>  Number of columns  <pre><code>data.shape[1]\n</code></pre>  Number of cells  <pre><code>data.size\n</code></pre>  Dimensions (as tuple)  <pre><code>data.shape\n</code></pre>"},{"location":"python/pandas/dataframe/#extract-row-masks","title":"Extract row masks","text":"Action Code Details  Mask for missing values (None, NA, NaN)  <pre><code>data.isna()\n</code></pre>  Mask for non-missing values  <pre><code>data.notna()\n</code></pre> Same result for <code>data.notnull()</code>?  Mask for duplicate rows  <pre><code>data.duplicated()\n</code></pre>  Mask for duplicates across columns in list cols <pre><code>data.duplicated(subset=cols)\n</code></pre>"},{"location":"python/pandas/dataframe/#query","title":"Query","text":"Action Code Details  Cell at row i, col j <pre><code>data.at[i, j]\n</code></pre>  First row (Series)  <pre><code>data.iloc[0]\n</code></pre>  Row by row number i <pre><code>data.iloc[i]\n</code></pre>  Row by index i <pre><code>data.loc[i]\n</code></pre>  String query  <pre><code>data.query(...)\n</code></pre>"},{"location":"python/pandas/dataframe/#update","title":"Update","text":"<p>All operations are in-place. Transformed columns can be assigned to new frames, but this operation is generally unsafe as it depends on the index columns matching.</p> Action Code Details  Set cell at row i, col j to value v <pre><code>data.at[i, j] = v\n</code></pre>  Replace missing values for v <pre><code>data.fillna(v)\n</code></pre>  Replace specific values  <pre><code>data.replace(?)\n</code></pre>"},{"location":"python/pandas/dataframe/#transform","title":"Transform","text":""},{"location":"python/pandas/dataframe/#transform-a-single-column","title":"Transform a single column","text":"Action Code Details  Rename column  <pre><code>data.rename(columns={'old': 'new'}, inplace=True)\n</code></pre>  Set datetime column date to standard unit (ns)  <pre><code>data['date'] = data['date'].apply(pd.to_datetime)\n</code></pre> Needed, for example, to avoid data corruption when saving to HDF5 store  Sample a column col per grouping in group (ignore index)  <pre><code>data[col] = data.groupby(group)[col].transform(\n    lambda x: x.sample(frac=1).to_list()\n)\n</code></pre> <code>to_list()</code> is essential here to force pandas to ignore the index columns, otherwise there is no effect from sampling...  Apply function to a list column myCol (as flattened series)  <pre><code>flat_data = data.explode('myCol')\nflat_data.index.name = '_index'\ndata['myCol'] = flat_data['myCol'].groupby('_index').agg(lambda x: x)\n</code></pre> Warning: empty lists are converted to NaN (??) Setting the index name is required because pandas cannot group by nameless index..."},{"location":"python/pandas/dataframe/#transform-multiple-columns","title":"Transform multiple columns","text":"Action Code Details  Rename columns  <pre><code>data.rename(columns={'old1': 'new1', 'old2': 'new2'}, inplace=True)\n</code></pre>  Rename columns based on a list of old names and list of new names  <pre><code>data.rename(columns=dict(zip(oldNames, newNames)), inplace=True)\n</code></pre>  All columns to lowercase  <pre><code>data.rename(str.lower, axis='columns', inplace=True)\n</code></pre>"},{"location":"python/pandas/dataframe/#grow","title":"Grow","text":"Action Code Details  Append series as column col <pre><code>data['col'] = s\n</code></pre> Overwrites existing column  Append undefined categorical column col <pre><code>data['col'] = pd.Categorical([None] * len(data), categories=['a', 'b', 'c'])\n</code></pre>  Add string column col based on concatenation of two string columns x and y, with separator sep <pre><code>data['col'] = data['x'] + 'sep' + data['y']\n</code></pre>  Add column with row number (ignore index)  <pre><code>data['num'] = range(len(data))\n</code></pre> Starts from 1  Add column with row number per grouping in group (ignore index)  <pre><code>data['num'] = data.groupby('group').cumcount().add(1)\n</code></pre> Starts from 1"},{"location":"python/pandas/dataframe/#derive","title":"Derive","text":"<p>All operations create a new DataFrame.</p>"},{"location":"python/pandas/dataframe/#transform_1","title":"Transform","text":""},{"location":"python/pandas/dataframe/#transform-single-column","title":"Transform single column","text":"Action Code Details  Rename column  <pre><code>data.rename(columns={'old': 'new'})\n</code></pre>  Rename multiple columns  <pre><code>data.rename(columns={'old1': 'new1', 'old2': 'new2'})\n</code></pre>  Rename columns dynamically  <pre><code>data.rename(columns=dict(zip(oldNames, newNames)))\n</code></pre>  All columns to lowercase  <pre><code>data.rename(str.lower, axis='columns')\n</code></pre>"},{"location":"python/pandas/dataframe/#grow_1","title":"Grow","text":"Action Code Details  Append column col with constant value v <pre><code>?\n</code></pre>  Append column col from series s <pre><code>df.assign(col=s)\n</code></pre>  Insert column  <pre><code>data.insert(x)\n</code></pre>  Split string column col into two columns based on separator sep <pre><code>data['col'].str.split('sep', n=1, expand=True)\n</code></pre>  Append columns  <pre><code>data.assign(s1, s2)\n</code></pre>  Append columns  <pre><code>pd.concat(data, [s1, s2], axis=1)\n</code></pre>"},{"location":"python/pandas/dataframe/#shrink","title":"Shrink","text":"Action Code Details  Select columns  <pre><code>data[['subject', 'date']]\n</code></pre>"},{"location":"python/pandas/dataframe/#reduce-number-of-rows","title":"Reduce number of rows","text":"Action Code Details  Keep first n rows  <pre><code>data.head(n)\n</code></pre>  Remove first n rows  <pre><code>data[n:]\n</code></pre>  Remove last n rows  <pre><code>data[:-n]\n</code></pre>  Remove rows list rows <pre><code>data.drop(rows)\n</code></pre>  Remove duplicated rows  <pre><code>data.drop_duplicates()\n</code></pre>  Remove rows with a missing value in any column  <pre><code>data.dropna()\n</code></pre>  Remove rows with a missing value in the given columns list cols <pre><code>data.dropna(subset=cols)\n</code></pre>  Remove rows with at least n non-missing values across columns  <pre><code>data.dropna(thresh=n)\n</code></pre>  Remove rows with missing values in every column  <pre><code>data.dropna(how='all')\n</code></pre>  Keep last n rows  <pre><code>data.tail(n)\n</code></pre>  Pop row  <pre><code>data.pop()\n</code></pre>  Select n largest rows according to column col <pre><code>data.nlargest(n, col)\n</code></pre>  Select n largest rows per group group, according to column col <pre><code>data.groupby('group').apply(lambda x: x.nlargest(n=n, columns='col')).reset_index(drop=True))\n</code></pre>  Select last row per group group <pre><code>data.groupby('group').last().reset_index()\n</code></pre>  Select the row per group group with the largest value for column col <pre><code>data.loc[data.groupby('group')['col'].idxmax()].reset_index(drop=True)\n</code></pre>"},{"location":"python/pandas/dataframe/#reduce-number-of-columns","title":"Reduce number of columns","text":"Action Code Details  Select single column named subject <pre><code>data[['subject']]\n</code></pre> Note the double brackets  Remove column col <pre><code>data.drop(columns=col)\n</code></pre>  Remove duplicated columns  <pre><code>?\n</code></pre>  Remove column col if it exists  <pre><code>data.drop(columns=col, errors='ignore')\n</code></pre>  Remove columns list cols <pre><code>data.drop(columns=cols)\n</code></pre>  Remove columns with a missing value in any row  <pre><code>data.dropna(axis='columns')\n</code></pre>"},{"location":"python/pandas/dataframe/#reshape","title":"Reshape","text":"Action Code Details  Melt  <pre><code>data.melt(?)\n</code></pre>  Dcast  <pre><code>data.explode(?)\n</code></pre>  Transpose  <pre><code>data.T\n</code></pre>"},{"location":"python/pandas/dataframe/#combine","title":"Combine","text":"Action Code Details  Concatenate rows of dataframes  <pre><code>pd.concat([df, df2, dfN])\n</code></pre> Consider <code>ignore_index=True</code> argument  Concatenate rows of dataframes, having partially overlapping columns  <pre><code>?\n</code></pre>  Concatenate columns of dataframes, assuming equal index, and assuming columns don't overlap  <pre><code>pd.concat([data, data2], axis=1)\n</code></pre> Unsafe. First make sure indexes are aligned, or output has twice the number of rows  Concatenate columns of dataframes, ignoring the index, and assuming columns don't overlap  <pre><code>pd.concat([data.reset_index(drop=True), data2.reset_index(drop=True)], axis=1)\n</code></pre>  Inner join  <pre><code>data.merge(data2, on=['sex', 'country'])\n</code></pre>  Left join  <pre><code>data.merge(data2, on=['sex', 'country'], how='left')\n</code></pre>  Right join  <pre><code>data.merge(data2, on=['sex', 'country'], how='right')\n</code></pre>  Outer (full) join  <pre><code>data.merge(data2, on=['sex', 'country'], how='outer')\n</code></pre>  Cross join  <pre><code>data.merge(data2, on=['sex', 'country'], how='cross')\n</code></pre>  Left anti join  <pre><code>outer_data = data.merge(data2, on=['sex', 'country'], how='outer', indicator=True)\nouter_data[outer_data._merge == 'left_only'].drop('_merge', axis=1)\n</code></pre>  Left anti join  <pre><code>outer_data = data.merge(data2, how='outer', indicator=True)\nouter_data[outer_data._merge == 'right_only'].drop('_merge', axis=1)\n</code></pre>"},{"location":"python/pandas/dataframe/#iterate","title":"Iterate","text":"Action Code Details  Over rows (as tuples)  <pre><code>for row in data.itertuples():\n</code></pre>  Over rows (index, series)  <pre><code>for i, row in data.iterrows():\n</code></pre>  Over columns (lists)  <pre><code>for col in data.columns:\n</code></pre>"},{"location":"python/pandas/dataframe/#convert","title":"Convert","text":"Action Code Details  To dict of column lists  <pre><code>data.to_dict('list')\n</code></pre>  To dict of column series  <pre><code>recodata.to_dict('series')\n</code></pre>  To list of dict per row  <pre><code>data.to_dict('records')\n</code></pre>  To Numpy 2D array  <pre><code>import numpy as np\ndata.to_numpy()\n</code></pre>  To polars DataFrame  <pre><code>import polars as pl\nimport pyarrow\npl.from_pandas(data)\n</code></pre>  To pretty string, with at most n rows  <pre><code>data.to_string(index=False, max_rows=n)\n</code></pre>"},{"location":"python/pandas/dataframe/#to-file-format","title":"To file format","text":"Action Code Details  To CSV file  <pre><code>data.to_csv('file.csv', index=False)\n</code></pre> <code>index=False</code> is needed not to polute CSV with a meaningless index  To TSV file  <pre><code>data.to_csv('file.tsv', sep='   ', index=False)\n</code></pre> <code>index=False</code> is needed not to polute TSV with a meaningless index  To JSON file  <pre><code>data.to_json('file.json', orient)\n</code></pre> See docs to determine orientation  To parquet  <pre><code>data.to_parquet('file.parquet')\n</code></pre>"},{"location":"python/pandas/dataframe/#options","title":"Options","text":"Action Code Details  Set an option opt to value <pre><code>pd.set_option('opt', value)\n</code></pre>  Use options within a context  <pre><code>from pandas import option_context\nwith option_context('display.max_rows', 10, 'display.max_columns', None):\n    print(data)\n</code></pre>  Show all columns  <pre><code>pd.options.display.max_columns = None\n</code></pre>  Show all rows  <pre><code>pd.options.display.max_rows = None\n</code></pre>  Set max output width, in characters  <pre><code>pd.options.display.width = 120\n</code></pre> Default is 80  Show floats with d decimal digits precision  <pre><code>pd.options.display.precision = d\n</code></pre>  Format numbers with thousand separator  <pre><code>pd.options.styler.format.thousands = ','\n</code></pre>"},{"location":"python/pandas/series/","title":"Pandas Series","text":""},{"location":"python/pandas/series/#pandas-series","title":"Pandas Series","text":"<p>Opinionated words of caution:</p> <ul> <li>Types are (currently?) a mess, and autocasting does not make this any better.</li> <li>Specify dtype when defining series to avoid surprises further down the pipeline.</li> <li>Missing values are a complete mess: None/Null/NA/NaN are all used interchangeably, despite the existence of is.na and is.null implying otherwise.</li> <li>The representation of missing values differs per type (float uses nan even for NA inputs, object uses NA), which makes the whole thing even more confusing.</li> <li>This seems to be fixed with the new Int64 and Float64 types, although this won't help in practice as autocasting still uses the old types.</li> <li>Avoid indexes unless you have a good reason. Consider using a DataFrame instead.</li> <li>The <code>in</code> operator, counterintuitively, works on the index, not the values.</li> </ul> <p>Code <pre><code>import pandas as pd\n</code></pre></p>"},{"location":"python/pandas/series/#create","title":"Create","text":"Action Code Details  From DataFrame column s <pre><code>data[s]\n</code></pre>"},{"location":"python/pandas/series/#create-empty-series","title":"Create empty series","text":"Action Code Details  Empty series (of object type)  <pre><code>pd.Series()\n</code></pre>  Empty boolean series  <pre><code>pd.Series(dtype=bool)\n</code></pre>  Empty categorical series with pre-defined categories  <pre><code>pd.Categorical([], categories=['a', 'b', 'c'])\n</code></pre>  Empty categorical series without defined categories  <pre><code>pd.Series(dtype='category')\n</code></pre>  Empty int series  <pre><code>pd.Series(dtype=int)\n</code></pre>  Empty float series  <pre><code>pd.Series(dtype=float)\n</code></pre>  Empty datetime series  <pre><code>pd.Series(dtype='datetime64[ns]')\n</code></pre>"},{"location":"python/pandas/series/#create-series-of-constant-values","title":"Create series of constant values","text":"Action Code Details  Series filled with NAs of length n (of object type)  <pre><code>pd.Series([None] * n)\n</code></pre>  Constant value v of length n <pre><code>pd.Series(v, index=range(n))\n</code></pre>"},{"location":"python/pandas/series/#create-series-from-a-list-of-values","title":"Create series from a list of values","text":"Action Code Details  Object series from a generic list of values  <pre><code>pd.Series([1, None, 'a'])\n</code></pre>  Int series from a list of integers  <pre><code>pd.Series([1, '2', 3], dtype='int')\n</code></pre>  Nullable int series from a list of integers  <pre><code>pd.Series([1, None, 3], dtype = 'Int64')\n</code></pre> Preserves None as   Nullable int series filled with NA of length n <pre><code>pd.Series([None] * 3, dtype='Int64')\n</code></pre>  Float series from list of numbers  <pre><code>pd.Series([1, None, 3], dtype='float')\n</code></pre> None is converted to NaN!  Nullable float series from a list of numbers  <pre><code>pd.Series([1, None, 3.5], dtype = 'Float64')\n</code></pre> None, NA and NaN are all set to   Nullable float series filled with NA of length n <pre><code>pd.Series([None] * 3, dtype='Int64')\n</code></pre>  Categorical series from list of strings  <pre><code>pd.Categorical(['b', 'b', 'a'], categories=['a', 'b', 'c'])\n</code></pre>  Categorical series filled with NA of length n <pre><code>pd.Categorical([None] * n, categories=['a', 'b', 'c'])\n</code></pre>"},{"location":"python/pandas/series/#test","title":"Test","text":"Action Code Details  Is series or subclass  <pre><code>isinstance(x, pd.Series)\n</code></pre>  Is series and not subclass  <pre><code>type(x) is pd.Series\n</code></pre>  Empty  <pre><code>x.empty\n</code></pre>  Not empty  <pre><code>not x.empty\n</code></pre>  Has length n <pre><code>len(x) == n\n</code></pre>  Is boolean series  <pre><code>pd.api.types.is_bool_dtype(x)\n</code></pre>  Is categorical series  <pre><code>isinstance(x.dtype, pd.CategoricalDtype)\n</code></pre>  Is ordered categorical series  <pre><code>isinstance(x.dtype, pd.CategoricalDtype) and x.ordered\n</code></pre>  Is numeric series  <pre><code>pd.api.types.is_numeric_dtype(x)\n</code></pre> For example, int or float  Is integer series  <pre><code>pd.api.types.is_integer_dtype(x)\n</code></pre> For example, int or Int64  Is unsigned integer series  <pre><code>pd.api.types.is_unsigned_integer_dtype(x)\n</code></pre>  Is float series  <pre><code>pd.api.types.is_float_dtype(x)\n</code></pre> For example, float or Float64  Is datetime64 series  <pre><code>pd.api.types.is_datetime64_dtype(x)\n</code></pre>  Is datetime64[ns] series  <pre><code>pd.api.types.is_datetime64_ns_dtype(x)\n</code></pre>  Is string series  <pre><code>pd.api.types.is_string_dtype(x)\n</code></pre>  Is object series  <pre><code>pd.api.types.is_object_dtype(x)\n</code></pre>  Is hashable series  <pre><code>pd.api.types.is_hashable(x)\n</code></pre>  No duplicate elements (all unique)  <pre><code>x.is_unique\n</code></pre>  Any duplicate elements  <pre><code>not x.is_unique\n</code></pre>  Contains NA  <pre><code>x.hasnans\n</code></pre>  Contains only NA  <pre><code>x.isna().all()\n</code></pre>  Contains no NA  <pre><code>x.notna().all()\n</code></pre>  Contains value v, ignoring NAs  <pre><code>x.isin([v]).any()\n</code></pre> WARNING: `v in x' tests the indices instead!  Contains value v, ignoring NAs  <pre><code>any(x == v)\n</code></pre>  Contains any of the values v1, v2, ignoring NAs  <pre><code>x.isin([v1, v2]).any()\n</code></pre>  Does not contain value v <pre><code>all(x != v)\n</code></pre>  Are elements in increasing order  <pre><code>x.is_monotonic_increasing\n</code></pre>  Are elements in decreasing order  <pre><code>x.is_monotonic_decreasing\n</code></pre>"},{"location":"python/pandas/series/#test-boolean-series","title":"Test boolean series","text":"Action Code Details  All values are True  <pre><code>x.all()\n</code></pre>  All values are False  <pre><code>not x.any()\n</code></pre>"},{"location":"python/pandas/series/#tests-for-string-series","title":"Tests for string series","text":"Action Code Details  Contains string s <pre><code>x.str.contains(s).any()\n</code></pre>"},{"location":"python/pandas/series/#assertions","title":"Assertions","text":"Action Code Details  Assert series equal  <pre><code>pd.testing.assert_series_equal(x, y)\n</code></pre>  Assert series equal, ignoring the names  <pre><code>pd.testing.assert_series_equal(x, y, check_names=False)\n</code></pre>"},{"location":"python/pandas/series/#extract","title":"Extract","text":"Action Code Details  Number of elements  <pre><code>x.size\n</code></pre>  Number of elements  <pre><code>len(x)\n</code></pre>  Hash  <pre><code>hash(x.values.tobytes())\n</code></pre>  Dtype  <pre><code>x.dtype\n</code></pre>  Number of unique elements, ignoring NAs  <pre><code>x.nunique()\n</code></pre>  Smallest value, ignoring NAs  <pre><code>x.min()\n</code></pre>  Index of the smallest value, ignoring NAs  <pre><code>x.idxmin()\n</code></pre>  Greatest value, ignoring NAs  <pre><code>x.max()\n</code></pre>  Index of the greatest value, ignoring NAs  <pre><code>x.idxmax()\n</code></pre>  Count occurrence per value  <pre><code>x.value_counts()\n</code></pre>"},{"location":"python/pandas/series/#dtype-specific-operations","title":"Dtype-specific operations","text":"Action Code Details  Get length of each list element  <pre><code>x.list.len()\n</code></pre>  Get the _i_th item of each list element  <pre><code>x.list[i]\n</code></pre>"},{"location":"python/pandas/series/#update","title":"Update","text":"<p>Warning: updates may change the dtype of the series!</p> Action Code Details  Set element at index i to NA  <pre><code>x[i] = pd.NA\n</code></pre>  Set element at index i to value v <pre><code>x[i] = v\n</code></pre>"},{"location":"python/pandas/series/#derive","title":"Derive","text":""},{"location":"python/pandas/series/#cast","title":"Cast","text":"Action Code Details  Cast series to numeric dtype  <pre><code>pd.to_numeric(x)\n</code></pre>"},{"location":"python/pandas/series/#order","title":"Order","text":"Action Code Details  Reverse  <pre><code>x[::-1]\n</code></pre>  Sort ascendingly  <pre><code>x.sort_values()\n</code></pre> Nulls are placed last  Sort descendingly  <pre><code>x.sort_values(ascending=False)\n</code></pre> Nulls are placed last  Shuffle  <pre><code>x.sample(frac=1)\n</code></pre>"},{"location":"python/pandas/series/#transform","title":"Transform","text":"Action Code Details  Fill NA by value_v_  <pre><code>x.fillna(value=v)\n</code></pre>  Replace value v by NA  <pre><code>x.replace(V, pd.NA)\n</code></pre> May cast series to another type if nulls are not supported (example: int)"},{"location":"python/pandas/series/#mask","title":"Mask","text":"Action Code Details  Duplicate mask  <pre><code>x.duplicated()\n</code></pre>"},{"location":"python/pandas/series/#cast-to-type","title":"Cast to type","text":"Action Code Details  Cast to boolean  <pre><code>x.astype(bool)\n</code></pre>  Cast to integer  <pre><code>x.astype(int)\n</code></pre>  Cast to float  <pre><code>x.astype(float)\n</code></pre>  Cast to string  <pre><code>x.astype(str)\n</code></pre>  Cast to categorical (nominal)  <pre><code>x.astype('category')\n</code></pre>  Cast to categorical (nominal) with given categories  <pre><code>pd.Categorical(x, categories=['a', 'b', 'c'])\n</code></pre>  Cast to ordered categorical (ordinal)  <pre><code>pd.Categorical(x, ordered=True)\n</code></pre>  Cast categorical to integer codes  <pre><code>pd.Series(z.codes)\n</code></pre>  Cast ordered categorical to unordered categorical  <pre><code>x.as_unordered()\n</code></pre>"},{"location":"python/pandas/series/#grow","title":"Grow","text":""},{"location":"python/pandas/series/#shrink","title":"Shrink","text":"Action Code Details  First n elements  <pre><code>x.head(n)\n</code></pre>  Last n elements  <pre><code>x.tail(n)\n</code></pre>  Slice  <pre><code>x[a:b]\n</code></pre>  Sample n elements  <pre><code>x.sample(n)\n</code></pre>  Remove duplicates  <pre><code>x.drop_duplicates()\n</code></pre>"},{"location":"python/pandas/series/#convert","title":"Convert","text":"Action Code Details  To list  <pre><code>x.tolist()\n</code></pre>  To list  <pre><code>list(x)\n</code></pre>  To set of unique values  <pre><code>set(x)\n</code></pre> <code>NA</code> is included only once, <code>nan</code> is only included once  To DataFrame (single column)  <pre><code>x.to_frame()\n</code></pre>  To Numpy ND array  <pre><code>x.to_numpy()\n</code></pre>  To dict (index-value pairs)  <pre><code>x.to_dict()\n</code></pre>  To JSON index-value array  <pre><code>x.to_json()\n</code></pre>"},{"location":"python/plot/","title":"Plots","text":""},{"location":"python/plot/#plots","title":"Plots","text":"<p>Sheets on data visualizations, plots, charts, graphs.</p> <p>Detailed comparison of many plotting packages: https://learnpython.com/blog/python-libraries-data-visualization/</p>"},{"location":"python/plot/seaborn/","title":"Seaborn","text":""},{"location":"python/plot/seaborn/#seaborn","title":"Seaborn","text":"<p>Seaborn is a high-level interface to matplotlib. It is great for rapidly creating standard yet pretty data visualizations.</p> <p>Pros:</p> <ul> <li>Easy-to-use, high-level</li> <li>Pretty statistical data visualizations by default</li> <li>Theming and color palettes</li> <li>Extendable or modifable with matplotlib code</li> </ul> <p>Cons:</p> <ul> <li>Limited support for complex visualizations (in which case, consider matplotlib)</li> </ul> <p>To install, run: <pre><code>pip install seaborn\n</code></pre></p> <p>Details For use in Jupyter notebooks, make sure you enable matplotlib mode to see the plots. Alternatively, call: <pre><code>import matplotlib.pyplot as plt\nplt.show()\n</code></pre></p> <p>Code <pre><code>import seaborn as sns\nimport seaborn.objects as so\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nimport numpy as np\nimport pandas as pd\n\nsns.set_theme()\n</code></pre></p>"},{"location":"python/plot/seaborn/#theming","title":"Theming","text":"<p>If no theme is set, the default matplotlib theme is used.</p> Action Code Details  Set default theme  <pre><code>sns.set_theme()\n</code></pre>"},{"location":"python/plot/seaborn/#plots","title":"Plots","text":""},{"location":"python/plot/seaborn/#distribution-plots","title":"Distribution plots","text":"<p>See https://seaborn.pydata.org/generated/seaborn.displot.html</p>"},{"location":"python/plot/seaborn/#boxplots","title":"Boxplots","text":"Action Code Details  Boxplot  <pre><code>sns.boxplot(iris, x='sepal_length')\n</code></pre>  Boxplot by group  <pre><code>sns.boxplot(iris, x='sepal_length', y='species')\n</code></pre>  Facetted boxplot by two grouping factors  <pre><code>sns.catplot(fmri, kind='box', x='signal', y='region', col='event')\n</code></pre>  Boxplot by two grouping factors  <pre><code>sns.boxplot(fmri, x='signal', y='region', hue='event')\n</code></pre>"},{"location":"python/plot/seaborn/#histograms","title":"Histograms","text":"Action Code Details  Plot histogram  <pre><code>sns.histplot(iris, x='sepal_length')\n</code></pre>  Plot histogram with bins centered at discrete values  <pre><code>sns.histplot(iris, x='sepal_length', discrete=True)\n</code></pre> For example, at integer values  Plot histogram with bin-width  <pre><code>sns.histplot(iris, x='sepal_length', binwidth=1.0)\n</code></pre>  Plot histogram with a given number of bins  <pre><code>sns.histplot(iris, x='sepal_length', bins=5)\n</code></pre>  Plot histogram and kernel density  <pre><code>sns.histplot(iris, x='sepal_length', kde=True)\n</code></pre>  Plot normalized histogram  <pre><code>sns.histplot(iris, x='sepal_length', stat='proportion')\n</code></pre>  Plot normalized histogram as percentage  <pre><code>sns.histplot(iris, x='sepal_length', stat='percent')\n</code></pre>  Facetted histogram chart  <pre><code>sns.displot(iris, x='sepal_length', col='species')\n</code></pre>"},{"location":"python/plot/seaborn/#kernel-density-plots","title":"Kernel density plots","text":"Action Code Details  Plot kernel density  <pre><code>sns.kdeplot(iris, x='sepal_length')\n</code></pre>  Plot kernel density by group  <pre><code>sns.kdeplot(iris, x='sepal_length', hue='species')\n</code></pre>  Facetted kernel density chart  <pre><code>sns.displot(iris, kind='kde', x='sepal_length', col='species')\n</code></pre>  Violin plot  <pre><code>sns.violinplot(iris, x='sepal_length')\n</code></pre>  Violin plot with grouping factor  <pre><code>sns.violinplot(iris, x='sepal_length', y='species')\n</code></pre>"},{"location":"python/plot/seaborn/#empirical-cumulative-density-plots","title":"Empirical cumulative density plots","text":"Action Code Details  Plot stepped cumulative density  <pre><code>sns.ecdfplot(iris, x='sepal_length')\n</code></pre>  Plot stepped inverse cumulative density  <pre><code>sns.ecdfplot(iris, x='sepal_length', complementary=True)\n</code></pre>  Plot stepped cumulative density by group  <pre><code>sns.displot(iris, kind='ecdf', x='sepal_length', hue='species')\n</code></pre>  Facetted plot of stepped cumulative density  <pre><code>sns.displot(iris, kind='ecdf', x='sepal_length', col='species')\n</code></pre>  Plot cumulative density as barplot  <pre><code>sns.histplot(iris, x='sepal_length', cumulative=True, stat='proportion')\n</code></pre>  Plot cumulative density by group as barplot  <pre><code>sns.histplot(iris, x='sepal_length', hue='species',\n    cumulative=True, stat='proportion', common_norm=False)\n</code></pre> Each group reaches 1.0  Facetted plot of cumulative density by group as barplot  <pre><code>sns.displot(iris, x='sepal_length',\n    cumulative=True, stat='proportion', common_norm=False, col='species')\n</code></pre> Each group reaches 1.0  Plot step-wise cumulative density with density rug  <pre><code>sns.displot(iris, kind='ecdf', x='sepal_length', rug=True)\n</code></pre>"},{"location":"python/plot/seaborn/#bivariate-plots","title":"Bivariate plots","text":"<p>Plots involving two continuous variables.</p>"},{"location":"python/plot/seaborn/#scatter-plots","title":"Scatter plots","text":"Action Code Details  Scatter plot  <pre><code>sns.scatterplot(iris, x='sepal_length', y='sepal_width')\n</code></pre>  Scatter plot with grouping factor  <pre><code>sns.scatterplot(iris, x='sepal_length', y='sepal_width', hue='species')\n</code></pre>  Facetted scatter plot  <pre><code>sns.relplot(\n    data=iris, kind='scatter',\n    x='sepal_length', y='sepal_width',\n    col='species'\n)\n</code></pre>"},{"location":"python/plot/seaborn/#joint-plots","title":"Joint plots","text":"Action Code Details  Scatter plot with KDE axes  <pre><code>sns.jointplot(iris, x='sepal_length', y='sepal_width')\n</code></pre> Scatter and KDE  Scatter plot with KDE axes, with grouping factor  <pre><code>sns.jointplot(iris, x='sepal_length', y='sepal_width', hue='species')\n</code></pre>  Plot heatmap with histograms along axes  <pre><code>sns.jointplot(iris, kind='hist', x='sepal_length', y='sepal_width')\n</code></pre>"},{"location":"python/plot/seaborn/#line-plots","title":"Line plots","text":"Action Code Details  Line plot  <pre><code>sns.lineplot(flights.query('month==\"May\"'), x='year', y='passengers', hue='month')\n</code></pre>  Line plot, with separate lines per group  <pre><code>sns.lineplot(flights, x='year', y='passengers', hue='month')\n</code></pre>  Line plot involving duplicate observations per x, as confidence region  <pre><code>sns.lineplot(flights, x='year', y='passengers')\n</code></pre>  Facetted line plot  <pre><code>sns.relplot(\n    data=fmri, kind='line',\n    x='timepoint', y='signal',\n    col='region', row='event'\n)\n</code></pre>"},{"location":"python/plot/seaborn/#multivariate-plots","title":"Multivariate plots","text":"<p>Plots involving more than two continuous variables.</p> Action Code Details  Pairs plot  <pre><code>sns.pairplot(iris)\n</code></pre> Plots pairwise scatter, and KDE along the diagonal"},{"location":"python/plot/seaborn/#facetted-plotting-options","title":"Facetted plotting options","text":"<p>The function for creating facetted plots differs between the kinds of plots, so only options are described here. See, for example, <code>sns.displot()</code>, <code>sns.relplot()</code> and <code>sns.catplot()</code>.</p> Action Code Details  Horizontally stacked facets  <pre><code>col='region'\n</code></pre>  Horizontally stacked facets, wrap after n columns  <pre><code>col='region', col_wrap=n\n</code></pre>  Vertically stacked facets  <pre><code>row='region'\n</code></pre>  Vertically stacked facets, wrap after n columns  <pre><code>row='region', row_wrap=n\n</code></pre>  Grid-based facets along two grouping factors  <pre><code>col='region', row='event'\n</code></pre>"},{"location":"python/plot/seaborn/#plot-configuration","title":"Plot configuration","text":"<p>Arguments should be used inside the <code>sns.relplot</code> function.</p> Action Code Details  Flip axes  <pre><code>orient='y'\n</code></pre>  Log-scale with base b <pre><code>log_scale=('y', b)\n</code></pre>  Format axis with comma as thousands separator  <pre><code>import matplotlib.ticker as ticker\niris['sepal_length'] *= 1000\ng = sns.histplot(iris, x='sepal_length')\n\ng.xaxis.set_major_formatter(\n    ticker.FuncFormatter(lambda x, p: format(int(x), ','))\n)\n</code></pre> Very tedious  Format axis with percentage labels  <pre><code>import matplotlib.ticker as ticker\ng = sns.ecdfplot(iris, x='sepal_length', stat='percent')\n\ng.yaxis.set_major_formatter( ticker.PercentFormatter() )\n</code></pre> <code>PercentFormatter</code> assumes percent input, not proportion, so 1.0 = '1.0%'  1:1 aspect ratio  <pre><code>aspect=1\n</code></pre>  Hide legend  <pre><code>legend=False\n</code></pre>"},{"location":"python/polars/","title":"Polars package","text":""},{"location":"python/polars/#polars-package","title":"Polars package","text":"<p>Polars is a \"blazingly fast\" DataFrame library for manipulating structured data.</p> <p>Website: https://pola.rs/ Docs: https://docs.pola.rs/</p> <p>Features:</p> <ul> <li>Among the fastest data.frame engines with DuckDB, according to their own benchmarks. Polars is significantly faster than pandas, and even beats R's excellent data.table package in some scenarios.</li> <li>Consistent API (unlike, e.g., pandas)</li> <li>Built-in query optimization, made even more powerful through lazy evaluation (see LazyFrame)</li> <li>Native parallel computation support for many operations</li> <li>Support for common data storage formats and layers.</li> <li>Streaming support: Can handle datasets larger than RAM allows</li> <li>Uses Apache Arrow arrays to represent data in memory while Pandas uses Numpy arrays, allows for easy integration with other tools that support Apache Arrow.</li> <li>Can import and export from pandas</li> </ul>"},{"location":"python/polars/dataframe/","title":"Polars DataFrame","text":""},{"location":"python/polars/dataframe/#polars-dataframe","title":"Polars DataFrame","text":"<p>The polars package provides a fast and powerful implementation of data frames.</p> <p>Details Start a lazy query using a LazyFrame by <code>data.lazy()</code>. Operations on a LazyFrame are not executed until this is requested by either calling <code>collect()</code> or <code>fetch()</code>. Lazy operations are advised because they allow for query optimization and more parallelization.</p> <p>Code <pre><code>import polars as pl\n</code></pre></p>"},{"location":"python/polars/dataframe/#create","title":"Create","text":"<p>Create a new DataFrame</p> Action Code Details  From column lists  <pre><code>pl.DataFrame({'A': [1, 2], 'fruits': ['banana', 'apple']})\n</code></pre>  From list of lists  <pre><code>data = [[1, 2, 3], [4, 5, 6]]\npl.DataFrame(data, schema=['a', 'b', 'c'])\n</code></pre>  From dict  <pre><code>pl.DataFrame(dict)\n</code></pre>  From dict with schema  <pre><code>pl.DataFrame(\n    dict,\n    schema = {'col1': pl.Float32, 'col2': pl.Int64, 'col3': pl.Date}\n)\n</code></pre>  Repeat each row with an index between a row-specific range, defined by min (inclusive) and max (exclusive) columns  <pre><code>data.select(\n    pl.col('patient'),\n    pl.int_ranges(start='startDay', end='endDay').alias('day')\n).explode('day')\n</code></pre>  From <code>pandas.DataFrame</code> <pre><code>pl.from_pandas(data)\n</code></pre>  From numpy array  <pre><code>data = np.array([[1, 2], [3, 4]])\n\npl.DataFrame(data, schema = ['a', 'b'], orient = 'col')\n</code></pre>"},{"location":"python/polars/dataframe/#from-file-formats","title":"From file formats","text":"Action Code Details  From CSV file  <pre><code>pl.read_csv('file.csv')\n</code></pre>"},{"location":"python/polars/dataframe/#test","title":"Test","text":"Action Code Details  Is <code>pl.DataFrame</code> or subclass  <pre><code>isinstance(x, pl.DataFrame)\n</code></pre>  Is <code>pl.DataFrame</code> but not subclass  <pre><code>type(x) is pl.DataFrame\n</code></pre>  Empty (no rows)  <pre><code>data.is_empty()\n</code></pre>  Not empty (has rows)  <pre><code>not data.is_empty()\n</code></pre>  Data frames are equal  <pre><code>data.equals(data2)\n</code></pre>  Any column contains null  <pre><code>any(col.has_nulls() for col in data)\n</code></pre>  Any column contains null  <pre><code>data.select(pl.all().is_null().any()).to_series().any()\n</code></pre>  Any column is filled with nulls  <pre><code>any(col.is_null().all() for col in data)\n</code></pre>  Duplicates across two or more columns  <pre><code>data.select('col1', 'col2').is_duplicated().any()\n</code></pre>"},{"location":"python/polars/dataframe/#tests-for-specific-columns","title":"Tests for specific column(s)","text":"Action Code Details  Contains column  <pre><code>'age' in data.columns\n</code></pre>  Contains columns  <pre><code>{'age', 'sex'}.issubset(data.columns)\n</code></pre>  Contains columns cols <pre><code>set(cols).issubset(data.columns)\n</code></pre>  Column is missing  <pre><code>'age' not in data.columns\n</code></pre>  Column has missing value  <pre><code>data['sex'].is_null().any()\n</code></pre>  Column has no missing values  <pre><code>data['sex'].is_not_null().all()\n</code></pre>  Columns are equal  <pre><code>?\n</code></pre>  Columns are equal series  <pre><code>data['sex'].equals(data['sex2'].alias('sex'))\n</code></pre> Series names must match!  Column has no duplicate values  <pre><code>data['date'].is_unique().all()\n</code></pre>  Column has duplicate values  <pre><code>data['date'].is_duplicated().any()\n</code></pre>  Column has duplicates within groups  <pre><code>data.select(\n    pl.col('date').is_duplicated().any().over('patient').any()\n).item()\n</code></pre> Checks whether any group (patient) has duplicate values (dates)  Column has duplicates within groups  <pre><code>data.select(\n    pl.col('date').is_duplicated().any().over('patient')\n).to_series().any()\n</code></pre>  Column has duplicates within groups  <pre><code>data.group_by('patient').agg(\n    dupe=pl.col('date').is_duplicated().any()\n)['dupe'].any()\n</code></pre>  Column is of type  <pre><code>data.schema['col1'] == dtype\n</code></pre>  Column is bool type  <pre><code>data.schema['alive'] == pl.Bool\n</code></pre>  Column is string type  <pre><code>data.schema['sex'] == pl.String\n</code></pre>  Columns is numeric  <pre><code>data.schema['age'].is_numeric()\n</code></pre>  Column is integer type  <pre><code>data.schema['age'].is_integer()\n</code></pre>  Column is standard integer (64-bit)  <pre><code>data.schema['age'] == pl.Int64\n</code></pre>  Column is float  <pre><code>data.schema['age'].is_float()\n</code></pre>  Column is date  <pre><code>data.schema['date'].dtype == pl.Date\n</code></pre>  Column is list type  <pre><code>data.schema['keywords'] == pl.List\n</code></pre>  Column is of type list of strings  <pre><code>data.schema['keywords'] == pl.List(pl.String)\n</code></pre>  Column is consistently rowwise greater than another column  <pre><code>(data['col1'] &gt; data['col2']).all()\n</code></pre>  Column is sometimes rowwise greater than another column  <pre><code>(data['col1'] &gt; data['col2']).any()\n</code></pre>"},{"location":"python/polars/dataframe/#extract","title":"Extract","text":"Action Code Details  Number of rows  <pre><code>data.height\n</code></pre>  Number of columns  <pre><code>len(data.columns)\n</code></pre>  Get column name as series  <pre><code>data['name']\n</code></pre>  Column names  <pre><code>data.columns\n</code></pre>  Column types  <pre><code>data.dtypes\n</code></pre>  Column-types mapping  <pre><code>data.schema\n</code></pre>  Find column index by name  <pre><code>data.find_idx_by_name('age')\n</code></pre>  Get column name as list  <pre><code>data['name'].to_list()\n</code></pre>  Get first column as series  <pre><code>data.to_series()\n</code></pre>  Get first column as series  <pre><code>data.select( pl.first() )\n</code></pre>  Get the _j_th column as series  <pre><code>data.to_series(j)\n</code></pre>  Get last column as series  <pre><code>data.select(pl.last())\n</code></pre>  Number of missing values per column  <pre><code>data.null_count()\n</code></pre>  Number of unique values in a column  <pre><code>data['col1'].n_unique()\n</code></pre>  Number of rows without any missing values across columns a, b and c, by group  <pre><code>data.group_by('subject').agg([\n    pl.all_horizontal(\n        pl.col(['a', 'b', 'c']).is_not_null()\n    ).sum()\n])\n</code></pre>  Number of unique rows across columns  <pre><code>?\n</code></pre>  Get i th row as tuple  <pre><code>data.row(i)\n</code></pre>  Get rows as list of tuple  <pre><code>data.rows(...)\n</code></pre> ?  First item (cell)  <pre><code>data.item(0, 0)\n</code></pre>  Item (cell) from row i and column index j <pre><code>data.item(i, j)\n</code></pre>  Item (cell) from row i and column name name <pre><code>data.item(i, name)\n</code></pre>"},{"location":"python/polars/dataframe/#update","title":"Update","text":"<p>Update the data frame in-place</p> Action Code Details  Replace column with another series  <pre><code>data.replace('age', newAgeSeries)\n</code></pre>  Remove or pop column  <pre><code>data.drop_in_place('Age')\n</code></pre> Returns the dropped column  Append column from series  <pre><code>data.hstack(s, in_place = True)\n</code></pre>  Insert column from series  <pre><code>data.insert_at_idx(1, s)\n</code></pre>"},{"location":"python/polars/dataframe/#combine","title":"Combine","text":"Action Code Details  Add rows of a data frame (same columns)  <pre><code>data.extend(data2)\n</code></pre>  Add rows of several data frames (same columns)  <pre><code>data.vstack(data2)\ndata.vstack(dataN)\ndata.rechunk()\n</code></pre>"},{"location":"python/polars/dataframe/#derive","title":"Derive","text":""},{"location":"python/polars/dataframe/#transform","title":"Transform","text":"<p>Transform the dataframe, preservering shape</p> Action Code Details  Rename column old to new <pre><code>data.rename({'old': 'new'})\n</code></pre>  Rename columns  <pre><code>data.rename({'old1': 'new1', 'old2': 'new2'})\n</code></pre>  Cast column type  <pre><code>data.with_columns(pl.col('col1').cast(pl.Float32))\n</code></pre>  Cast columns to types  <pre><code>data.cast({'col1': pl.Float32, 'col2': pl.UInt8})\n</code></pre>  Update column values  <pre><code>data.with_columns( pl.col('age') + 5 )\n</code></pre>  Update column values on condition  <pre><code>df.with_columns(\n    pl.when( pl.col('age') &gt;= 18 ).\n    then( pl.lit(1) ).\n    otherwise( pl.lit(-1) )\n)\n</code></pre>  Update column values on conditions  <pre><code>df.with_columns(\n    pl.when( pl.col('age') &gt;= 18 ).\n    then( pl.lit(1) ).\n    when( pl.col('sex') == 'male' ).\n    then(4).\n    otherwise( pl.lit(-1) )\n)\n</code></pre>  Update column values for specific rows  <pre><code>rows = [1, 3, 5]\ndata.with_row_count().with_columns(\n    pl.when( pl.col('row_nr').is_in(rows) ).\n    then( pl.lit(True) )\n)\n</code></pre>"},{"location":"python/polars/dataframe/#fill","title":"Fill","text":"Action Code Details  Fill nulls with zero  <pre><code>data.fill_null(strategy = 'zero')\n</code></pre>  Fill nulls with value  <pre><code>data.fill_null(value)\n</code></pre>  Fill nulls with LOCF  <pre><code>data.fill_null(strategy='forward')\n</code></pre> Wrong for grouped data  Fill NaNs with value v <pre><code>data.fill_nan(v)\n</code></pre>  Fill infinity with value v for all columns of dtype float  <pre><code>import polars.selectors as cs\ndata.with_columns(\n    cs.float().replace(float('inf'), v)\n)\n</code></pre>"},{"location":"python/polars/dataframe/#row-mask","title":"Row mask","text":"<p>All snippets output a <code>pl.Series</code> object. Use <code>.to_list()</code> to obtain list output.</p> Action Code Details  Mask indicating whether rows contain null in any column  <pre><code>data.select(\n    pl.any_horizontal(pl.all().is_null())\n).to_series()\n</code></pre>  Mask indicating whether rows contain null in all columns  <pre><code>data.select(\n    pl.all_horizontal(pl.all().is_null())\n).to_series()\n</code></pre>  Mask indicating duplicate rows  <pre><code>data.is_duplicated()\n</code></pre>  Mask indicating unique rows  <pre><code>data.is_unique()\n</code></pre>  Mask based on a column value  <pre><code>data['age'] &gt; 18\n</code></pre>  Mask based on pairwise comparison of another column  <pre><code>data.with_columns(\n    pl.col('income') * 3 &gt; pl.col('rent')\n).to_series()\n</code></pre>"},{"location":"python/polars/dataframe/#over-consecutive-rows","title":"Over consecutive rows","text":"<p>Aggregate over consecutive rows, e.g., for computing a moving average.</p> Action Code Details  Compute centered rolling mean with window size w <pre><code>data.with_columns(\n    smoothValue=pl.col('value').\n        rolling_mean(window_size=w, min_periods=0, center=True)\n)\n</code></pre>  Compute centered rolling mean per group with window size w <pre><code>data.with_columns(\n    smoothValue=pl.col('value').\n        rolling_mean(window_size=w, min_periods=0, center=True).\n        over('patient')\n)\n</code></pre>  Detrend a column by group, using a centered rolling mean with window size w <pre><code>data.with_columns(\n    trend=pl.col('value').\n        rolling_mean(window_size=w, min_periods=0, center=True).\n        over('patient')\n).with_columns(\n    detrendedValue=(pl.col('value') - pl.col('trend')).over('Patient')\n)\n</code></pre>  Detrend a column by group but preserve the mean level, using a centered rolling mean with window size w <pre><code>data.with_columns(\n    trend=pl.col('value').rolling_mean(\n        window_size=w, min_periods=0, center=True).over('patient')\n).with_columns(\n    detrendedValue=(\n        pl.col('value') - pl.col('trend') + pl.col('trend').mean()\n    ).over('Patient')\n</code></pre>"},{"location":"python/polars/dataframe/#over-time","title":"Over time","text":"<p>Aggregation is done with respect to a date/time column (e.g., hourly, daily, weekly)</p>"},{"location":"python/polars/dataframe/#row-based","title":"Row-based","text":"<p>Rolling computation for each row (i.e., observation in time)</p> Action Code Details  Rolling computation for a single column, with right-aligned partial window of max n days and at least i rows  <pre><code>data.with_columns(\n    pl.col('Hospitalized').rolling_mean(\n        by='Date',\n        closed='both',\n        window_size=f'{n - 1}d',\n        min_periods=i\n    )\n)\n</code></pre> Currently only available for <code>rolling_mean()</code>, not any of the other <code>rolling_</code> functions.  Rolling computation with right-aligned partial window of max n days  <pre><code>new_data = data.rolling(\n    index_column='Date',\n    period=f'{n}d'\n).agg(\n    pl.mean('Obs)\n)\n</code></pre>  Rolling computation with right-aligned partial windows of max n days, keep other columns  <pre><code>new_data = data.rolling(\n    index_column='Date',\n    period=f'{n}d'\n).agg(\n    pl.exclude(['Date', 'Obs']).last(),\n    pl.mean('Obs)\n)\n</code></pre>"},{"location":"python/polars/dataframe/#interval-based","title":"Interval-based","text":"<p>Rolling computation for constant (not dynamic!) intervals. This may introduce additional moments in time.</p> Action Code Details  Daily rolling computation with right-aligned partial window of max n days  <pre><code>new_data = data.group_by_dynamic(\n    index_column='Date',\n    every='1d',\n    offset=f'-{n - 1}d',\n    period=f'{n - 1}d',\n    label='right',\n    closed='both',\n    start_by='window'\n).agg(\n    pl.mean('Obs')\n)\n</code></pre> To be verified  Dynamic daily rolling statistic proportional to number of window observations, with right-aligned partial window of max n days  <pre><code>new_data = data.group_by_dynamic(\n    index_column='Date',\n    every='1d',\n    offset=f'-{n - 1}d',\n    period=f'{n - 1}d',\n    label='right',\n    closed='both',\n    start_by='window'\n).agg(\n    pl.sum('Hospitalized').alias('DaysHospitalized'),\n    pl.count()\n).with_columns(\n    Proportion=pl.col('DaysHospitalized') / pl.col('count')\n)\n</code></pre> To be verified  Daily rolling computation with left-aligned partial window of max n days  <pre><code>new_data = data.group_by_dynamic(\n    index_column='Date',\n    every='1d',\n    offset=f'-{n - 1}d',\n    period=f'{n - 1}d',\n    label='left',\n    closed='both',\n    start_by='datapoint'\n).agg(\n    pl.mean('Obs')\n)\n</code></pre> To be verified"},{"location":"python/polars/dataframe/#order","title":"Order","text":"Action Code Details  Reorder all columns in the given order  <pre><code>data.select(pl.col(['patient', 'sex', 'age']))\n</code></pre>  Reorder specific columns in a given order  <pre><code>cols = ['topic', 'parent', 'language']\ndata.select(pl.col(cols), pl.exclude(cols))\n</code></pre> There doesn't seem to be a shorter way to do this  Sort rows by column value  <pre><code>data.sort('col1')\n</code></pre>"},{"location":"python/polars/dataframe/#grow","title":"Grow","text":"<p>Transformations which increase the shape of the data frame</p> Action Code Details  Append constant numeric column  <pre><code>data.with_columns(Intercept=pl.lit(1))\n</code></pre>  Append series as new column  <pre><code>s = pl.Series(\"apple\", [10, 20, 30])\ndata.hstack([s])\n</code></pre> Note the brackets"},{"location":"python/polars/dataframe/#add-derived-columns","title":"Add derived column(s)","text":"Action Code Details  Transform another column  <pre><code>data.with_columns( ageSq = pl.col('age') ** 2 )\n</code></pre>  Transform another column  <pre><code>data.with_columns(\n    (pl.col('age') ** 2).alias('ageSq')\n)\n</code></pre>  Constant values conditional on another column  <pre><code>data.with_columns(\n    AdultScore=pl.when(pl.col('age') &gt;= 18).\n        then(pl.lit(1)).\n        otherwise(pl.lit(-1))\n)\n</code></pre>  Add multiple columns based on transformations of other columns  <pre><code>data.with_columns(\n    ageSq=pl.col('age') ** 2\n    hospitalizationsSq=pl.col('hospitalizations') ** 2\n)\n</code></pre>  Add multiple columns based on transformations of other columns  <pre><code>data.with_columns(\n    (pl.col('Age') ** 2).alias('Age2')\n    pl.col('Age').alias('Age3') ** 3\n)\n</code></pre> <code>alias()</code> can be called after <code>pl.col()</code>, may be more readable sometimes  Add multiple constant columns based on a dict  <pre><code>for k, v in dict.items():\n    data = data.with_columns(pl.lit(v).alias(k))\n</code></pre>"},{"location":"python/polars/dataframe/#integer-column-derivations","title":"Integer column derivations","text":"Action Code Details  Map integer values to strings, as categorical column  <pre><code>map = {1: 'first', 2: 'second', 3: 'third'}\ndata.with_columns(\n    rank=pl.col('place').replace_strict(map).cast(pl.Categorical)\n)\n</code></pre>  Timestamp (in seconds) since Unix epoch (1970-01-01), as datetime column  <pre><code>data.with_columns(\n    date=pl.from_epoch('timestamp')\n)\n</code></pre>  Milliseconds timestamp since Unix epoch, as datetime column  <pre><code>data.with_columns(\n    date=pl.from_epoch('timestamp_ms', time_unit='ms')\n)\n</code></pre>  Total days since Unix epoch, as date column  <pre><code>data.with_columns(\n    date=pl.from_epoch('daystamp', time_unit='d')\n)\n</code></pre>  Total days since Unix epoch, as date column  <pre><code>data.with_columns(\n    date=pl.col('daystamp').cast(pl.Date)\n)\n</code></pre>  Number of days since reference date, as date column  <pre><code>from datetime import date\nref_days = (x - date.fromtimestamp(0)).days\ndata.with_columns(\n    date=pl.col('day').cast(pl.Date) + pl.duration(days=ref_days)\n)\n</code></pre>  Number of days since reference date, as date column  <pre><code>from datetime import date\nref_days = (x - date.fromtimestamp(0)).days\ndata.with_columns(\n    date=(pl.col('day') + ref_days).cast(pl.Date)\n)\n</code></pre>"},{"location":"python/polars/dataframe/#string-column-derivations","title":"String column derivations","text":"Action Code Details  Parse string column to date  <pre><code>data.with_columns(\n    date=pl.col('datestring').str.to_date()\n)\n</code></pre>  Parse string column to date with known format  <pre><code>data.with_columns(\n    date = pl.col('datestring').str.to_date('%Y-%m-%d')\n)\n</code></pre>"},{"location":"python/polars/dataframe/#datetime-column-derivations","title":"Datetime column derivations","text":"Action Code Details  Weekday from date column  <pre><code>?\n</code></pre>  Month from date column  <pre><code>data.with_columns(\n    month=pl.col('date').dt.month()\n)\n</code></pre>  Year from date column  <pre><code>data.with_columns(\n    year=pl.col('Date').dt.year()\n)\n</code></pre>  Elapsed days between date ranges, by group  <pre><code>data.with_columns(\n    elapsedDays=(\n        pl.col('Date') - pl.col('Date').min().over('Subject')\n    ).dt.total_days().add(1)\n)\n</code></pre>"},{"location":"python/polars/dataframe/#add-rows","title":"Add rows","text":"Action Code Details  Add row as tuple  <pre><code>?\n</code></pre>  Add list of tuples  <pre><code>?\n</code></pre>  Add data frame  <pre><code>pl.concat(data, df2)\n</code></pre>"},{"location":"python/polars/dataframe/#shrink-the-data-frame","title":"Shrink the data frame","text":""},{"location":"python/polars/dataframe/#remove-one-or-more-columns","title":"Remove one or more columns","text":"Action Code Details  Remove single column  <pre><code>data.drop('Age')\n</code></pre>  Remove columns  <pre><code>data.drop(['Age', 'Sex'])\n</code></pre>  Remove columns  <pre><code>data.select(pl.exclude(['Age', 'Sex']))\n</code></pre>  Select single column  <pre><code>data.select('col1')\n</code></pre> Verbose  Select single column  <pre><code>data.select(pl.col('Age'))\n</code></pre>  Multiple columns  <pre><code>data.select('col1', 'col2')\n</code></pre>  Multiple columns, specified by list  <pre><code>data.select(['col1', 'col2'])\n</code></pre>  Multiple columns, specified by list  <pre><code>data.select(pl.col(['Age', 'Sex'])\n</code></pre>  Remove all numeric columns  <pre><code>data.drop(cs.numeric())\n</code></pre>"},{"location":"python/polars/dataframe/#remove-one-or-more-rows","title":"Remove one or more rows","text":"Action Code Details  Remove all rows (clear)  <pre><code>data.clear()\n</code></pre>  Limit query to first n rows  <pre><code>data.limit(n)\n</code></pre>  Limit query to last n rows  <pre><code>data.limit(-n)\n</code></pre>"},{"location":"python/polars/dataframe/#keep-rows","title":"Keep rows","text":"Action Code Details  Select i th row  <pre><code>data[i]\n</code></pre>  Select i th last row  <pre><code>data[-i]\n</code></pre>  Select rows by list of row numbers  <pre><code>data[rows]\n</code></pre>  First n rows (head)  <pre><code>data.head(n)\n</code></pre>  Last n rows (tail)  <pre><code>data.tail(n)\n</code></pre>  Slice of rows from a to b <pre><code>data[a:b]\n</code></pre>  Slice of rows from a to b <pre><code>data.slice(a, b)\n</code></pre>  Keep rows conditionally on column  <pre><code>data.filter(pl.col('age') &gt;= 18)\n</code></pre>  Keep rows based on multiple column conditions  <pre><code>data.filter(\n    (pl.col('age') &gt;= 18) &amp; (pl.col('sex') == 'male')\n)\n</code></pre>  Sample at most n rows  <pre><code>data.sample(n)\n</code></pre>  Sample n rows, with replacement  <pre><code>data.sample(n, with_replacement=True)\n</code></pre> Replicates some rows. The result is guaranteed to have n rows, even when the input contains fewer rows.  Sample n rows per group, with replacement  <pre><code>data.group_by('Patient').map_groups(\n    lambda df: df.sample(n, with_replacement=True)\n)\n</code></pre> Very slow due to the <code>map_groups()</code> call.  Sample at most n rows per group  <pre><code>data.filter(\n    pl.int_range(pl.len()).shuffle().over('patient') &lt; n\n)\n</code></pre> Groups with fewer than n rows keep all rows."},{"location":"python/polars/dataframe/#exclude-rows","title":"Exclude rows","text":"Action Code Details  Remove rows by row numbers  <pre><code>data.with_row_index().filter(\n    ~pl.col('index').is_in(rows)\n)\n</code></pre> Output contains additional column 'Index'  Remove all rows except the given row numbers  <pre><code>data[[1, 6]]\n</code></pre>  Remove all rows except the given row numbers  <pre><code>data.filter(pl.arange(0, pl.count()).is_in([1, 5, 7]))\n</code></pre>  Remove rows that contain null values  <pre><code>data.drop_nulls()\n</code></pre>  Remove rows that contain null values in certain columns  <pre><code>data.drop_nulls(['fruits', 'cars'])\n</code></pre>"},{"location":"python/polars/dataframe/#aggregate-rows","title":"Aggregate rows","text":""},{"location":"python/polars/dataframe/#by-group","title":"By group","text":"Action Code Details  Mean of column by group  <pre><code>data.group_by('sex').agg(pl.col('age').mean())\n</code></pre>"},{"location":"python/polars/dataframe/#reshape","title":"Reshape","text":"Action Code Details  From wide to long format  <pre><code>data.melt(id_vars='sex', value_vars=['a', 'b'])\n</code></pre>  To narrow format  <pre><code>data.explode(?)\n</code></pre> ?"},{"location":"python/polars/dataframe/#combine_1","title":"Combine","text":"Action Code Details  Concatenate rows of dataframes  <pre><code>pl.concat([df, df2, dfN])\n</code></pre>  Concatenate rows of dataframes, having partially overlapping columns  <pre><code>pl.concat([df, df2, dfN], how='diagonal')\n</code></pre>  Merge two data frames on the sorted key  <pre><code>data.merge(data2)\n</code></pre>  Inner join  <pre><code>data.join(data2, on=['sex', 'country'])\n</code></pre>  Left join  <pre><code>data.join(data2, on=['sex', 'country'], how='left')\n</code></pre>  Right join  <pre><code>data.join(data2, on=['sex', 'country'], how='right')\n</code></pre>  Outer (full) join  <pre><code>data.join(data2, on=['sex', 'country'], how='full')\n</code></pre>  Cross join  <pre><code>data.join(data2, on=['sex', 'country'], how='cross')\n</code></pre>  Semi join (one match per index)  <pre><code>data.join(data2, on=['sex', 'country'], how='semi')\n</code></pre>  Left anti join (exclude matches from table 2)  <pre><code>data.join(data2, on=['sex', 'country'], how='anti')\n</code></pre>"},{"location":"python/polars/dataframe/#convert","title":"Convert","text":"Action Code Details  To series (first column only)  <pre><code>data.to_series()\n</code></pre>  To <code>polars.LazyFrame</code> <pre><code>data.lazy()\n</code></pre>  To <code>pandas.DataFrame</code> <pre><code>data.to_pandas()\n</code></pre>  To list of series  <pre><code>data.get_columns()\n</code></pre>  Split into list of data frames based on column  <pre><code>data.partition_by('sex')\n</code></pre>  Split into list of data frames based on column tuples  <pre><code>data.partition_by('sex', 'country')\n</code></pre>  Split into dict of data frames based on column(s)  <pre><code>data.partition_by('sex', 'country', as_dict = True)\n</code></pre>  To CSV file  <pre><code>data.write_csv('derp.csv')\n</code></pre>  To Parquet file  <pre><code>data.write_parquet('derp.parquet')\n</code></pre>  To Arrow IPC or Feather  <pre><code>data.write_ipc('file.arrow')\n</code></pre>  To JSON  <pre><code>?\n</code></pre>  Write to clipboard, in TSV format  <pre><code>data.write_clipboard()\n</code></pre>"},{"location":"python/polars/dataframe/#show","title":"Show","text":""},{"location":"python/polars/series/","title":"Polars Series","text":""},{"location":"python/polars/series/#polars-series","title":"Polars Series","text":"<p>Code <pre><code>import polars as pl\n</code></pre></p>"},{"location":"python/polars/series/#create","title":"Create","text":"<p>Create a new Series</p>"},{"location":"python/polars/series/#create-empty-series","title":"Create empty series","text":"Action Code Details  Empty series (of object type)  <pre><code>pl.Series()\n</code></pre>  Empty boolean series  <pre><code>pl.Series(dtype=pl.Boolean)\n</code></pre>  Empty enum series  <pre><code>pl.Series(dtype=pl.Enum(['a', 'b', 'c']))\n</code></pre>  Empty categorical series without defined categories  <pre><code>pl.Series(dtype=pl.Categorical)\n</code></pre>  Empty int series  <pre><code>pl.Series(dtype=pl.Int64)\n</code></pre>  Empty float series  <pre><code>pl.Series(dtype=pl.Float64)\n</code></pre>  Empty date series  <pre><code>pl.Series(dtype=pl.Date)\n</code></pre>  Empty datetime series  <pre><code>pl.Series(dtype=pl.Datetime)\n</code></pre>  Empty list series  <pre><code>pl.Series(dtype=pl.List)\n</code></pre>  Empty list of floats series  <pre><code>pl.Series(dtype=pl.List(float))\n</code></pre>"},{"location":"python/polars/series/#create-series-of-constant-values","title":"Create series of constant values","text":"Action Code Details  Series of length n filled with nulls  <pre><code>pl.Series([None] * n)\n</code></pre>  Constant value v of length n <pre><code>pl.Series([v] * n)\n</code></pre>"},{"location":"python/polars/series/#create-list-series","title":"Create List series","text":"Action Code Details  Define list series with multiple list elements  <pre><code>pl.Series([[1], [2, 3], [])\n</code></pre>  Define scalar list series  <pre><code>pl.Series([[1, 2, 3]])\n</code></pre>  Create scalar list series from a list  <pre><code>x = [1, 2, 3]\npl.Series([x])\n</code></pre>  Create list series from a list of lists  <pre><code>x = [\n    [1, 2], [], [3, 4, 5], [6]\n]\npl.Series(x)\n</code></pre>"},{"location":"python/polars/series/#test","title":"Test","text":"Action Code Details  Is series or subclass  <pre><code>isinstance(x, pl.Series)\n</code></pre>  Is series and not subclass  <pre><code>type(x) is pl.Series\n</code></pre>  Empty  <pre><code>x.is_empty()\n</code></pre>  Not empty  <pre><code>not x.is_empty()\n</code></pre>  Has length n <pre><code>len(x) == n\n</code></pre>  Is boolean series  <pre><code>x.dtype == pl.Boolean\n</code></pre>  Is categorical series  <pre><code>x.dtype == pl.Categorical\n</code></pre>  Is enum series  <pre><code>x.dtype == pl.Enum\n</code></pre>  Is numeric series  <pre><code>x.dtype.is_numeric()\n</code></pre> For example, pl.Int8 or pl.Float64  Is integer series  <pre><code>x.dtype.is_integer()\n</code></pre>  Is unsigned integer series  <pre><code>x.dtype.is_unsigned_integer()\n</code></pre>  Is float series  <pre><code>x.dtype.is_float()\n</code></pre>  Is date series  <pre><code>x.dtype == pl.Date\n</code></pre>  Is datetime64 series  <pre><code>x.dtype == pl.Datetime\n</code></pre>  Is string series  <pre><code>x.dtype == pl.String\n</code></pre>  Is list series  <pre><code>x.dtype == pl.List\n</code></pre>  Is nested series (struct or list)  <pre><code>x.dtype.is_nested()\n</code></pre>  No duplicate elements (all unique)  <pre><code>x.is_unique().all()\n</code></pre>  Any duplicate elements  <pre><code>x.is_duplicated().any()\n</code></pre>  Contains null  <pre><code>x.has_nulls()\n</code></pre>  Contains only nulls  <pre><code>x.is_null().all()\n</code></pre>  Contains no nulls  <pre><code>not x.has_nulls()\n</code></pre>  Contains NaN  <pre><code>x.is_nan().any()\n</code></pre>  Contains no NaNs  <pre><code>x.is_not_nan().all()\n</code></pre>  Contains infinity  <pre><code>x.is_infinite().any()\n</code></pre>  Contains only finite values  <pre><code>x.is_finite().all()\n</code></pre>  Contains value v, ignoring nulls  <pre><code>v in x\n</code></pre>  Contains any of the values v1, v2, ignoring nulls  <pre><code>x.is_in([v1, v2]).any()\n</code></pre>  Does not contain value v <pre><code>v not in x\n</code></pre>  Are elements in increasing order  <pre><code>x.is_sorted()\n</code></pre> Presence of nulls can lead to unexpected behavior, as they need to come first.  Are elements in decreasing order  <pre><code>x.is_sorted(descending=True)\n</code></pre> Presence of nulls can lead to unexpected behavior, as they need to come first."},{"location":"python/polars/series/#test-boolean-series","title":"Test boolean series","text":"Action Code Details  All values are True  <pre><code>x.all()\n</code></pre>  All values are False  <pre><code>not x.any()\n</code></pre>"},{"location":"python/polars/series/#tests-for-string-series","title":"Tests for string series","text":"Action Code Details  Contains string s <pre><code>x.str.contains(s).any()\n</code></pre>"},{"location":"python/polars/series/#extract","title":"Extract","text":"Action Code Details  Number of elements  <pre><code>len(x)\n</code></pre>  Hash  <pre><code>hash(tuple(x))\n</code></pre>  Data type (dtype)  <pre><code>x.dtype\n</code></pre>  Number of unique elements, ignoring nulls  <pre><code>x.n_unique()\n</code></pre>  Smallest value, ignoring nulls  <pre><code>x.min()\n</code></pre>  Index of the smallest value, ignoring NAs  <pre><code>x.arg_min()\n</code></pre>  Greatest value, ignoring nulls  <pre><code>x.max()\n</code></pre>  Index of the greatest value, ignoring NAs  <pre><code>x.arg_max()\n</code></pre>  Count occurrence per value  <pre><code>x.value_counts()\n</code></pre>"},{"location":"python/polars/series/#type-specific-operations","title":"Type-specific operations","text":""},{"location":"python/polars/series/#enum","title":"Enum","text":""},{"location":"python/polars/series/#categorical","title":"Categorical","text":"Action Code Details  Get categories  <pre><code>x.cat.get_categories()\n</code></pre>"},{"location":"python/polars/series/#string","title":"String","text":""},{"location":"python/polars/series/#list","title":"List","text":"Action Code Details  Get length of each list element  <pre><code>x.list.len()\n</code></pre>  Get the _i_th item of each list element  <pre><code>x.list[i]\n</code></pre>"},{"location":"python/polars/series/#struct","title":"Struct","text":""},{"location":"python/polars/series/#derive","title":"Derive","text":""},{"location":"python/polars/series/#order","title":"Order","text":"Action Code Details  Reverse  <pre><code>x.reverse()\n</code></pre>  Sort ascendingly  <pre><code>x.sort()\n</code></pre> Nulls are placed first  Sort descendingly  <pre><code>x.sort(descending=True)\n</code></pre> Nulls are placed first  Shuffle  <pre><code>x.shuffle()\n</code></pre>"},{"location":"python/polars/series/#transform","title":"Transform","text":"Action Code Details  Fill null by value_v_  <pre><code>x.fill_null(value=v)\n</code></pre>  Fill NaN by value_v_  <pre><code>x.fill_nan(value=v)\n</code></pre>  Replace value v by w <pre><code>x.replace(v, w)\n</code></pre>  Replace value v by null  <pre><code>x.replace(v, None)\n</code></pre>  Map all values  <pre><code>x = pl.Series([1, 2, 3])\nx.replace_strict([1, 2, 3], [10, -2, -3])\n</code></pre>  Map all values using a <code>dict</code> <pre><code>x = pl.Series([1, 2, 3])\nx.replace_strict({1: 10, 2: -2, 3: -3})\n</code></pre>"},{"location":"python/polars/series/#mask","title":"Mask","text":"Action Code Details  Duplicate mask  <pre><code>x.is_duplicated()\n</code></pre>"},{"location":"python/polars/series/#cast-to-type","title":"Cast to type","text":"Action Code Details  Cast to boolean  <pre><code>x.cast(bool)\n</code></pre>  Cast series to numeric dtype  <pre><code>x.cast(float)\n</code></pre>  Cast to integer  <pre><code>x.cast(int)\n</code></pre>  Cast to float  <pre><code>x.cast(float)\n</code></pre>  Cast to string  <pre><code>x.cast(str)\n</code></pre>  Cast to categorical  <pre><code>x.cast(str).cast(pl.Categorical)\n</code></pre>  Cast categorical to integer codes  <pre><code>x.to_physical()\n</code></pre>  Cast to enum  <pre><code>x.cast(pl.Enum)\n</code></pre>  Cast enum to integer codes  <pre><code>x.to_physical()\n</code></pre>"},{"location":"python/polars/series/#grow","title":"Grow","text":""},{"location":"python/polars/series/#shrink","title":"Shrink","text":"Action Code Details  First n elements  <pre><code>x.head(n)\n</code></pre>  Last n elements  <pre><code>x.tail(n)\n</code></pre>  Slice  <pre><code>x[a:b]\n</code></pre>  Select n elements starting from index i <pre><code>x.slice(i, n)\n</code></pre>  Keep indices  <pre><code>x.gather([1, 3])\n</code></pre>  Keep every n_th element, starting from index _i <pre><code>x.gather_every(n, i)\n</code></pre>  Sample n elements  <pre><code>x.sample(n)\n</code></pre>  Drop null elements  <pre><code>x.drop_nulls()\n</code></pre>  Drop NaN elements  <pre><code>x.drop_nans()\n</code></pre>  Keep n largest elements  <pre><code>x.top_k(n)\n</code></pre>  Keep n smallest elements  <pre><code>x.bottom_k(n)\n</code></pre>  Remove duplicates  <pre><code>x.unique()\n</code></pre>"},{"location":"python/polars/series/#combine","title":"Combine","text":"Action Code Details  Append another series  <pre><code>x.append(y)\n</code></pre>"},{"location":"python/polars/series/#convert","title":"Convert","text":"Action Code Details  To list  <pre><code>x.to_list()\n</code></pre>  To list  <pre><code>list(x)\n</code></pre>  To numpy array  <pre><code>x.to_numpy()\n</code></pre>  To Polars data frame with single column  <pre><code>x.to_frame('col1')\n</code></pre>  To instantiatable string representation  <pre><code>x.to_init_repr()\n</code></pre>  Dummy encoding of values (as data frame)  <pre><code>x.to_dummies()\n</code></pre>"},{"location":"python/polars/types/","title":"Polars Types","text":""},{"location":"python/polars/types/#polars-types","title":"Polars Types","text":"<p>Code <pre><code>import polars as pl\n</code></pre></p>"},{"location":"python/polars/types/#enum","title":"Enum","text":""},{"location":"python/polars/types/#create","title":"Create","text":"Action Code Details  Define enum  <pre><code>pl.Enum(['a', 'b', 'c'])\n</code></pre>  Create enum from Literal  <pre><code>from typing import Literal\nLabels = Literal['a', 'b', 'c']\npl.Enum(Labels.__args__)\n</code></pre>"},{"location":"python/polars/types/#extract","title":"Extract","text":"Action Code Details  Get the enum categories  <pre><code>x.categories\n</code></pre>"},{"location":"python/polars/types/#list","title":"List","text":"<p>Variable-length list elements</p>"},{"location":"python/polars/types/#create_1","title":"Create","text":"Action Code Details  List with undefined inner elements type  <pre><code>pl.List\n</code></pre>  List of booleans  <pre><code>pl.list(bool)\n</code></pre>  List of integers  <pre><code>pl.list(int)\n</code></pre>  List of floats  <pre><code>pl.list(float)\n</code></pre>  List of strings  <pre><code>pl.list(str)\n</code></pre>"},{"location":"python/polars/types/#test","title":"Test","text":"Action Code Details  Test if type is list of numeric elements  <pre><code>x.inner.is_numeric()\n</code></pre>"},{"location":"python/polars/types/#extract_1","title":"Extract","text":"Action Code Details  Get inner elements type  <pre><code>x.inner\n</code></pre>"},{"location":"python/scalars/","title":"Scalars","text":""},{"location":"python/scalars/#scalars","title":"Scalars","text":""},{"location":"python/scalars/date/","title":"Date","text":""},{"location":"python/scalars/date/#date","title":"Date","text":"<p>Date representation</p> <p>Code <pre><code>from datetime import date\n</code></pre></p>"},{"location":"python/scalars/date/#create","title":"Create","text":"Action Code Details  From ymd  <pre><code>date(year, month, day)\n</code></pre>  Current date  <pre><code>date.today()\n</code></pre>  Unix epoch date  <pre><code>date.fromtimestamp(0)\n</code></pre>  Date from any valid ISO 8601 date string  <pre><code>date.fromisoformat(date_string)\n</code></pre> e.g., <code>2023-01-30</code> or <code>20230130</code>  Date from YYYY-MM-DD string  <pre><code>datetime.strptime(datetime_str, '%y-%m-%d').date()\n</code></pre>  Date from DD-MMM-YYYY string  <pre><code>datetime.strptime(datetime_str, '%d-%b-%y').date()\n</code></pre>  From total seconds since Unix epoch  <pre><code>date.fromtimestamp(n)\n</code></pre>  From total days since Unix epoch  <pre><code>date.fromtimestamp(0) + timedelta(n)\n</code></pre>  From total days since reference date  <pre><code>ref_date + timedelta(n)\n</code></pre>"},{"location":"python/scalars/date/#constants","title":"Constants","text":"Action Code Details  Earliest representable date  <pre><code>date.min\n</code></pre>  Latest representable date  <pre><code>date.max\n</code></pre>"},{"location":"python/scalars/date/#test","title":"Test","text":"Action Code Details  Is date  <pre><code>isinstance(x, datetime.date)\n</code></pre>  Same date  <pre><code>x == y\n</code></pre>  Happens before y <pre><code>x &lt; y\n</code></pre>  Happens after y <pre><code>x &gt; y\n</code></pre>"},{"location":"python/scalars/date/#extract","title":"Extract","text":"Action Code Details  Days from Unix epoch  <pre><code>(x - date.fromtimestamp(0)).days\n</code></pre>  Seconds from Unix epoch (timestamp)  <pre><code>(x - date.fromtimestamp(0)).total_seconds()\n</code></pre>  Year  <pre><code>x.year\n</code></pre>  Month  <pre><code>x.month\n</code></pre>  Day  <pre><code>x.day\n</code></pre>  Weekday number  <pre><code>x.isoweekday()\n</code></pre> Mon=1, Sun=7  Weekday number (zero-based)  <pre><code>x.weekday()\n</code></pre> Mon=0, Sun=6"},{"location":"python/scalars/date/#difference-between-dates","title":"Difference between dates","text":"Action Code Details  Difference between dates, as timedelta  <pre><code>x - y\n</code></pre>  Difference between dates, in seconds  <pre><code>(x - y).total_seconds()\n</code></pre>  Difference between dates, in whole days  <pre><code>?\n</code></pre>  Difference between dates, in years  <pre><code>x.year - y.year - ((x.month, x.day) &lt; (y.month, y.day))\n</code></pre>"},{"location":"python/scalars/date/#derive","title":"Derive","text":"Action Code Details  Shift forward by n days  <pre><code>x + timedelta(days=n)\n</code></pre>"},{"location":"python/scalars/date/#convert","title":"Convert","text":"Action Code Details  Datetime  <pre><code>?\n</code></pre>  Timestamp (Unix epoch)  <pre><code>(x - date.fromtimestamp(0)).total_seconds()\n</code></pre>  Format date as ISO 8601 <pre><code>x.isoformat()\n</code></pre> e.g., <code>2023-01-01</code>  Format date as YYYY-MM-DD  <pre><code>x.isoformat()\n</code></pre> e.g., 2024-01-31  Format datetime as DD-MMM-YYYY  <pre><code>x.strftime('%d-%b-%Y')\n</code></pre> e.g., <code>31-Jan-2023</code>  Format readable datetime of consistent length  <pre><code>x.ctime()\n</code></pre> e.g., <code>Sun Jan  1 23:59:00 2023</code>  Named tuple  <pre><code>x.timetuple()\n</code></pre>"},{"location":"python/scalars/datetime/","title":"Datetime","text":""},{"location":"python/scalars/datetime/#datetime","title":"Datetime","text":"<p>Datetime representation</p> <p>Code <pre><code>import datetime\n</code></pre></p>"},{"location":"python/scalars/datetime/#create","title":"Create","text":"Action Code Details  From ymdhms  <pre><code>datetime(year, month, day, hour, minute, second)\n</code></pre>  Current datetime  <pre><code>datetime.now()\n</code></pre>  Current datetime in UTC timezone  <pre><code>datetime.utcnow()\n</code></pre>  Unix epoch  <pre><code>datetime.fromtimestamp(0)\n</code></pre>  From date and time  <pre><code>datetime.combine(date, time)\n</code></pre>  Datetime from any valid ISO 8601 datetime string  <pre><code>datetime.fromisoformat(datetime_str)\n</code></pre> e.g. <code>2023-01-30 23:59</code>, <code>2023-01-30T23:59:01</code>  Datetime from YYYY-MM-DD HH:mm:ss  <pre><code>x.strptime('%y-%m-%d %H:%M:%S')\n</code></pre>  Datetime from string (unknown format)  <pre><code>pandas.to_datetime('2023 Jan 5')\n</code></pre> uses the pandas package  From total seconds since Unix epoch  <pre><code>datetime.fromtimestamp(n)\n</code></pre>  From total seconds since reference datetime  <pre><code>ref_datetime + timedelta(seconds=n)\n</code></pre>  From total days since Unix epoch  <pre><code>datetime.fromtimestamp(0) + timedelta(n)\n</code></pre>  From total days since reference datetime  <pre><code>ref_datetime + timedelta(n)\n</code></pre>"},{"location":"python/scalars/datetime/#constants","title":"Constants","text":"Action Code Details  Earliest representable datetime  <pre><code>datetime.min\n</code></pre>  Latest representable datetime  <pre><code>datetime.max\n</code></pre>"},{"location":"python/scalars/datetime/#test","title":"Test","text":"Action Code Details  Is datetime  <pre><code>isinstance(x, datetime.datetime)\n</code></pre>  Same moment  <pre><code>x == y\n</code></pre> Up to <code>x.resolution</code> precision (usually 1\u03bcs)  Happens before y <pre><code>x &lt; y\n</code></pre>  Happens after y <pre><code>x &gt; y\n</code></pre>"},{"location":"python/scalars/datetime/#extract","title":"Extract","text":"Action Code Details  Year  <pre><code>x.year\n</code></pre>  Month  <pre><code>x.month\n</code></pre>  Day  <pre><code>x.day\n</code></pre>  Hour  <pre><code>x.hour\n</code></pre>  Minute  <pre><code>x.minute\n</code></pre>  Second  <pre><code>x.second\n</code></pre>  Microsecond  <pre><code>x.microsecond\n</code></pre>  Weekday number  <pre><code>x.isoweekday()\n</code></pre> Mon=1, Sun=7  Weekday number (zero-based)  <pre><code>x.weekday()\n</code></pre> Mon=0, Sun=6"},{"location":"python/scalars/datetime/#derive","title":"Derive","text":"Action Code Details  Change to first day of year  <pre><code>x.replace(month=1, day=1)\n</code></pre>  Change to first day of month  <pre><code>x.replace(day=1)\n</code></pre>  Change year to y <pre><code>x.replace(year=y)\n</code></pre>  In UTC timezone  <pre><code>?\n</code></pre>  Shift forward by n days  <pre><code>x + timedelta(days=n)\n</code></pre>  Shift forward by n seconds  <pre><code>x + timedelta(seconds=n)\n</code></pre>"},{"location":"python/scalars/datetime/#convert","title":"Convert","text":"Action Code Details  Date component  <pre><code>x.date()\n</code></pre>  Time component  <pre><code>x.time()\n</code></pre>  Timestamp (seconds from Unix epoch), as float  <pre><code>x.timestamp()\n</code></pre>  Format datetime as ISO 8601 <pre><code>x.isoformat()\n</code></pre> e.g., <code>2023-01-01T23:59:00</code>  Format readable datetime of consistent length  <pre><code>x.ctime()\n</code></pre> e.g., <code>Sun Jan  1 23:59:00 2023</code>  Format datetime as YYYY-MM-DD  <pre><code>x.date().isoformat()\n</code></pre> e.g., 2024-01-31  Format datetime as DD-MMM-YYYY  <pre><code>x.strftime('%d-%b-%Y')\n</code></pre> e.g., <code>31-Jan-2023</code>  Format datetime as HH:mm  <pre><code>x.strftime('%H:%M')\n</code></pre> e.g., <code>23:59</code>  Format datetime as HH:mm:ss  <pre><code>x.strftime('%H:%M:%S')\n</code></pre> e.g., <code>23:59:00</code>  Format datetime as YYYY-MM-DD HH:mm:ss  <pre><code>x.strftime('%y-%m-%d %H:%M:%S')\n</code></pre>  Named tuple  <pre><code>x.timetuple()\n</code></pre>"},{"location":"python/scalars/float/","title":"Floats","text":"","tags":["float","number","double"]},{"location":"python/scalars/float/#floats","title":"Floats","text":"","tags":["float","number","double"]},{"location":"python/scalars/float/#constants","title":"Constants","text":"Action Code Details  NaN  <pre><code>math.nan\n</code></pre>  NaN  <pre><code>float('nan')\n</code></pre>  NaN  <pre><code>numpy.nan\n</code></pre>  Infinity  <pre><code>math.inf\n</code></pre>  Infinity  <pre><code>float('inf')\n</code></pre>  Infinity  <pre><code>numpy.inf\n</code></pre>  Negative infinity  <pre><code>-math.inf\n</code></pre>  Negative infinity  <pre><code>float('-inf')\n</code></pre>  Negative infinity  <pre><code>numpy.NINF\n</code></pre>  Pi  <pre><code>math.pi\n</code></pre>  e  <pre><code>math.e\n</code></pre>  Float epsilon (smallest representable difference)  <pre><code>sys.float_info.epsilon\n</code></pre>  Min float  <pre><code>sys.float_info.min\n</code></pre>  Max float  <pre><code>sys.float_info.max\n</code></pre>","tags":["float","number","double"]},{"location":"python/scalars/float/#create","title":"Create","text":"<p><code>float()</code> throws <code>ValueError</code> if the input cannot be parsed</p> Action Code Details  Float from string  <pre><code>float(x)\n</code></pre> Throws ValueError if string cannot be parsed  Float from hex string representation  <pre><code>float.fromhex(x)\n</code></pre>  Float from string for locale  <pre><code>locale.atof(x)\n</code></pre>  Float from string for temporary locale  <pre><code>Babel.parse_decimal('1,25', locale='nl_NL.utf8')\n</code></pre> No way to do this cleanly and thread-safe in standard Python...  Float from string for temporary locale  <pre><code>loc = locale.getlocale(locale.LC_NUMERIC)\nlocale.setlocale(locale.LC_NUMERIC, 'nl_NL')\nf = locale.atof(x)\nlocale.setlocale(locale.LC_NUMERIC, loc)\n</code></pre>  Float from packed struct bytes  <pre><code>struct.unpack('f', x)[0] | e.g., b'x00x00 @'\n</code></pre>","tags":["float","number","double"]},{"location":"python/scalars/float/#test","title":"Test","text":"Action Code Details  Whole number  <pre><code>float.is_integer(x)\n</code></pre> e.g., True for 5.0  Approximately equal  <pre><code>math.isclose(x, y)\n</code></pre> Uses proportional tolerance  Approximately equal with proportional tolerance tol%  <pre><code>math.isclose(x, y, rel_tol=tol)\n</code></pre>  Approximately equal with absolute tolerance tol <pre><code>math.isclose(x, y, abs_tol=tol)\n</code></pre>  NaN  <pre><code>math.isnan(x)\n</code></pre> Does not work for complex numbers (?)  Finite  <pre><code>math.isfinite(x)\n</code></pre>  Infinite  <pre><code>math.isinf(x)\n</code></pre>  Positive infinity  <pre><code>math.isinf(x) and x &gt; 0\n</code></pre>  Negative infinity  <pre><code>math.isinf(x) and x &lt; 0\n</code></pre>","tags":["float","number","double"]},{"location":"python/scalars/float/#extract","title":"Extract","text":"Action Code Details  Hash  <pre><code>hash(x)\n</code></pre>","tags":["float","number","double"]},{"location":"python/scalars/float/#convert","title":"Convert","text":"Action Code Details  To string  <pre><code>str(x)\n</code></pre>  To string, with comma as thousands separator  <pre><code>f'{x:,}'\n</code></pre>  To string according to locale  <pre><code>import locale\nlocale.str(float)\n</code></pre> E.g., different decimal symbol  To hex string representation  <pre><code>x.hex()\n</code></pre> Format: <code>[sign] ['0x'] integer ['.' fraction] ['p' exponent]</code>, e.g., <code>0x1.400000p+1</code>  To bytes  <pre><code>struct.pack('f', x)\n</code></pre>","tags":["float","number","double"]},{"location":"python/scalars/int/","title":"Integers","text":"","tags":["int","integer","number"]},{"location":"python/scalars/int/#integers","title":"Integers","text":"","tags":["int","integer","number"]},{"location":"python/scalars/int/#constants","title":"Constants","text":"Action Code Details  Min int  <pre><code>-sys.maxsize\n</code></pre>  Max int  <pre><code>sys.maxsize\n</code></pre>","tags":["int","integer","number"]},{"location":"python/scalars/int/#create","title":"Create","text":"<p><code>int()</code> throws <code>ValueError</code> if the input cannot be parsed</p> Action Code Details  Define integer  <pre><code>x = 10\n</code></pre> Cannot contain decimal values or result will be <code>float</code>.  Define integer from scientific notation  <pre><code>x = int(1e6)\n</code></pre> Cast is needed otherwise result is <code>float</code>  Binary integer  <pre><code>[sign]0b[b2int]\n</code></pre> -0b10 (-2)  Hex integer  <pre><code>[sign]0x[b16int]\n</code></pre> e.g., -0xF (-16)  Integer from string  <pre><code>int(x)\n</code></pre>  Integer from hex string (base 16)  <pre><code>int(x, 16)\n</code></pre> e.g., DEADBEEF  Integer from string with base determined by prefix  <pre><code>int(x, 0)\n</code></pre> Base 10 by default, base-16 for 0x, base-2 for 0b  Integer from string according to locale  <pre><code>locale.atoi(x)\n</code></pre>  Unsigned integer from bytes  <pre><code>int.from_bytes(x, byteorder='big')\n</code></pre>  Signed integer from bytes  <pre><code>int.from_bytes(x, byteorder='big', signed=True)\n</code></pre>","tags":["int","integer","number"]},{"location":"python/scalars/int/#test","title":"Test","text":"Action Code Details  Is integer  <pre><code>type(x) is int\n</code></pre>","tags":["int","integer","number"]},{"location":"python/scalars/int/#extract","title":"Extract","text":"Action Code Details  Hash  <pre><code>hash(x)\n</code></pre>","tags":["int","integer","number"]},{"location":"python/scalars/int/#convert","title":"Convert","text":"Action Code Details  To string  <pre><code>str(x)\n</code></pre>  To string, with comma as thousands separator  <pre><code>f'{x:,}'\n</code></pre>  To hex string  <pre><code>hex(x)\n</code></pre> Format: `[sign] ['0x'] integer  To bytes  <pre><code>x.to_bytes(8, byteorder='big')\n</code></pre> <code>OverflowError</code> is raised if the integer is not representable with the given number of bytes  To bytes  <pre><code>x.to_bytes(8, byteorder='big', signed=True)\n</code></pre>  Count to byte array (mutable)  <pre><code>bytearray(x)\n</code></pre>","tags":["int","integer","number"]},{"location":"python/scalars/str/","title":"String","text":"","tags":["string","chars"]},{"location":"python/scalars/str/#string","title":"String","text":"<p>String handling</p> <p>Code <pre><code>import string\n</code></pre></p>","tags":["string","chars"]},{"location":"python/scalars/str/#constants","title":"Constants","text":"Action Code Details  Lowercase and uppercase letters  <pre><code>string.ascii_letters\n</code></pre> abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ  Lowercase letters  <pre><code>string.ascii_lowercase\n</code></pre> abcdefghijklmnopqrstuvwxyz  Uppercase letters  <pre><code>string.ascii_uppercase\n</code></pre> ABCDEFGHIJKLMNOPQRSTUVWXYZ  Digits  <pre><code>string.digits\n</code></pre> 0123456789  Hexadecimal digits  <pre><code>string.hexdigits\n</code></pre> 0123456789abcdefABCDEF  Whitespace characters  <pre><code>string.whitespace\n</code></pre> Includes space, tab, linefeed, return, formfeed, and vertical tab.  Punctuation characters  <pre><code>string.punctuation\n</code></pre> !\"#$%&amp;'()*+,-./:;&lt;=&gt;?@[]^_`{|}~  Printable characters  <pre><code>string.printable\n</code></pre> Combination of digits, letters, punctuation, and whitespace.","tags":["string","chars"]},{"location":"python/scalars/str/#create","title":"Create","text":"Action Code Details  Empty  <pre><code>''\n</code></pre>  Literal  <pre><code>'hello world'\n</code></pre>  Literals (concatenate)  <pre><code>'a' 'b' 'c'\n</code></pre>  Random lowercase string of length n <pre><code>''.join(random.choices(string.ascii_lowercase + string.digits, k=n))\n</code></pre>  Random alphanumeric string of length n <pre><code>''.join(random.choices(string.ascii_lowercase + string.digits, k=n))\n</code></pre>  From list, separated by comma  <pre><code>','.join(['a', 'b'])\n</code></pre>  Object to string  <pre><code>str(x)\n</code></pre>  Positional formatting  <pre><code>'First {0} then {1}'.format(1 + 1, 2 * 2)\n</code></pre>  Named formatting  <pre><code>'First {sum} then {mult}'.format(sum = 1 + 1, mult = 2 * 2)\n</code></pre>  Named element formatting  <pre><code>'a0 = {a[0]}'.format(a=[1,2])\n</code></pre>  Named attribute formatting  <pre><code>'Instance is of type: {p.type}'.format(p=Prop)\n</code></pre>  Named formatting of whole number  <pre><code>'a = '{num:,}'.format(num = int_var)\n</code></pre>  Dynamic formatting based on dict  <pre><code>'Value of a and b is {a} and {b}'.format_map(dict(a=1, b=2))\n</code></pre>  Whole number  <pre><code>'a = {:d}'.format(3)\n</code></pre>  Whole number with thousands separator  <pre><code>'a = {:,d}'.format(1000)\n</code></pre> Outputs '1,000'  Padded whole number  <pre><code>'a = {:3d}'.format(3)\n</code></pre> Outputs '  3'  Zero-padded whole number  <pre><code>'a = {:03d}'.format(3)\n</code></pre> Outputs '003'  Float  <pre><code>'a = {:f}'.format(3.14)\n</code></pre>  Float as whole number  <pre><code>'a = {:.0f}'.format(3.14)\n</code></pre> Outputs '3'  Float with decimal-point padding  <pre><code>'a = {:06.2f}'.format(3.1234)\n</code></pre>  Datetime with format  <pre><code>'{:%Y-%m-%d %H:%M}'.format(datetime(2001, 2, 3, 4, 5))\n</code></pre>","tags":["string","chars"]},{"location":"python/scalars/str/#test","title":"Test","text":"Action Code Details  Is str  <pre><code>type(x) is str\n</code></pre>  Is string (str or subclass)  <pre><code>isinstance(x, str)\n</code></pre>  Empty  <pre><code>not x\n</code></pre>  Not empty  <pre><code>x\n</code></pre>  Equal  <pre><code>x == y\n</code></pre>  Contains substring  <pre><code>substr in x\n</code></pre>  Letters only  <pre><code>x.isalpha()\n</code></pre>  Digits only  <pre><code>x.isdigit()\n</code></pre>  Alphanumeric characters only  <pre><code>x.isalnum()\n</code></pre>  Does not contain substring  <pre><code>substr not in x\n</code></pre>  Starts with  <pre><code>x.startswith(prefix)\n</code></pre>  Ends with  <pre><code>x.endswith(suffix)\n</code></pre>  Matches regex pattern  <pre><code>bool(re.search('\\w', 'abc'))\n</code></pre>  Contains n regex substrings  <pre><code>len(re.findall('\\w', 'a. a')) == n\n</code></pre>","tags":["string","chars"]},{"location":"python/scalars/str/#extract","title":"Extract","text":"Action Code Details  Number of characters (length)  <pre><code>len(x)\n</code></pre> ? how is this handled for unicode ?  Session hash  <pre><code>hash(x)\n</code></pre>  Find first index of substring  <pre><code>x.index(substr)\n</code></pre> Raises error if not found  Try find index of substring  <pre><code>x.find(substr)\n</code></pre>  Try find last index of substring  <pre><code>x.rfind(substr)\n</code></pre>  Count number of non-overlapping substring occurrences  <pre><code>x.count(substr)\n</code></pre>  Count number of non-overlapping substring occurrences in range [n, m]  <pre><code>x.count(substr, n, m)\n</code></pre>","tags":["string","chars"]},{"location":"python/scalars/str/#derive","title":"Derive","text":"Action Code Details  Remove substring  <pre><code>?\n</code></pre>  Remove regex group pattern  <pre><code>?\n</code></pre>","tags":["string","chars"]},{"location":"python/scalars/str/#transform-the-string-whilst-preserving-length","title":"Transform the string whilst preserving length","text":"Action Code Details  Lower case  <pre><code>x.lower()\n</code></pre>  Upper case  <pre><code>x.upper()\n</code></pre>  Capitalize  <pre><code>x.capitalize()\n</code></pre>  Map from dict  <pre><code>{'yes': 'ja', 'no': 'nee'}[x]\n</code></pre>","tags":["string","chars"]},{"location":"python/scalars/str/#order","title":"Order","text":"Action Code Details  Reverse characters  <pre><code>x[::-1]\n</code></pre>","tags":["string","chars"]},{"location":"python/scalars/str/#expand-string","title":"Expand string","text":"Action Code Details  Left-pad to length n <pre><code>x.ljust(n)\n</code></pre>  Right-pad to length n <pre><code>x.rjust(n)\n</code></pre>  Left-right padding to length n <pre><code>x.center(n)\n</code></pre>  Replicate n times  <pre><code>x * n\n</code></pre>  Concatenate  <pre><code>x + y\n</code></pre>  Join with iterable  <pre><code>x.join(iter)\n</code></pre>","tags":["string","chars"]},{"location":"python/scalars/str/#substring","title":"Substring","text":"Action Code Details  First character  <pre><code>x[0]\n</code></pre>  _i_th character  <pre><code>x[i]\n</code></pre> Index beyond length will raise error  Last character  <pre><code>x[-1]\n</code></pre>  Substring (slice)  <pre><code>x[2:3]\n</code></pre>  First n characters  <pre><code>x[:n]\n</code></pre>  Last n characters  <pre><code>x[-n:]\n</code></pre>  Strip leading whitespace  <pre><code>x.strip()\n</code></pre>  Strip leading characters  <pre><code>x.strip('abc')\n</code></pre>  Remove prefix  <pre><code>x.removeprefix(y)\n</code></pre>  Remove suffix  <pre><code>x.removesuffix(y)\n</code></pre>  Substring up to first occurrence of y <pre><code>x.split(y)[0]\n</code></pre> y is excluded  Substring up to first line break  <pre><code>x.split('\\n')[0]\n</code></pre> Line break is excluded","tags":["string","chars"]},{"location":"python/scalars/str/#combine","title":"Combine","text":"Action Code Details  Concatenate strings  <pre><code>x + y\n</code></pre>","tags":["string","chars"]},{"location":"python/scalars/str/#convert","title":"Convert","text":"Action Code Details  To bytes  <pre><code>x.encode()\n</code></pre>  Parse as integer  <pre><code>int(x)\n</code></pre>  Parse as float  <pre><code>float(x)\n</code></pre>  Parse date (unknown format)  <pre><code>pandas.to_datetime('2023 Jan 5')\n</code></pre>  To date from YY-MM-DD format  <pre><code>datetime.strptime('2023-12-31', '%Y-%m-%d')\n</code></pre>","tags":["string","chars"]},{"location":"python/scalars/str/#convert-to-list-of-substrings","title":"Convert to list of substrings","text":"Action Code Details  Split string into two parts by separator (as triplet)  <pre><code>x.partition(sep)\n</code></pre>  Split string into multiple parts by separator sep (as list)  <pre><code>x.split(sep)\n</code></pre>  Split string into lines (as list)  <pre><code>x.splitlines()\n</code></pre>  Split string into cumulative parts by separator sep (as list)  <pre><code>list(itertools.accumulate(x.split(sep), lambda x, y: sep.join([x, y])))\n</code></pre> For <code>sep='.'</code>, <code>a.b.c</code> becomes <code>[a, a.b, a.b.c]</code>","tags":["string","chars"]},{"location":"python/scalars/time/","title":"Time","text":""},{"location":"python/scalars/time/#time","title":"Time","text":"<p>Time representation</p> <p>Code <pre><code>from datetime import time\n</code></pre></p>"},{"location":"python/scalars/time/#create","title":"Create","text":"Action Code Details  From hms  <pre><code>time(hour, minute, second)\n</code></pre>  Current time  <pre><code>datetime.now().time()\n</code></pre>  Time from any valid ISO 8601 time string  <pre><code>time.fromisoformat(time_str)\n</code></pre> e.g. <code>23:59:01</code>  From total seconds since start of day  <pre><code>(datetime.min + timedelta(seconds=7321.5)).time()\n</code></pre>"},{"location":"python/scalars/time/#constants","title":"Constants","text":"Action Code Details  Latest representable time  <pre><code>time.max\n</code></pre>"},{"location":"python/scalars/time/#test","title":"Test","text":"Action Code Details  Is time  <pre><code>isinstance(x, datetime.time)\n</code></pre>  Same moment in time  <pre><code>x == y\n</code></pre> Up to <code>x.resolution</code> precision (usually 1\u03bcs)  Happens before y <pre><code>x &lt; y\n</code></pre>  Happens after y <pre><code>x &gt; y\n</code></pre>"},{"location":"python/scalars/time/#extract","title":"Extract","text":"Action Code Details  Hour  <pre><code>x.hour\n</code></pre>  Minute  <pre><code>x.minute\n</code></pre>  Second  <pre><code>x.second\n</code></pre>  Microsecond  <pre><code>x.microsecond\n</code></pre>  Smallest representable time difference  <pre><code>time.resolution\n</code></pre>"},{"location":"python/scalars/time/#convert","title":"Convert","text":"Action Code Details  Total seconds  <pre><code>?\n</code></pre>  Format time as ISO 8601 <pre><code>x.isoformat()\n</code></pre> e.g., <code>23:59:00</code>  Format datetime as HH:mm  <pre><code>x.strftime('%H:%M')\n</code></pre> e.g., <code>23:59</code>  Format datetime as HH:mm:ss  <pre><code>x.strftime('%H:%M:%S')\n</code></pre> e.g., <code>23:59:00</code>  Format readable datetime of consistent length  <pre><code>x.ctime()\n</code></pre> e.g., <code>Sun Jan  1 23:59:00 2023</code>  Named tuple  <pre><code>x.timetuple()\n</code></pre>"},{"location":"r/","title":"R","text":""},{"location":"r/#r","title":"R","text":"<p>R is an easy-to-learn high-level programming language especially tailored to data science applications.</p> <p>Pros:</p> <ul> <li>Easy to learn</li> <li>High-level</li> <li>Dynamically typed</li> <li>Dynamic evaluation, enabling powerful functions and more readable specification of formulas and models</li> <li>Very reliable ecosystem, compared to Python.   Packages need to meet many requirements and demonstrate compatibility with dependencies.</li> <li>High-quality data science packages</li> <li>Large community and help sources</li> <li>Rapid prototyping</li> <li>Excellent glue language</li> <li>Many packages interface with C or other fast languages to achieve performant code</li> <li>Interoperable with many other languages</li> <li>Reliable and standardized tooling</li> <li>Fluent inferface: supports chaining functions, yielding much more readable analysis scripts.</li> <li>Excellent notebook support</li> <li>Native vector/matrix support in the language</li> <li>Good documention: functions are generally well-documented and include code examples.</li> </ul> <p>Cons:</p> <ul> <li>Lack of proper namespaces: you are guaranteed to stumble into import order conflicts or naming conflicts.</li> <li>Cryptic error messages: R's standard error messages are very confusing. The inconsistent/unreadable stack trace does not help either.</li> <li>Confusing object-oriented systems: there are at least three systems for implementing object-oriented programming to some degree (S3, S4, R6). Enough said.</li> <li>Inconsistent standard library: Quite a learning hurdle to get over.</li> <li>Dot operator: increases the flexibility of functions, but documentation of options is often severely lacking.</li> <li>Very slow: This is not a deal-breaker though for a glue/scripting language, and for prototyping purposes.</li> <li>Dynamic evaluation: A powerful feature, but is very confusing to new users, and difficult to implement for advanced users.</li> <li>Environments: generally confusing for users, and can lead to fun surprising (serializing a simple linear formula resulting in a 10 GB file).</li> <li>Dynamically typed: great for rapid prototyping, not for large frameworks.</li> </ul>"},{"location":"r/#sourcing","title":"Sourcing","text":"<p>Running an R script</p> Action Code Details  Run R script file  <pre><code>source('file.R')\n</code></pre>  Get sourced file from within script  <pre><code>as.character(sys.call(1))[2]\n</code></pre> Does not work during start-up!  Get sourced directory from within script  <pre><code>dirname(as.character(sys.call(1))[2])\n</code></pre>"},{"location":"r/#options","title":"Options","text":"Action Code Details  Enable debug (browse) on error  <pre><code>options(error=recover)\n</code></pre>  Treat warnings as errors  <pre><code>options(warn=2)\n</code></pre>  More concise (readable) traceback  <pre><code>options(error=function() traceback(max.lines=3))\n</code></pre>  Disable scientific notation  <pre><code>options(scipen=999)\n</code></pre>"},{"location":"r/#version-checks","title":"Version checks","text":"Action Code Details  Run code conditional on R version being later or equal than the given version number  <pre><code>if (compareVersion(paste(version$major, version$minor, sep='.'), '3.6.0') &gt;= 0)\n</code></pre>"},{"location":"r/#random-number-generation","title":"Random number generation","text":"Action Code Details  Use legacy RNG (R&lt;3.6) for newer R versions  <pre><code>if (compareVersion(\n    paste(version$major, version$minor, sep='.'),\n    '3.6.0') &gt;= 0\n) {\n    RNGkind(sample.kind='Rounding')\n}\n</code></pre> A fix to reproduce RNG of R 3.5.0, for reproducing old results"},{"location":"r/#output","title":"Output","text":"Action Code Details  Output object  <pre><code>cat(x)\n</code></pre>  Output string  <pre><code>cat('hello')\n</code></pre>  Print object  <pre><code>print(x)\n</code></pre>  Print string  <pre><code>print('hello')\n</code></pre>  Show message  <pre><code>message('msg')\n</code></pre>  Show warning  <pre><code>warning('warning')\n</code></pre>  Show warning right now  <pre><code>warning('warning', .immediate=TRUE)\n</code></pre>  Trigger and show error  <pre><code>stop('this is serious')\n</code></pre>  Redirect output to file  <pre><code>sink('log.txt')\n</code></pre> Use sink() to restore  Capture any output as string  <pre><code>txt = capture.output({...})\n</code></pre>  Suppress all output  <pre><code>capture.output({...})\n</code></pre>  Suppress automatic printing of object in interactive mode  <pre><code>invisible(x)\n</code></pre>  Suppress all output  <pre><code>sink('nul:')\n</code></pre> '/dev/null' on linux?  Suppress messages  <pre><code>suppressMessages({...})\n</code></pre>  Suppress package messages on load  <pre><code>suppressPackageStartupMessages({...})\n</code></pre>  Suppress warnings  <pre><code>suppressWarnings({...})\n</code></pre>"},{"location":"r/basic/","title":"Basic datatypes","text":""},{"location":"r/basic/#basic-datatypes","title":"Basic datatypes","text":""},{"location":"r/basic/factor/","title":"factor","text":""},{"location":"r/basic/factor/#factor","title":"factor","text":"<p>For representing categorical data with a finite number of options (levels)</p>"},{"location":"r/basic/factor/#create","title":"Create","text":"Action Code Details  From vector  <pre><code>factor(x)\n</code></pre>  From vector, with renamed levels  <pre><code>factor(x, levels=1:3, labels=LETTERS[1:3]\n</code></pre>  Generate by pattern  <pre><code>gl(5, 2, labels=LETTERS[1:5])\n</code></pre>  Generate factor of interactions with another  <pre><code>interaction(f1, f2)\n</code></pre>  Combine factors  <pre><code>factor(c(as.character(x), as.character(y)), union(levels(x), levels(y)))\n</code></pre>"},{"location":"r/basic/factor/#test","title":"Test","text":"Action Code Details  Is factor  <pre><code>is.factor(x)\n</code></pre>  Contains value v <pre><code>v %in% f\n</code></pre>  Contains <code>NA</code> value (not as level)  <pre><code>anyNA(f)\n</code></pre>  Contains <code>NA</code> (as <code>&lt;NA&gt;</code> level)  <pre><code>NA %in% f\n</code></pre> <code>anyNA(f)</code> does not work!  Contains level named v <pre><code>v %in% levels(f)\n</code></pre>  Contains <code>&lt;NA&gt;</code> level  <pre><code>anyNA(levels(f))\n</code></pre>"},{"location":"r/basic/factor/#extract","title":"Extract","text":"Action Code Details  Levels  <pre><code>levels(f)\n</code></pre>  Number of levels  <pre><code>nlevels(f)\n</code></pre>  Levels, as factor, and in order  <pre><code>factor(levels(f), levels(f))\n</code></pre>  Used levels, as factor, and in order  <pre><code>sort(unique(f))\n</code></pre> Useful for generating reference categorical newdata for <code>predict()</code>"},{"location":"r/basic/factor/#derive","title":"Derive","text":"Action Code Details  Remap categories / values  <pre><code>x = factor(c('a1', 'b1', 'a2', 'c1'))\nfactor(x, levels=levels(x), labels=c('a', 'a', 'b', 'c'))\n</code></pre>"},{"location":"r/basic/factor/#alter-levels","title":"Alter levels","text":"Action Code Details  Add NA as a factor level  <pre><code>f = addNA(f)\n</code></pre>  Add NA as a factor level if needed (NAs present)  <pre><code>f = addNA(f, ifany = TRUE)\n</code></pre>  Drop specific factor levels  <pre><code>droplevels(f, exclude=X)\n</code></pre>  Drop factor levels except specific  <pre><code>droplevels(f, except=X)\n</code></pre>  Drop unused factors levels  <pre><code>factor(f)\n</code></pre>"},{"location":"r/basic/factor/#shrink","title":"Shrink","text":"Action Code Details  Subset, drop unused levels  <pre><code>f[1:2, drop=TRUE]\n</code></pre>"},{"location":"r/basic/factor/#grow","title":"Grow","text":""},{"location":"r/basic/factor/#join","title":"Join","text":"Action Code Details  Combine factors  <pre><code>c(x, y)\n</code></pre> Resulting factor has levels that are a union of the original levels"},{"location":"r/basic/factor/#convert","title":"Convert","text":"Action Code Details  To vector of strings  <pre><code>as.character(x)\n</code></pre>  To vector of level indices  <pre><code>as.numeric(x)\n</code></pre>  To vector of level indices  <pre><code>as.integer(x)\n</code></pre>  To ordered factor  <pre><code>as.ordered(x)\n</code></pre>"},{"location":"r/basic/integer/","title":"integer","text":""},{"location":"r/basic/integer/#integer","title":"integer","text":"<p>For representing integer values</p>"},{"location":"r/basic/integer/#constants","title":"Constants","text":"Action Code Details  Min integer  <pre><code>.Machine$integer.min\n</code></pre>  Max integer  <pre><code>.Machine$integer.max\n</code></pre>  Missing value (<code>NA</code>)  <pre><code>NA_integer_\n</code></pre>"},{"location":"r/basic/integer/#create","title":"Create","text":"Action Code Details  Empty integer vector, length 0  <pre><code>integer()\n</code></pre>"},{"location":"r/basic/integer/#integer-vectors","title":"Integer vectors","text":"Action Code Details  Integer vector of zeros, length n <pre><code>integer(n)\n</code></pre>  Cast to integer  <pre><code>as.integer(y)\n</code></pre>  Parse string to integer  <pre><code>as.integer(y)\n</code></pre> Parse failures return <code>NA</code>"},{"location":"r/basic/integer/#test","title":"Test","text":"Action Code Details  Is integer  <pre><code>is.integer(x)\n</code></pre>"},{"location":"r/basic/integer/#integer-vectors_1","title":"Integer vectors","text":"Action Code Details  Vectors are pairwise equal (no <code>NA</code>s present)  <pre><code>all(x == y)\n</code></pre>  All elements are equal (no <code>NA</code>s present)  <pre><code>min(x) == max(x)\n</code></pre>  All elements are equal, igorning <code>NA</code>s)  <pre><code>min(x, na.rm = TRUE) == max(x, na.rm = TRUE)\n</code></pre>"},{"location":"r/basic/integer/#convert","title":"Convert","text":"Action Code Details  To numeric  <pre><code>as.numeric(x)\n</code></pre>"},{"location":"r/basic/integer/#format-as-string","title":"Format as string","text":"Action Code Details  To character  <pre><code>as.character(x)\n</code></pre>  Format with thousands separator (comma)  <pre><code>scales::comma(x)\n</code></pre>  Format with sign prefix  <pre><code>formatC(x, format = 'fg', flag = '+')\n</code></pre>"},{"location":"r/basic/list/","title":"list","text":""},{"location":"r/basic/list/#list","title":"list","text":"<p>For representing a list of arbitrary objects</p>"},{"location":"r/basic/list/#create","title":"Create","text":"Action Code Details  Empty list  <pre><code>list()\n</code></pre>  List with single element  <pre><code>list('hello')\n</code></pre>  Define list  <pre><code>list(1, 'a', third = c(1, 2))\n</code></pre>  List of <code>NULL</code> values, length n <pre><code>vector('list', length = n)\n</code></pre>  List of repeated scalar value v, repeated n times  <pre><code>rep(v, n) |&gt; as.list()\n</code></pre> Only works for scalar (length 1) input  List of repeated object obj, repeated n times  <pre><code>replicate(n, obj, simplify = FALSE)\n</code></pre> Also works for vector objects  From vector  <pre><code>as.list(vec)\n</code></pre>  From string, character per element  <pre><code>strsplit('hello', '')[[1]] |&gt; as.list()\n</code></pre>  From <code>data.frame</code>, as a named list of column vectors  <pre><code>as.list(df)\n</code></pre>  From <code>data.frame</code>, as a list of row vectors  <pre><code>split(df, seq(nrow(df)))\n</code></pre>  From environment, as name-value pairs  <pre><code>as.list(env)\n</code></pre>"},{"location":"r/basic/list/#test","title":"Test","text":"Action Code Details  Is list or subclass  <pre><code>is.list(x)\n</code></pre> Also <code>TRUE</code> for <code>data.frame</code> and other list-based data structures  Is list and not subclass  <pre><code>is(x, 'list')\n</code></pre>  Empty  <pre><code>length(x) == 0\n</code></pre>  Not empty  <pre><code>length(x) &gt; 0\n</code></pre>  Not empty  <pre><code>assertthat::not_empty(x)\n</code></pre>  Pairwise equal to another list  <pre><code>identical(x, y)\n</code></pre>  Pairwise equal to another list  <pre><code>all.equal(x, y) |&gt; isTRUE()\n</code></pre>  Contains <code>NULL</code> <pre><code>sapply(x, is.null) |&gt; any()\n</code></pre>  Contains <code>NULL</code> <pre><code>vapply(x, is.null, FUN.VALUE = TRUE) |&gt; any()\n</code></pre> Fastest  Contains <code>NULL</code> <pre><code>list(NULL) %in% x\n</code></pre> Slowest  Contains element e <pre><code>e %in% x\n</code></pre>  Contains specific scalar elements  <pre><code>all(c(1, 2) %in% x)\n</code></pre>  Contains specific objects  <pre><code>all(list(1, 2) %in% x)\n</code></pre>  Does not contain element e <pre><code>not(e %in% x)\n</code></pre>  Elements are all of type t <pre><code>sapply(x, is.numeric) |&gt; all()\n</code></pre>  No duplicate elements  <pre><code>len(x) == len(unique(x))\n</code></pre>  Has duplicate elements  <pre><code>len(x) != len(unique(x))\n</code></pre>"},{"location":"r/basic/list/#extract","title":"extract","text":"Action Code Details  Number of elements (length)  <pre><code>length(x)\n</code></pre>  First element  <pre><code>x[[1]]\n</code></pre>  _i_th element  <pre><code>x[[i]]\n</code></pre>  Last element  <pre><code>tail(x, 1)\n</code></pre>  First element with name g, as literal  <pre><code>x$g\n</code></pre>  First element with name g in variable  <pre><code>x[g]\n</code></pre>  Index of element e <pre><code>which(x %in% e)\n</code></pre> Use <code>list(e)</code> for non-scalar elements. Returns empty vector if missing."},{"location":"r/basic/list/#derive","title":"Derive","text":""},{"location":"r/basic/list/#grow","title":"Grow","text":"Action Code Details  Append <code>NULL</code> <pre><code>append(x, list(NULL))\n</code></pre>  Append scalar element e <pre><code>append(x, e)\n</code></pre> Not applicable for non-scalar vectors (length 0 or &gt; 1)  Insert scalar element e at the _i_th position  <pre><code>append(x, e, after = i)\n</code></pre>  Replicate list n times  <pre><code>rep(x, n)\n</code></pre>  Replicate list to ensure length n <pre><code>rep_len(x, n)\n</code></pre> Cycles through elements until the length is reached"},{"location":"r/basic/list/#shrink","title":"Shrink","text":"Action Code Details  Slice from _a_th to _b_th element  <pre><code>x[a:b]\n</code></pre>  First n elements (head)  <pre><code>head(x, n)\n</code></pre>  First n elements (head)  <pre><code>x[1:n]\n</code></pre>  Last n elements (tail)  <pre><code>tail(x, n)\n</code></pre>  Drop first n elements  <pre><code>tail(x, -n)\n</code></pre>  Drop first n elements  <pre><code>x[-1:-n]\n</code></pre>  Drop last n elements  <pre><code>head(x, -n)\n</code></pre>  List of elements from a vector of indices vi <pre><code>x[vi]\n</code></pre> <code>x[c(2, 3)]</code>  List of elements from a vector of names vn <pre><code>x[vn]\n</code></pre> `x[c('a', 'b')]  Filter on condition or predicate function  <pre><code>Filter(function(e) e &gt; 2, x)\n</code></pre>"},{"location":"r/basic/list/#combine-lists","title":"Combine lists","text":"Action Code Details  Concatenate lists  <pre><code>c(x, y, z)\n</code></pre>"},{"location":"r/basic/list/#convert","title":"Convert","text":"Action Code Details  To vector (flatten)  <pre><code>unlist(x)\n</code></pre> Warning: results strongly depend on element types: Elements are converted to common type. Vector elements are concatenated. Zero-length elements (e.g., <code>NULL</code> or <code>integer()</code>) are excluded.  To vector (flatten), drop names  <pre><code>unlist(x, use.names = FALSE)\n</code></pre>"},{"location":"r/basic/logical/","title":"logical","text":""},{"location":"r/basic/logical/#logical","title":"logical","text":"<p>For representing boolean values</p>"},{"location":"r/basic/logical/#constants","title":"Constants","text":"Action Code Details  True  <pre><code>TRUE\n</code></pre>  False  <pre><code>FALSE\n</code></pre>  Missing value (<code>NA</code>)  <pre><code>NA\n</code></pre>"},{"location":"r/basic/logical/#create","title":"Create","text":"Action Code Details  Empty logical vector, length 0  <pre><code>logical()\n</code></pre>"},{"location":"r/basic/logical/#logical-vectors","title":"Logical vectors","text":"Action Code Details  Logical vector of <code>FALSE</code> values, length n <pre><code>logical(n)\n</code></pre>  Cast to logical  <pre><code>as.logical(y)\n</code></pre>  Parse string to logical  <pre><code>as.logical(y)\n</code></pre> Parse failures return <code>NA</code>"},{"location":"r/basic/logical/#test","title":"Test","text":"Action Code Details  Is logical  <pre><code>is.logical(x)\n</code></pre>"},{"location":"r/basic/logical/#logical-scalars","title":"Logical scalars","text":"Action Code Details  Is scalar and <code>TRUE</code> <pre><code>isTRUE(x)\n</code></pre>  Is scalar and <code>FALSE</code> <pre><code>isFALSE(x)\n</code></pre>"},{"location":"r/basic/logical/#logical-vectors_1","title":"Logical vectors","text":"Action Code Details  All elements <code>TRUE</code> <pre><code>all(x)\n</code></pre> Returns <code>NA</code> if x contains missing values!  All elements are <code>TRUE</code>, ignoring <code>NA</code>s  <pre><code>all(x, na.rm = TRUE)\n</code></pre>  All elements <code>FALSE</code> <pre><code>!any(x)\n</code></pre> Returns <code>NA</code> if x contains missing values!  All elements are <code>FALSE</code>, ignoring <code>NA</code>s  <pre><code>!any(x, na.rm = TRUE)\n</code></pre>  All <code>NA</code> <pre><code>all(is.na(x))\n</code></pre>  Any <code>NA</code> <pre><code>anyNA(x)\n</code></pre>  No <code>NA</code> <pre><code>!anyNA(x)\n</code></pre>  No <code>NA</code> <pre><code>assertthat::noNA(x)\n</code></pre>"},{"location":"r/basic/logical/#convert","title":"Convert","text":"Action Code Details  To integer (zeros and ones)  <pre><code>as.integer(x)\n</code></pre>  To numeric (zeros and ones)  <pre><code>as.numeric(x)\n</code></pre>  To character  <pre><code>as.character(x)\n</code></pre>"},{"location":"r/basic/matrix/","title":"matrix","text":""},{"location":"r/basic/matrix/#matrix","title":"matrix","text":""},{"location":"r/basic/matrix/#create","title":"Create","text":"Action Code Details  From vector, as column vector  <pre><code>matrix(x)\n</code></pre>  From vector, as column vector  <pre><code>cbind(x)\n</code></pre>  Diagonal matrix from vector  <pre><code>diag(x)\n</code></pre>  Create vector or matrix, depending on the number of columns  <pre><code>mat.or.vec(x, nc=2)\n</code></pre>"},{"location":"r/basic/matrix/#test","title":"Test","text":"Action Code Details  Is matrix  <pre><code>is.matrix(x)\n</code></pre>  Is vector (has singleton dimension)  <pre><code>?\n</code></pre>  Is square matrix  <pre><code>nrow(x) == ncol(x)\n</code></pre>  Each column contains at most 1 unique value (i.e. all equal)  <pre><code>apply(x, 2, uniqueN) == 1\n</code></pre>  Check if all rows are equal  <pre><code>all(mat[1,] == t(mat))\n</code></pre>"},{"location":"r/basic/matrix/#get","title":"Get","text":"Action Code Details  Elements by (row,col) pairs  <pre><code>mat[matrix(c(2,3), c(4,5)), ncol=2)]\n</code></pre>"},{"location":"r/basic/matrix/#convert","title":"Convert","text":"Action Code Details  To list of row vectors  <pre><code>split(mat, row(mat))\n</code></pre>  To list of column vectors  <pre><code>split(mat, col(mat))\n</code></pre>  To list of submatrices grouped by row  <pre><code>lapply(split(mat, rowFactor), matrix, ncol = ncol(mat))\n</code></pre>"},{"location":"r/basic/numeric/","title":"numeric","text":""},{"location":"r/basic/numeric/#numeric","title":"numeric","text":"<p>For representing numeric values as doubles</p>"},{"location":"r/basic/numeric/#constants","title":"Constants","text":"Action Code Details  Min value  <pre><code>.Machine$double.xmin\n</code></pre>  Max value  <pre><code>.Machine$double.xmax\n</code></pre>  Epsilon: smallest representable addition difference  <pre><code>.Machine$double.eps\n</code></pre>  Negative epsilon: smallest representable subtraction difference  <pre><code>.Machine$double.neg.eps\n</code></pre>  Missing value (NA)  <pre><code>NA_real_\n</code></pre>  Not a number (NaN)  <pre><code>NaN\n</code></pre>  Positive infinity  <pre><code>Inf\n</code></pre>  Negative infinity  <pre><code>-Inf\n</code></pre>"},{"location":"r/basic/numeric/#create","title":"Create","text":"Action Code Details  Empty numeric vector, length 0  <pre><code>numeric()\n</code></pre>"},{"location":"r/basic/numeric/#numeric-vectors","title":"Numeric vectors","text":"Action Code Details  Numeric vector of zeros, length n <pre><code>numeric(n)\n</code></pre>  Cast to numeric  <pre><code>as.numeric(y)\n</code></pre>  Parse string to numeric  <pre><code>as.numeric(y)\n</code></pre> Parse failures return <code>NA</code>"},{"location":"r/basic/numeric/#test","title":"Test","text":"Action Code Details  Is numeric  <pre><code>is.numeric(x)\n</code></pre> Integers are also numeric  Is numeric, but not integer  <pre><code>storage.mode(x) == 'double'\n</code></pre>"},{"location":"r/basic/numeric/#tests-for-single-numbers","title":"Tests for single number(s)","text":"Action Code Details  Is equal to number  <pre><code>isTRUE(all.equal(x, y))\n</code></pre>  Is equal to number  <pre><code>abs(x - y) &lt; .Machine$double.eps\n</code></pre>  Is equal to number with tolerance t <pre><code>isTRUE(all.equal(x, y, tolerance = t))\n</code></pre>  Is equal to number with tolerance t <pre><code>abs(x - y) &lt; t\n</code></pre>"},{"location":"r/basic/numeric/#tests-for-vector","title":"Tests for vector","text":"Action Code Details  All elements are equal (no <code>NA</code>s present)  <pre><code>abs(max(x) - min(x)) &lt; .Machine$double.neg.eps\n</code></pre>  All elements are equal (with NAs)  <pre><code>isTRUE(all.equal(x, y))\n</code></pre>  All elements are equal within absolute tolerance t (no <code>NA</code>s present)  <pre><code>abs(max(x) - min(x)) &lt; t\n</code></pre>  All elements are equal within absolute tolerance t <pre><code>isTRUE(all.equal(x, y, tolerance = t))\n</code></pre>  Are all elements whole numbers (no NAs present)  <pre><code>all(x == round(x))\n</code></pre>  Are all elements whole numbers (no NAs present)  <pre><code>max(x %% 1) &lt; .Machine$double.neg.eps\n</code></pre>  Are all elements whole numbers?  <pre><code>max(x %% 1, na.rm = TRUE) &lt; .Machine$double.neg.eps\n</code></pre>  Are all elements rounded to at most p decimals? (no NAs present)  <pre><code>all(x == round(x, p))\n</code></pre> For example, for p=1: 0.1, -2.6, for p=2: 0.11, -2.63  Are all elements rounded to at most p decimals? (no NAs present)  <pre><code>all(x == round(x, p), na.rm = TRUE)\n</code></pre>"},{"location":"r/basic/numeric/#derive","title":"Derive","text":"Action Code Details  Floor  <pre><code>floor(x)\n</code></pre> trunc(2.6) = 2, trunc(-2.5) = -3  Ceiling  <pre><code>ceiling(x)\n</code></pre> ceiling(2.6) = 3, ceiling(-2.5) = -2  Truncate to integer  <pre><code>trunc(x)\n</code></pre> trunc(2.6) = 2, trunc(-2.5) = -2  Round to d decimal places  <pre><code>round(x, d)\n</code></pre> round(2.6) = 3, round(-2.55, 1) = -2.5  Round to nearest _p_th power of ten  <pre><code>round(x, -p)\n</code></pre> round(520, -2) = 500  Round to _d_th significant digits  <pre><code>signif(x, d)\n</code></pre>"},{"location":"r/basic/numeric/#convert","title":"Convert","text":"Action Code Details  To integer (truncate)  <pre><code>as.integer(x)\n</code></pre>"},{"location":"r/basic/numeric/#format-as-string","title":"Format as string","text":"Action Code Details  To string  <pre><code>as.character(x)\n</code></pre>  Format with thousands separator (comma)  <pre><code>scales::comma(x)\n</code></pre>  Format with d significant digits  <pre><code>formatC(x, digits = d, format='fg')\n</code></pre>  Format as percentage  <pre><code>scales::percent(x)\n</code></pre>  Format with sign prefix  <pre><code>formatC(x, format = 'f', flag = '+', drop0trailing = TRUE)\n</code></pre>  Format with scientific notation  <pre><code>formatC(x, format = 'e')\n</code></pre>  Format with scientific notation and sign prefix  <pre><code>formatC(x, format = 'e', flag = '+')\n</code></pre>  Format with scientific notation, with d significant digits  <pre><code>formatC(x, format = 'e', digits = d)\n</code></pre>"},{"location":"r/basic/vector/","title":"vector","text":""},{"location":"r/basic/vector/#vector","title":"vector","text":""},{"location":"r/basic/vector/#create","title":"Create","text":"Action Code Details  Define vector  <pre><code>c(1, 2, 3)\n</code></pre>  Define with n repeated values v <pre><code>rep(v, n)\n</code></pre>  Define with n repeated values v <pre><code>rep_len(v, n)\n</code></pre>  Zeros, length n <pre><code>numeric(n)\n</code></pre>  NaNs, length n <pre><code>NaN[1:n]\n</code></pre>  Sequence from a to b <pre><code>seq(a, b)\n</code></pre>  Sequence between a to b of length n <pre><code>seq(a, b, length.out=n)\n</code></pre>"},{"location":"r/basic/vector/#test","title":"Test","text":"Action Code Details  Is vector  <pre><code>is.vector(x) &amp;&amp; is.atomic(x)\n</code></pre> <code>is.vector()</code> returns true for lists as well!  Is empty  <pre><code>length(x) == 0\n</code></pre>  Contains value v <pre><code>v %in% x\n</code></pre>  Contains NA value(s)  <pre><code>anyNA(x)\n</code></pre>  Contains each of the values in vector v <pre><code>all(v %in% x)\n</code></pre>  Does not contain value v <pre><code>!(v %in% x)\n</code></pre>"},{"location":"r/basic/vector/#extract","title":"Extract","text":"Action Code Details  Length  <pre><code>length(x)\n</code></pre>  First element  <pre><code>x[1]\n</code></pre>  Last element  <pre><code>data.table::last(x)\n</code></pre>  Last element  <pre><code>tail(x, 1)\n</code></pre>"},{"location":"r/basic/vector/#aggregate","title":"Aggregate","text":"Action Code Details  Sum elements  <pre><code>sum(x)\n</code></pre>  Mean of elements  <pre><code>mean(x)\n</code></pre>  Mode  <pre><code>table(x) %&gt;% sort() %&gt;% names() %&gt;% last()\n</code></pre>  Mode of positive integers 1:K  <pre><code>tabulate(x) %&gt;% which.max()\n</code></pre>  Compute function per group, as list  <pre><code>tapply(x, INDEX = rep_len(1:2, length(x)), mean)\n</code></pre> Outputs a list with the results per group"},{"location":"r/basic/vector/#indexing","title":"Indexing","text":"Action Code Details  TRUE values  <pre><code>which(x)\n</code></pre>  FALSE values  <pre><code>which(!x)\n</code></pre>  Index of smallest value  <pre><code>which.min(x)\n</code></pre>  Index of largest value  <pre><code>which.max(x)\n</code></pre>"},{"location":"r/basic/vector/#derive","title":"Derive","text":""},{"location":"r/basic/vector/#order","title":"Order","text":"Action Code Details  Sort descending  <pre><code>sort(x)\n</code></pre>  Reverse  <pre><code>rev(x)\n</code></pre>  Shuffle  <pre><code>sample(x)\n</code></pre>"},{"location":"r/basic/vector/#map","title":"Map","text":"<p>Element-wise operations</p> Action Code Details  If-else with constant results  <pre><code>ifelse(x == TRUE, 1, 0)\n</code></pre>  If-else with element-specific results  <pre><code>ifelse(x, seq(-1, -100, by=-1), 1:100)\n</code></pre>  Replace NAs by zeros  <pre><code>ifelse(is.na(x), 0, x)\n</code></pre>  Replace specific values by zeros  <pre><code>ifelse(x %in% values, 0, x)\n</code></pre>  Replace elements at index with given values  <pre><code>replace(x, c(2, 4), c(NA, Inf))\n</code></pre>  Order by value, breaking ties with further args  <pre><code>order(x)\n</code></pre>  Ranking, with ties option  <pre><code>rank(x, ties='first')\n</code></pre>  Clip values below a <pre><code>pmin(x, a)\n</code></pre>  Clip values above b <pre><code>pmax(x, b)\n</code></pre>  Find pairwise min between two vectors  <pre><code>pmin(x, y)\n</code></pre>  Find pairwise max between two vectors  <pre><code>pmax(x, y)\n</code></pre>  Discretize values into bin number  <pre><code>findInterval(1:4, c(0, 2, 4))\n</code></pre>  Discretize values into n levels  <pre><code>cut(x, n)\n</code></pre>  Discretize values in specified intervals  <pre><code>cut(x, breaks)\n</code></pre>  Linear interpolation  <pre><code>approxfun(x, method='linear')(x2)\n</code></pre>  Spline interpolation  <pre><code>splinefun(x)(x2)\n</code></pre>  Smoothing spline interpolation  <pre><code>smooth.spline(x) %&gt;% predict(x2)\n</code></pre>"},{"location":"r/basic/vector/#grow","title":"Grow","text":"Action Code Details  Repeat vector n times  <pre><code>rep(x, n)\n</code></pre>  Repeat vector up to length n <pre><code>rep_len(x, n)\n</code></pre>"},{"location":"r/basic/vector/#shrink","title":"Shrink","text":"Action Code Details  Exclude NA  <pre><code>na.exclude(x)\n</code></pre>  Exclude NA  <pre><code>x[!is.na(x)]\n</code></pre>  Exclude NA  <pre><code>Filter(Negate(is.na), x)\n</code></pre>  Exclude non-finite values  <pre><code>x[is.finite(x)]\n</code></pre>  Exclude non-finite values  <pre><code>Filter(is.finite, x)\n</code></pre>  Lagged difference  <pre><code>diff(x)\n</code></pre>  Sample n elements  <pre><code>sample(x, n)\n</code></pre>"},{"location":"r/basic/vector/#convert","title":"Convert","text":"Action Code Details  Split into a list of vectors, according to a grouping vector  <pre><code>split(x, g)\n</code></pre> Can be undone by unsplit(y, g)  Running-length encoding  <pre><code>rle(x)\n</code></pre>"},{"location":"r/datatable/","title":"datatable","text":""},{"location":"r/datatable/#datatable","title":"datatable","text":"<p>A very fast data.frame implementation</p> <p>Details - <code>.()</code> is a shortcut for list(), alternative is J() - <code>:=</code> operator assigns by reference - <code>(variable)</code> to refer to the column names stored in the variable - <code>get(...)</code> evaluates expression to column name - <code>%&gt;%</code> pipe operator (magrittr package) to chain function calls in a more readable manner, e.g. dt[, mean(x), by=ID] %&gt;% .[, mean(x)]. Calling functions without data argument is done by enclosing in a new block: dt %&gt;% {table(.$Var)} %&gt;% as.data.table - <code>%chin%</code> faster version of %in% for character vectors - <code>%between%</code> checks if value between range, e.g. a %between% c(1,9), or a %between% list(c(1,3), c(4,5)). Seems slow to use - <code>%inrange%</code> checks if value in range - <code>%like%</code> regular expression check - <code>mult='first'</code> argument provides a useful shortcut for dropping group columns - Perform merges prior to row subsetting to preserve the keys. Row subsetting followed by a merge drops the obsolete keys, for some reason.</p> <p>Code <pre><code>library(data.table)\n</code></pre></p>"},{"location":"r/datatable/#create","title":"Create","text":"Action Code Details  From data.frame  <pre><code>as.data.table(df)\n</code></pre>  Change data.frame to data.table, in-place  <pre><code>setDT(df)\n</code></pre>  From data.frame, storing row names as the first column  <pre><code>as.data.table(df, keep.rownames=TRUE)\n</code></pre>  From list of named vectors  <pre><code>as.data.table(do.call(rbind, veclist))\n</code></pre>  From statistical object  <pre><code>broom::tidy(lm) %&gt;% as.data.table()\n</code></pre>  From statistical object to one-row frame  <pre><code>broom::glance(lm) %&gt;% as.data.table()\n</code></pre>  From running-length encoding (RLE)  <pre><code>rle(x) %&gt;% unclass() %&gt;% as.data.table()\n</code></pre>  From matrix to long format  <pre><code>melt(data.table(x), measure = colnames(x), id=character())\n</code></pre>  From array to long format  <pre><code>as.data.table(x)\n</code></pre> Ensure that all dims are named  From CSV file  <pre><code>fread('derp.csv')\n</code></pre>"},{"location":"r/datatable/#properties","title":"Properties","text":"Action Code Details  Column names  <pre><code>names(dt)\n</code></pre>  Number of columns  <pre><code>length(dt)\n</code></pre>  Number of rows  <pre><code>nrow(dt)\n</code></pre>  Get key(s)  <pre><code>key(dt)\n</code></pre>"},{"location":"r/datatable/#test","title":"Test","text":"Action Code Details  Empty (no rows)  <pre><code>nrow(dt) == 0\n</code></pre>"},{"location":"r/datatable/#update","title":"Update","text":"<p>Modify the data table in-place (i.e., by reference)</p> Action Code Details  Set key(s) by symbols  <pre><code>setkey(dt, Age, Sex)\n</code></pre>  Set key(s) by names  <pre><code>setkeyv(dt, c('Age', 'Sex'))\n</code></pre>  Assign attribute  <pre><code>setattr(dt, 'myAttr', value)\n</code></pre>  Remove attribute  <pre><code>setattr(dt, 'myAttr', NULL)\n</code></pre>"},{"location":"r/datatable/#map","title":"Map","text":"<p>Update while preservering the size of the data table</p> <p>See the snippets in the Grow section for replacing complete column(s).</p> Action Code Details  Update some rows with constant value, conditional on another column  <pre><code>dt[is.na(x), y:=1]\n</code></pre>  Update rows with values conditional on group (key)  <pre><code>dtg = data.table(\u2026, x=2, key=Group)\ndt[dtg, x := i.x]\n</code></pre>  Replace factor column NA values by a special level  <pre><code>dt[is.na(f), f := 'N/A']\n</code></pre>"},{"location":"r/datatable/#order","title":"Order","text":"<p>Reorder the rows of the data table</p>"},{"location":"r/datatable/#sort","title":"Sort","text":"<p>Sorting can be handled automatically by setting a column as one of the keys through setkey().</p> Action Code Details  Sort by column symbols  <pre><code>setorder(dt, Age, Sex)\n</code></pre>  Sort by column names  <pre><code>setorderv(dt, c('Age', 'Sex'))\n</code></pre>"},{"location":"r/datatable/#grow","title":"Grow","text":"<p>Increase the size of the data table</p> Action Code Details  Add column with constant value value <pre><code>dt[, x := value]\n</code></pre>  Add column with new vector of values (per row)  <pre><code>dt[, x := values]\n</code></pre> values must be of same length as number of rows of the data table  Add columns with constant values  <pre><code>dt[, ':='(x=1, y=2)]\n</code></pre>  Add variable columns with constant values  <pre><code>dt[, c('x', 'y') := .(1, 2)]\n</code></pre>  Add columns from matrix columns  <pre><code>mat = matrix(1:8, ncol=2)\ndt[, c('a' ,'b') := split(mat, col(mat))]\n</code></pre>  Add columns from matrix rows  <pre><code>mat = matrix(1:8, nrow=2)\ndt[, c('a' ,'b') := split(mat, row(mat))]\n</code></pre>  Add columns from another table for matching keys  <pre><code>dt2 = data.table(\u2026)\ndt[dt2, (vars) := mget(vars)]\n</code></pre>"},{"location":"r/datatable/#add-column-derived-from-another-column","title":"Add column derived from another column","text":"Action Code Details  Add column with aggregate value by group  <pre><code>dt[, x := mean(y), by=ID]\n</code></pre>  Right-aligned rolling mean of size w (partial windows)  <pre><code>dt[, RMean := Reduce('+', shift(x, 1:w-1, fill=0)) / pmin(w, .I)]\n</code></pre>  Right-aligned rolling sum of size w <pre><code>dt[, RSum := Reduce('+', shift(x, 0:(w-1), fill=0)), by=ID]\n</code></pre> Easily 50 times faster than zoo::rollapply  Right-aligned rolling mean with fixed window w (zero-filled)  <pre><code>dt[, RMean := Reduce('+', shift(x, 0:(w-1), fill=0)) / w, by=ID]\n</code></pre>  Right-aligned rolling mean (partial windows)  <pre><code>dt[, RMean := Reduce('+', shift(x, 0:(w-1), fill=0)) / pmin(w, 1:.N), by=ID]\n</code></pre>  Right-aligned rolling mean (ignoring NAs)  <pre><code>dt[, RMean := Reduce('+', shift(ifelse(is.na(x), 0, x), 0:(W-1), fill=0)) /\n    Reduce('+', shift(is.finite(x), 0:(W-1), fill=0)), by=ID]\n</code></pre>  Centered rolling mean (fixed window of size $W$ (inserting zeroes))  <pre><code>dt[, CMean := Reduce('+', shift(x, -floor(W/2):floor(W/2), fill=0)) / W, by=ID]\n</code></pre>  Centered rolling mean (partial windows)  <pre><code>dt[, CMean := Reduce('+', shift(x, -floor(W/2):floor(W/2), fill=0)) /\n    pmin(W, c(1:ceiling(.N/2), floor(.N/2):1)), by=ID]\n</code></pre>  Centered rolling mean (ignoring NAs)  <pre><code>dt[, CMean := Reduce('+', shift(x, -floor(W/2):floor(W/2), fill=0)) /\n    Reduce('+', shift(is.finite(x), -floor(W/2):floor(W/2), fill=0)), by=ID]\n</code></pre>  Mark consecutive matching rows  <pre><code>dt[, CMatch := {\n    r = rle(MATCH)\n    r$values = replace(r$values, r$lengths &lt; GAP_SIZE &amp; r$values, FALSE)\n    inverse.rle(r)\n}, by=ID]\n</code></pre> Needs a better description  Count column for consecutive matches  <pre><code>dt[, MatchNr := {\n    function(x) cumsum(x) + cummin(c(0, diff(x)) * cumsum(x))\n}(MATCH), by=ID]\n</code></pre> Needs a better description"},{"location":"r/datatable/#shrink","title":"Shrink","text":"<p>Reduce the size of the data table</p> Action Code Details  Remove column  <pre><code>dt[, x := NULL]\n</code></pre>  Remove columns  <pre><code>dt[, ':='(x=NULL, y=NULL)]\n</code></pre>  Remove variable columns  <pre><code>dt[, c('x', 'y') := NULL]\n</code></pre>"},{"location":"r/datatable/#join","title":"Join","text":"<p>Join with another data frame</p> Action Code Details  Left join  <pre><code>cols = c('x', 'y')\ndt2[dt1, (cols) := mget(paste0('i.', cols))]\n</code></pre>"},{"location":"r/datatable/#query","title":"Query","text":""},{"location":"r/datatable/#scalar","title":"Scalar","text":"<p>Extract a scalar result.</p> Action Code Details  Number of duplicated rows  <pre><code>sum(duplicated(dt))\n</code></pre>"},{"location":"r/datatable/#vector","title":"Vector","text":"<p>Extract a vector result.</p> Action Code Details  Find row indices of key value  <pre><code>dt['a1', which=TRUE]\n</code></pre>"},{"location":"r/datatable/#extract-column","title":"Extract column","text":"<p>Extract a result per row (vector of length nrow(data))</p> Action Code Details  Get column values as vector  <pre><code>dt$Age\n</code></pre>  Get column values by variable name  <pre><code>dt[[col]]\n</code></pre>"},{"location":"r/datatable/#extract-row","title":"Extract row","text":"<p>Extract a scalar result per column</p>"},{"location":"r/datatable/#derive","title":"Derive","text":"<p>Derive a new data frame based on the given one</p>"},{"location":"r/datatable/#map_1","title":"Map","text":"<p>Derive a new data frame of the same shape</p> Action Code Details  Replace NAs with zero  <pre><code>dt[is.na(dt)] = 0\n</code></pre>  Replace NAs with value v <pre><code>dt[is.na(dt)] = v\n</code></pre>  Replace missing values using LOCF  <pre><code>locf = function(x) x[cummax(c(TRUE, tail(!is.na(x) * seq_along(x), -1)))]\ndt[, x := locf(x), by=ID]\n</code></pre>  Replace missing values using NOCB  <pre><code>locf = function(x) x[cummax(c(TRUE, tail(!is.na(x) * seq_along(x), -1)))]\nnocb = function(x) rev(locf(rev(x))\ndt[, x := nocb(x), by=ID]\n</code></pre>"},{"location":"r/datatable/#shrink_1","title":"Shrink","text":"<p>Derive a subset of the data frame</p> Action Code Details  Select a single column  <pre><code>dt[, .(Age)]\n</code></pre>  Select a single column by variable name  <pre><code>dt[, list(col)]\n</code></pre>  Select columns  <pre><code>dt[, .(Age, Sex)]\n</code></pre>  Select all columns except  <pre><code>dt[, -c('Age', 'Sex')]\n</code></pre>  Select columns and apply function  <pre><code>dt[, lapply(.SD, mean), .SDcols=c('Age', 'Sex')]\n</code></pre>  Select rows by row number  <pre><code>dt[1:10]\n</code></pre>  Select rows with key value  <pre><code>dt[dtquery[query, .(ID)]]\n</code></pre>  Select rows with key value, dropping factor levels  <pre><code>dt[c('a1', 'a2')]\n</code></pre> Discards factor level order!  Select first matching row for each specified key  <pre><code>dt[c('a1', 'a2'), mult='first']\n</code></pre>  Select rows indexed by multiple keys  <pre><code>dt[.('a1', 'b1')]\n</code></pre> Notice the dot  Select rows of keys specified in a table  <pre><code>dtquery = data.table(..., by=keys)\ndt[dtquery]\n</code></pre>  Select rows of groups, excluding non-existent queried rows  <pre><code>dtquery = data.table(..., by=keys)\ndt[dtquery, nomatch=0]\n</code></pre>  Select rows with values specified in table  <pre><code>dtquery = data.table(...)\nmerge(dt, dtquery, by=COLUMNS)\n</code></pre>  Unique rows  <pre><code>unique(dt)\n</code></pre>  Unique rows by columns  <pre><code>unique(dt, by = keys(dt))\n</code></pre>  Duplicated rows  <pre><code>dt[duplicated(dt),]\n</code></pre>  Sample n rows  <pre><code>dt[sample(.N, n),]\n</code></pre>  Sample n rows by key groups  <pre><code>dtquery = data.table(sample(levels(dt$Id), n))\ndt[dtquery]\n</code></pre>  First n rows per group  <pre><code>dt[dt[, .I[1:10], by=ID]]\n</code></pre> Not the best way"},{"location":"r/datatable/#aggregation","title":"Aggregation","text":"<p>Aggregate rows by group</p> Action Code Details  By group  <pre><code>dt[,, by = ID]\n</code></pre> Typically used for categorical columns, e.g., string, factor, date, or int  By group, from column name  <pre><code>dt[,, by = 'ID']\n</code></pre>  By variable column name  <pre><code>dt[,, by=(var)]\n</code></pre>  By fixed-sized bins from a numeric column  <pre><code>dt[ , , by=findInterval(NumericColumn, seq(1, 100, by=7))]\n</code></pre>  By groups (columns)  <pre><code>dt[,, by = .(IDa, IDb)]\n</code></pre>  By string column names  <pre><code>dt[,, by = c('IDa', 'IDb')]\n</code></pre>  By range of keys  <pre><code>dt[,, by = IDa:IDc]\n</code></pre>"},{"location":"r/datatable/#grow_1","title":"Grow","text":"Action Code Details  Insert missing rows based on missing combination of keys  <pre><code>dt[CJ(unique(IDa), unique(IDb))]\n</code></pre> Uses a cross-join on all levels of the given two columns IDa and IDb  Repeat each row n times  <pre><code>dt[rep(1:.N, n)]\n</code></pre>  Repeat rows by group  <pre><code>dt[, lapply(.SD, rep, 10), by=ID]\n</code></pre>  Repeat data.table along a sequence as new index  <pre><code>s = LETTERS[1:5]\ndt2 = replicate(length(s), dt, simplify=FALSE) %&gt;%\n    setNames(s) %&gt;%\n    rbindlist(idcol=TRUE)\n</code></pre>"},{"location":"r/datatable/#reshape","title":"Reshape","text":"Action Code Details  To wide format  <pre><code>dcast(dt, IDa + IDb ~ Param, value.var = 'Value')\n</code></pre> <code>...</code> represents all variables, and <code>.</code> represents no variable  To wide format with value column prefix  <pre><code>dcast(dt, IDa + IDb ~ paste0('prefix', Param), value.var='Value')\n</code></pre>  To wide format with aggregation  <pre><code>dcast(dt, IDa + IDb ~ Param, value.var='Value',\n    fun.aggregate=list(first, last), fill=NA)\n</code></pre>  To wide format on a single grouping factor  <pre><code>dcast(dt, ... ~ Group, value.var = 'Value')\n</code></pre>  To wide format without an index  <pre><code>unstack(dt, Value ~ Param) %&gt;% as.data.table()\n</code></pre>  To long format  <pre><code>melt(dt, id=c('IDa', 'IDb'), measure=c('Param1', 'Param2'))\n</code></pre>  To long format for specific columns (no index)  <pre><code>melt(dt, id=character(), measure=c('Param1', 'Param2'))\n</code></pre>  Transpose  <pre><code>t(dt) %&gt;% as.data.table()\n</code></pre> Drops column names!"},{"location":"r/datatable/#join_1","title":"Join","text":"<p>Join two or more data frames</p> Action Code Details  Inner join  <pre><code>merge(dt1, dt2)\n</code></pre>  Inner join  <pre><code>dt1[dt2, nomatch=0]\n</code></pre>  Inner join with mismatching keys  <pre><code>merge(dt1, dt2, by.x=c('a1', 'b1'), by.y=c('b1', 'b2'))\n</code></pre>  Outer join  <pre><code>merge(dt1, dt2, all=TRUE)\n</code></pre>  Outer join (low memory)  <pre><code>dt12 = d[dt2, nomatch=0]\nrbind(dt1[!dt12], dt12, dt2[!dt12])\n</code></pre>  Left join  <pre><code>merge(dt1, dt2, all.x = TRUE)\n</code></pre>  Left join with identical column names  <pre><code>dt12 = dt2[dt1, .(x1=x, x2=i.x)]\n</code></pre>  Right join  <pre><code>merge(dt1, dt2, all.y = TRUE)\n</code></pre>  Anti join  <pre><code>dt1[!dt2]\n</code></pre>  Union  <pre><code>funion(dt, dt2)\n</code></pre>  Intersection  <pre><code>fintersect(dt, dt2)\n</code></pre>  Set difference  <pre><code>fsetdiff(dt, dt2)\n</code></pre>  Set equal  <pre><code>fsetequal(dt, dt2)\n</code></pre>  Combine two tables, repeating rows for all unique pairs (<code>expand.grid</code>)  <pre><code>data.table(\n    dt1[rep(1:.N, nrow(dt2))],\n    dt2[rep(1:.N, each=nrow(dt1))]\n)\n</code></pre>"},{"location":"r/datatable/#convert","title":"Convert","text":"Action Code Details  Data.frame  <pre><code>as.data.frame(dt)\n</code></pre>  List of data.frames, by group  <pre><code>split(dt, by='Id')\n</code></pre>  Matrix  <pre><code>data.matrix(dt)\n</code></pre>"},{"location":"r/datetime/","title":"Date & time handling","text":""},{"location":"r/datetime/#date-time-handling","title":"Date &amp; time handling","text":"<p>There are several classes and packages available for handling dates &amp; times:</p> <p>Date</p> <ul> <li><code>Date</code> class (recommended), fractional number of days since Unix epoch</li> <li><code>IDate</code> class, integer number of days since Unix epoch, defined by the <code>data.table</code> package (for use in data.tables)</li> </ul> <p>Time</p> <ul> <li><code>ITime</code> class, from the <code>data.table</code> package</li> <li><code>hms</code> class, from the <code>hms</code> package</li> </ul> <p>Datetime</p> <ul> <li><code>POSIXct</code> class (recommended): stores datetime as the number of seconds since Unix epoch</li> <li><code>POSIXlt</code> class: stores datetime as separate y/m/d/h/m/s components</li> <li><code>POSIXt</code> base class</li> </ul>"},{"location":"r/datetime/#config","title":"Config","text":"Action Code Details  Set timezone for session  <pre><code>Sys.setenv(TZ='UCT')\n</code></pre>"},{"location":"r/datetime/#extract","title":"Extract","text":"Action Code Details  Get system time-zone region  <pre><code>Sys.timezone()\n</code></pre> Warning: OS-specific output; check the documentation!"},{"location":"r/datetime/date/","title":"Date","text":""},{"location":"r/datetime/date/#date","title":"Date","text":""},{"location":"r/datetime/date/#create","title":"Create","text":"Action Code Details  From ymd  <pre><code>ISOdate(year, month, day) |&gt; as.Date()\n</code></pre>  From ymd  <pre><code>lubridate::make_date(year, month, day)\n</code></pre>  Current date  <pre><code>Sys.Date()\n</code></pre>  Current date  <pre><code>lubridate::today() |&gt; as.Date()\n</code></pre>  Current date in UTC timezone  <pre><code>lubridate::today(tzone = 'UTC') |&gt; as.Date()\n</code></pre>  Unix epoch  <pre><code>as.Date(0)\n</code></pre>  From total days since Unix epoch  <pre><code>as.Date(n)\n</code></pre>  From total days since reference date  <pre><code>as.Date(n, origin = ref_date)\n</code></pre>  Date from YYYY-MM-DD string  <pre><code>as.Date(x)\n</code></pre>  Date from Y-m-d ordered string  <pre><code>lubridate::ymd(x)\n</code></pre>  Date from DD-MMM-YYYY string  <pre><code>as.Date(x, '%Y-%m-%d')\n</code></pre>  Date from d-m-Y ordered string  <pre><code>lubridate::dmy(x)\n</code></pre>"},{"location":"r/datetime/date/#vector-of-dates","title":"Vector of dates","text":"Action Code Details  Vector of length n filled with date d <pre><code>rep(d, n)\n</code></pre>  Sequence (vector) of n consecutive dates, starting from d <pre><code>seq(d, length.out = n, by = 'day')\n</code></pre>  Sequence of n consecutive dates, starting from d <pre><code>seq(d, length.out = n, by = 'day')\n</code></pre>  Sequence (vector) of consecutive dates between dates d and d2 <pre><code>seq(d, d2, by = 'day')\n</code></pre>  Sequence of n dates, starting from d with weekly increments  <pre><code>seq(d, length.out = n, by = 'week')\n</code></pre>  Sequence of n dates counting down from date d with weekly decrements  <pre><code>seq(d, length.out = n, by = '-1 week')\n</code></pre>  Sequence of n dates, starting from d with w-week increments  <pre><code>seq(d, length.out = n, by = 'w week')\n</code></pre>  Sequence of dates between d and d2 with weekly increment  <pre><code>seq(d, d2, by = 'week')\n</code></pre>  Sequence of n dates, starting from d with yearly increments  <pre><code>seq(d, length.out = n, by = 'year')\n</code></pre>"},{"location":"r/datetime/date/#constants","title":"Constants","text":"Action Code Details  NA  <pre><code>lubridate::NA_Date_\n</code></pre>"},{"location":"r/datetime/date/#test","title":"Test","text":"Action Code Details  Is date  <pre><code>lubridate::is.Date(x)\n</code></pre>  Same date  <pre><code>x == y\n</code></pre>  Happens before y <pre><code>x &lt; y\n</code></pre>  Happens after y <pre><code>x &gt; y\n</code></pre>"},{"location":"r/datetime/date/#extract","title":"Extract","text":"Action Code Details  Days from Unix epoch  <pre><code>as.integer(x)\n</code></pre>  Seconds from Unix epoch (timestamp)  <pre><code>as.POSIXct(x) |&gt; as.integer()\n</code></pre>  Year  <pre><code>lubridate::year(x)\n</code></pre>  Month  <pre><code>lubridate::month(x)\n</code></pre>  Day  <pre><code>lubridate::day(x)\n</code></pre>  Week number (1-53)  <pre><code>lubridate::week(x)\n</code></pre>  ISO week number (1-52)  <pre><code>lubridate::isoweek(x)\n</code></pre>  Weekday number  <pre><code>lubridate::wday(x, week_start = 1)\n</code></pre> Mon=1, Sun=7"},{"location":"r/datetime/date/#update","title":"Update","text":"Action Code Details  Change to first day of year  <pre><code>lubridate::yday(x) = 1\n</code></pre>  Change to first day of month  <pre><code>lubridate::day(x) = 1\n</code></pre>  Change year to y <pre><code>lubridate::year(x) = y\n</code></pre>"},{"location":"r/datetime/date/#derive","title":"Derive","text":"Action Code Details  Change to first day of year  <pre><code>trunc(x, 'year')\n</code></pre>  Change to first day of month  <pre><code>trunc(d, 'month')\n</code></pre>  Shift forward by n days  <pre><code>x + n\n</code></pre>"},{"location":"r/datetime/date/#convert","title":"Convert","text":"Action Code Details  To datetime at midnight (00:00:00) in UTC  <pre><code>as.POSIXct(x)\n</code></pre>  To <code>POSIXct</code> at midnight (00:00:00) in UTC  <pre><code>as.POSIXct(x)\n</code></pre>  To <code>POSIXlt</code> at midnight (00:00:00) in UTC  <pre><code>as.POSIXlt(x)\n</code></pre>"},{"location":"r/datetime/date/#format","title":"Format","text":"Action Code Details  Format as ISO date (yyyy-mm-dd)  <pre><code>format(x)\n</code></pre>  Format as dd-mm-yyyy  <pre><code>format(d, '%d-%m-%Y')\n</code></pre>  Format in system locale  <pre><code>format(x, '%a %b %d')\n</code></pre>"},{"location":"r/datetime/posixct/","title":"POSIXct","text":""},{"location":"r/datetime/posixct/#posixct","title":"POSIXct","text":""},{"location":"r/datetime/posixct/#create","title":"Create","text":"Action Code Details  From ymd  <pre><code>ISOdate(year, month, day)\n</code></pre>  From ymd  <pre><code>lubridate::make_date(year, month, day) |&gt; as.POSIXct()\n</code></pre>  From ymdhms  <pre><code>ISOdatetime(year, month, day, hour, minute, second)\n</code></pre>  From ymdhms  <pre><code>lubridate::make_datetime(year, month, day, hour, min, sec)\n</code></pre>  From ymdhms in UTC timezone  <pre><code>ISOdatetime(years, months, days, hours, minutes, seconds, tz = 'UTC')\n</code></pre>  Current date in UTC  <pre><code>Sys.Date() |&gt; as.POSIXct()\n</code></pre>  Current datetime  <pre><code>Sys.time()\n</code></pre>  Current datetime  <pre><code>lubridate::now()\n</code></pre>  Current datetime in UTC timezone  <pre><code>lubridate::now(tzone = 'UTC')\n</code></pre>  Unix epoch  <pre><code>as.POSIXct(0)\n</code></pre>  From total seconds since Unix epoch  <pre><code>as.POSIXct(n)\n</code></pre>  From total seconds since reference date  <pre><code>as.POSIXct(n, origin = ref_date)\n</code></pre>  Datetime from YYYY-MM-DD string  <pre><code>as.POSIXct(x)\n</code></pre>  Datetime from YYYY-MM-DD HH:mm:ss string  <pre><code>as.POSIXct(x)\n</code></pre>  Date from DD-MM-YYYY string  <pre><code>as.POSIXct(x, format = '%d-%m-%Y')\n</code></pre>"},{"location":"r/datetime/posixct/#test","title":"Test","text":"Action Code Details  Is POSIXt  <pre><code>inherits(x, 'POSIXt')\n</code></pre>  Is POSIXt  <pre><code>lubridate::is.POSIXt(x)\n</code></pre>  Is POSIXct  <pre><code>inherits(x, 'POSIXct')\n</code></pre>  Is POSIXct  <pre><code>lubridate::is.POSIXct(x)\n</code></pre>  Same date  <pre><code>x == y\n</code></pre>  Happens before y <pre><code>x &lt; y\n</code></pre>  Happens after y <pre><code>x &gt; y\n</code></pre>"},{"location":"r/datetime/posixct/#extract","title":"Extract","text":"Action Code Details  Days from Unix epoch  <pre><code>as.Date(x) |&gt; as.integer()\n</code></pre>  Seconds from Unix epoch (timestamp)  <pre><code>as.integer(x)\n</code></pre>  Year  <pre><code>lubridate::year(x)\n</code></pre>  Month  <pre><code>lubridate::month(x)\n</code></pre>  Day  <pre><code>lubridate::day(x)\n</code></pre>  Week number (1-53)  <pre><code>lubridate::week(x)\n</code></pre>  ISO week number (1-52)  <pre><code>lubridate::isoweek(x)\n</code></pre>  Weekday number  <pre><code>lubridate::wday(x, week_start = 1)\n</code></pre> Mon=1, Sun=7  Hour  <pre><code>lubridate::hour(x)\n</code></pre>  Minute  <pre><code>lubridate::minute(x)\n</code></pre>  Second  <pre><code>lubridate::second(x)\n</code></pre>"},{"location":"r/datetime/posixct/#derive","title":"Derive","text":"Action Code Details  Shift forward by n days  <pre><code>x + n * 86400\n</code></pre>  Shift forward by n days  <pre><code>x + lubridate::days(n)\n</code></pre>  Shift forward by n seconds  <pre><code>x + n\n</code></pre>  Shift forward by a specific ymdhms period  <pre><code>x + lubridate::period(year, month, day, hour, minute, second)\n</code></pre>  Truncate to date  <pre><code>trunc(x, 'days') |&gt; as.POSIXct()\n</code></pre> Drops the time component, falling back to midnight 00:00:00  Truncate to hours  <pre><code>trunc(x, 'hours') |&gt; as.POSIXct()\n</code></pre>  Truncate to minutes  <pre><code>trunc(x, 'mins') |&gt; as.POSIXct()\n</code></pre>"},{"location":"r/datetime/posixct/#convert","title":"Convert","text":"Action Code Details  To <code>Date</code> <pre><code>as.Date(x)\n</code></pre>  To <code>POSIXlt</code> <pre><code>as.POSIXlt(x)\n</code></pre>"},{"location":"r/datetime/posixct/#format-as-string","title":"Format as string","text":"Action Code Details  Format as ISO datetime (yyyy-mm-dd HH:MM:SS.SSS)  <pre><code>as.character(x)\n</code></pre>  Format as yyyy-mm-dd HH:MM:SS  <pre><code>format(x)\n</code></pre>  Format as yyyy-mm-dd  <pre><code>format(d, '%Y-%m-%d')\n</code></pre>  Format as dd-mm-yyyy  <pre><code>format(d, '%d-%m-%Y')\n</code></pre>  Format in system locale  <pre><code>format(x, '%a %b %d')\n</code></pre>"},{"location":"r/datetime/posixlt/","title":"POSIXlt","text":""},{"location":"r/datetime/posixlt/#posixlt","title":"POSIXlt","text":""},{"location":"r/datetime/posixlt/#create","title":"Create","text":"Action Code Details  From ymd  <pre><code>ISOdate(year, month, day) |&gt; as.POSIXlt()\n</code></pre>  From ymd  <pre><code>lubridate::make_date(year, month, day) |&gt; as.POSIXlt()\n</code></pre>  From ymdhms  <pre><code>ISOdatetime(year, month, day, hour, minute, second) |&gt; as.POSIXlt()\n</code></pre>  From ymdhms in UTC timezone  <pre><code>ISOdatetime(year, month, day, hour, minute, second, tz = 'UTC') |&gt; as.POSIXlt()\n</code></pre>  Current date in UTC  <pre><code>Sys.Date() |&gt; as.POSIXlt()\n</code></pre>  Current datetime  <pre><code>Sys.time() |&gt; as.POSIXlt()\n</code></pre>  Current datetime  <pre><code>lubridate::now() |&gt; as.POSIXlt()\n</code></pre>  Current datetime in UTC timezone  <pre><code>lubridate::now(tzone = 'UTC') |&gt; as.POSIXlt()\n</code></pre>  Unix epoch  <pre><code>as.POSIXlt(0)\n</code></pre>  From total seconds since Unix epoch  <pre><code>as.POSIXlt(n)\n</code></pre>  Datetime from YYYY-MM-DD string  <pre><code>as.POSIXlt(x)\n</code></pre>  Datetime from YYYY-MM-DD HH:mm:ss string  <pre><code>as.POSIXlt(x)\n</code></pre>  Date from DD-MM-YYYY string  <pre><code>as.POSIXlt(x, format = '%d-%m-%Y')\n</code></pre>"},{"location":"r/datetime/posixlt/#test","title":"Test","text":"Action Code Details  Is POSIXt  <pre><code>inherits(x, 'POSIXt')\n</code></pre>  Is POSIXt  <pre><code>lubridate::is.POSIXt(x)\n</code></pre>  Is POSIXlt  <pre><code>inherits(x, 'POSIXlt')\n</code></pre>  Is POSIXlt  <pre><code>lubridate::is.POSIXlt(x)\n</code></pre>  Same date  <pre><code>x == y\n</code></pre>  Happens before y <pre><code>x &lt; y\n</code></pre>  Happens after y <pre><code>x &gt; y\n</code></pre>"},{"location":"r/datetime/posixlt/#extract","title":"Extract","text":"Action Code Details  Days from Unix epoch  <pre><code>as.Date(x) |&gt; as.integer()\n</code></pre>  Seconds from Unix epoch (timestamp)  <pre><code>as.integer(x)\n</code></pre>  Year  <pre><code>lubridate::year(x)\n</code></pre>  Month  <pre><code>lubridate::month(x)\n</code></pre>  Day  <pre><code>lubridate::day(x)\n</code></pre>  Week number (1-53)  <pre><code>lubridate::week(x)\n</code></pre>  ISO week number (1-52)  <pre><code>lubridate::isoweek(x)\n</code></pre>  Weekday number  <pre><code>lubridate::wday(x, week_start = 1)\n</code></pre> Mon=1, Sun=7  Hour  <pre><code>lubridate::hour(x)\n</code></pre>  Minute  <pre><code>lubridate::minute(x)\n</code></pre>  Second  <pre><code>lubridate::second(x)\n</code></pre>"},{"location":"r/datetime/posixlt/#derive","title":"Derive","text":"Action Code Details  Shift forward by n seconds  <pre><code>x + n\n</code></pre>  Truncate to date  <pre><code>trunc(x, 'days')\n</code></pre> Drops the time component, falling back to midnight 00:00:00  Truncate to hours  <pre><code>trunc(x, 'hours')\n</code></pre>  Truncate to minutes  <pre><code>trunc(x, 'mins')\n</code></pre>"},{"location":"r/datetime/posixlt/#convert","title":"Convert","text":"Action Code Details  To <code>Date</code> <pre><code>as.Date(x)\n</code></pre>  To <code>POSIXct</code> <pre><code>as.POSIXct(x)\n</code></pre>"},{"location":"r/datetime/posixlt/#format-as-string","title":"Format as string","text":"Action Code Details  Format as ISO datetime (yyyy-mm-dd HH:MM:SS.SSS)  <pre><code>as.character(x)\n</code></pre>  Format as yyyy-mm-dd HH:MM:SS  <pre><code>format(x)\n</code></pre>  Format as yyyy-mm-dd  <pre><code>format(d, '%Y-%m-%d')\n</code></pre>  Format as dd-mm-yyyy  <pre><code>format(d, '%d-%m-%Y')\n</code></pre>  Format in system locale  <pre><code>format(x, '%a %b %d')\n</code></pre>"},{"location":"r/devtools/","title":"devtools","text":""},{"location":"r/devtools/#devtools","title":"devtools","text":""},{"location":"r/devtools/#rtools","title":"Rtools","text":"<p>Rtools can be downloaded and installed from https://cran.r-project.org/bin/windows/Rtools/</p> Action Code Details  Check if Rtools is present  <pre><code>pkgbuild::has_rtools()\n</code></pre>"},{"location":"r/devtools/#build","title":"Build","text":"Action Code Details  Check if build tools are present  <pre><code>pkgbuild::check_build_tools()\n</code></pre>"},{"location":"r/devtools/roxygen2/","title":"roxygen2","text":""},{"location":"r/devtools/roxygen2/#roxygen2","title":"roxygen2","text":""},{"location":"r/devtools/roxygen2/#basic-documentation","title":"Basic documentation","text":"Action Code Details  Title  <pre><code>@title Title here\n</code></pre>  Description  <pre><code>@description Description here\n</code></pre>  Parameter  <pre><code>@param data The dataset\n</code></pre>  Dot parameters  <pre><code>@param ... Additional arguments\n</code></pre>  Return  <pre><code>@return Return value description here\n</code></pre>  Class slot  <pre><code>@slot slotName Description here\n</code></pre>  Details  <pre><code>@details Details here\n</code></pre>  Note  <pre><code>@note Notes here\n</code></pre>  Data format  <pre><code>@format Format description here\n</code></pre>"},{"location":"r/devtools/roxygen2/#text-formatting","title":"Text formatting","text":"Action Code Details  Enable markdown  <pre><code>@md\n</code></pre>  Emphasis  <pre><code>_wow_\n</code></pre>  Bold  <pre><code>*wow*\n</code></pre>  In-line equation  <pre><code>\\eqn{a + b}\n</code></pre>  Display equation  <pre><code>\\deqn{a + b}\n</code></pre>  Code  <pre><code>`mu &lt;- mean(data)`\n</code></pre>  Code  <pre><code>\\code{mu &lt;- mean(data)}\n</code></pre>  Code block  <pre><code>\n</code></pre> mu &lt;- mean(data) <pre><code>\n</code></pre>  Monospace font (looks like code)  <pre><code>\\preformatted{\n    text\n}\n</code></pre>  Package name  <pre><code>\\pkg{stats}\n</code></pre>  Unordered list  <pre><code>\\itemize{\n    \\item Option A\n    \\item Option B\n}\n</code></pre>  Ordered list  <pre><code>\\enumerate{\n    \\item First item\n    \\item Second item\n}\n</code></pre>  Named list  <pre><code>\\describe{\n    \\item{Opt A}{Describe option A}&lt;\n    \\item{Opt B}{Describe option B}\n}\n</code></pre>  Table  <pre><code>?\n</code></pre> Use markdown?  Sections  <pre><code>@details First part\n@details Second part (will be a new section)\n</code></pre>  Arbitrary sections  <pre><code>@section Title:\nText here\n</code></pre>  Subsections  <pre><code>@details\n## This is a subsection\nWith text\n#### Subsubsection here\nWith text\n</code></pre>"},{"location":"r/devtools/roxygen2/#link","title":"Link","text":"Action Code Details  Website  <pre><code>&lt;https://r-project.org&gt;\n</code></pre>  With different text  <pre><code>[text](link)\n</code></pre>  To internal topic defined by @name name <pre><code>[name]\n</code></pre>  To external package  <pre><code>[stats][stats-package]\n</code></pre>  To external package function  <pre><code>[stats::predict]\n</code></pre>  To internal or global function  <pre><code>[predict()]\n</code></pre>  To package function  <pre><code>[stats::predict()]\n</code></pre>  To function with different text  <pre><code>[fancyName()][stats::predict()]\n</code></pre>  To class  <pre><code>[Time]\n</code></pre>  To external class  <pre><code>[stats::Time]\n</code></pre>  To S4 class  <pre><code>\\linkS4class{lcModel}\n</code></pre>  With special characters  <pre><code>\\code{\\link[magrittr]{\\%&gt;\\%}}\n</code></pre>  See-also  <pre><code>@seealso [mean] [stats::median]\n</code></pre>  See-also vignette  <pre><code>@seealso browseVignettes('roxygen2')\n</code></pre>  Family  <pre><code>@family sharedNames\n</code></pre>  Specify source  <pre><code>@source This dataset was generated using [generateData]\n</code></pre>  References  <pre><code>@references\n\\insertRef{benaglia2009mixtools}{latrend}\n</code></pre>  E-mail  <pre><code>\\email{example@@example.com}\n</code></pre>"},{"location":"r/devtools/roxygen2/#examples","title":"Examples","text":"<p>Documenting code examples</p> Action Code Details  Examples  <pre><code>@examples\n1 + 1\nmean(1:9)\n</code></pre>  Examples that should not be run  <pre><code>@examples\n1 + 1\n\\dontrun{\n    stop('oops')\n}\n</code></pre>  Examples that should not be tested  <pre><code>@examples\n\\donttest{\n    stop('oops')\n}\n</code></pre>  Examples for interactive usage only  <pre><code>@examples\nif interactive()\n    browseURL(\"https://roxygen2.r-lib.org\")\n</code></pre>"},{"location":"r/devtools/roxygen2/#dynamic-content","title":"Dynamic content","text":"Action Code Details  In-line code evaluation  <pre><code>`r getRversion()`\n</code></pre> Evaluated during every roxygenize call  Code block evaluation  <pre><code>```{r}\n1 + 1\n</code></pre> <pre><code>&lt;/td&gt;\n&lt;td markdown=\"1\"&gt;Code blocks cannot refer to each other&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr markdown=\"1\"&gt;\n&lt;td markdown=\"1\"&gt;\nGenerate figure\n&lt;/td&gt;\n&lt;td&gt;\n```R\n```{r iris-pairs-plot}\npairs(iris[1:4])[unclass(iris$Species)])\n</code></pre> <pre><code>&lt;/td&gt;\n&lt;td markdown=\"1\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr markdown=\"1\"&gt;\n&lt;td markdown=\"1\"&gt;\nDynamic documentation\n&lt;/td&gt;\n&lt;td&gt;\n```R\n![image](https://example.com)\n</code></pre>"},{"location":"r/devtools/roxygen2/#generating-documentation","title":"Generating documentation","text":"Action Code Details  Generate docs  <pre><code>roxygen2::roxygenise()\n</code></pre> Ctrl+Shift+D  Clean files, then generate docs  <pre><code>roxygen2::roxygenise(clean = TRUE)\n</code></pre>"},{"location":"r/devtools/roxygen2/#topics","title":"Topics","text":"Action Code Details  Don't generate topic  <pre><code>@noRd\n</code></pre>  Create stand-alone topic  <pre><code>@name docname\n@title Topic title\nNULL\n</code></pre>  Package topic  <pre><code>@details\nPackage documentation here.\n@keywords internal\n\"_PACKAGE\"\n</code></pre>  Topic name  <pre><code>@name simpleName\n</code></pre>  Topic file name  <pre><code>@rdname simpleName\n</code></pre>  Specify doc inclusion order  <pre><code>@order 1\n</code></pre> Then @order 2 for the second doc  Define alias  <pre><code>@aliases shortName\n</code></pre>  Define alias for S4 method  <pre><code>@aliases predictForCluster,lcModel-method\n</code></pre>  Inherit doc  <pre><code>@inherit docName\n</code></pre>  Inherit doc components  <pre><code>@inherit docName details return\n</code></pre>  Inherit section  <pre><code>@inheritSection docName Section title\n</code></pre>  Inherit param descriptions from another internal function  <pre><code>@inheritParams internalFun\n</code></pre>  Inherit param descriptions from an external function  <pre><code>@inheritParams stats::predict\n</code></pre>  Inherit dot parameters  <pre><code>@inheritDotParams\n</code></pre>  Hide documentation  <pre><code>@keywords internal\n</code></pre>"},{"location":"r/devtools/roxygen2/#namespace-generation","title":"Namespace generation","text":"Action Code Details  Import package  <pre><code>@import stats\n</code></pre>  Import packages  <pre><code>@import stats splines\n</code></pre>  Import function(s) from package  <pre><code>@importFrom stats predict fitted\n</code></pre>  Import S3 generic  <pre><code>@importFrom pkg generic\n</code></pre>  Import S4 classes from package  <pre><code>@importClassesFrom stats Time\n</code></pre>  Import S4 methods from package  <pre><code>@importMethodsFrom stats time time2\n</code></pre>  Collate / ensure other R files are loaded first  <pre><code>@include first.R second.R\n</code></pre>  Export function  <pre><code>@export\n</code></pre>  Export class and methods  <pre><code>@export\nsetClass(\u2026)\n</code></pre>  Export class  <pre><code>@exportClass lcModel\n</code></pre>  Export class method  <pre><code>@exportMethod evaluate\n</code></pre>"},{"location":"r/eval/","title":"Dynamic evaluation","text":""},{"location":"r/eval/#dynamic-evaluation","title":"Dynamic evaluation","text":""},{"location":"r/eval/#variables","title":"Variables","text":"Action Code Details  Generate valid variable names from string(s)  <pre><code>make.names('a@b')\n</code></pre>  Generate unique variable names from string(s)  <pre><code>make.unique(rep('a', 2))\n</code></pre>  Check if variable exists  <pre><code>exists('var')\n</code></pre>  Get variable name from expression  <pre><code>deparse(substitute(expr))\n</code></pre>  Fill in variable values (substitute) in expression  <pre><code>substitute(expr, env)\n</code></pre> Useful when expression is called in another function  Force evaluation of variable  <pre><code>force(arg)\n</code></pre>"},{"location":"r/eval/#environments","title":"Environments","text":"Action Code Details  Create new environment, inherit from global  <pre><code>environment()\n</code></pre>  Create new environment without parent  <pre><code>new.env(parent = emptyenv())\n</code></pre> Technically has a parent, but inherits no variables  Check if variable exists in environment  <pre><code>exists('var', envir=env)\n</code></pre>  Get current environment  <pre><code>sys.frame()\n</code></pre>  Get parent environment  <pre><code>parent.frame()\n</code></pre>  Get package environment  <pre><code>getNamespace('package')\n</code></pre>  Find environment of variable  <pre><code>pryr::where('var')\n</code></pre>  Get value of variable in environment  <pre><code>get('var', envir=env)\n</code></pre>  Try get value of variable, with default return  <pre><code>get0('var', envir=env, ifnotfound='default value')\n</code></pre>"},{"location":"r/eval/#dynamic-evaluation_1","title":"Dynamic evaluation","text":"Action Code Details  Create call  <pre><code>call = quote(A = 1)\n</code></pre>  Create expression  <pre><code>expr = expression(A = 1)\n</code></pre>  Create expression from string  <pre><code>expr = parse(text='A = 1')\n</code></pre>  Evaluate call  <pre><code>eval(call)\n</code></pre>  Substitute a call  <pre><code>do.call(substitute, list(CALL, env=ENV))\n</code></pre> where CALL is stored in a variable  Evaluate expression  <pre><code>eval(expr)\n</code></pre>  Evaluate expression with specified values for (undefined) variables  <pre><code>a = 1\nq = quote(a + b)\neval(q, list(b=3))\n</code></pre>  Get expression as string  <pre><code>deparse(expr, width.cutoff=500)\n</code></pre>  Force evaluation of variable  <pre><code>force(arg)\n</code></pre>  Lazy-evaluate a variable assignment through expression  <pre><code>delayedAssign('x', 2 + 2)\n</code></pre>  Call inline function  <pre><code>{function(x) x + 1}(5)\n</code></pre>  Call function with some arguments forced  <pre><code>forceAndCall(f)\n</code></pre>  Call function with arguments in list  <pre><code>do.call(fun, list(5))\n</code></pre>  Call function with arguments in list, ignoring unused  <pre><code>R.utils::doCall(fun, n=100, args=env)\n</code></pre>"},{"location":"r/eval/#chained-function-evaluation","title":"Chained function evaluation","text":"<p>Also referred to as piping. Snippets use the magrittr package</p> Action Code Details  Chain functions  <pre><code>y = x %&gt;% table %&gt;% prop.table\n</code></pre>  Chain function calls, using the former input as a later argument  <pre><code>z = data.table(\u2026) %&gt;% .[, mean(x)]\n</code></pre> call must be placed in brackets for embedded function calls  Call consecutive function, but return the former value  <pre><code>y = x %&gt;% table %T&gt;% print\n</code></pre>  Call functions and update the LHS  <pre><code>x %&lt;&gt;% sort %&gt;% abs\n</code></pre>"},{"location":"r/eval/#functions","title":"Functions","text":"Action Code Details  Get all arguments, including defaults  <pre><code>mget(names(formals()),sys.frame(sys.nframe()))\n</code></pre>  Get all specified arguments, including ellipsis  <pre><code>as.list(match.call()[-1])\n</code></pre>  Pass all specified arguments to a nested function  <pre><code>match.call() %&gt;% eval()\n</code></pre>  Pass all specified arguments to a nested function  <pre><code>call = match.call()\ncall$extra = 'test'\neval(call)\n</code></pre>  Pass all specified arguments to a nested function  <pre><code>call = match.call()\ncall[[1]] = as.symbol('newFunction')\neval(call)\n</code></pre>  Get name of the parent calling function  <pre><code>parentCall = sys.calls()[[sys.nframe()-2]]\nas.character(parentCall[[1]])\n</code></pre>"},{"location":"r/parallel/","title":"Parallel computation","text":""},{"location":"r/parallel/#parallel-computation","title":"Parallel computation","text":""},{"location":"r/parallel/#foreach-package","title":"Foreach package","text":""},{"location":"r/parallel/#for-each-loop","title":"For-each loop","text":"Action Code Details  Sequential for-loop  <pre><code>foreach(i = 1:4) %do% {\n    Sys.sleep(1)\n}\n</code></pre> Useful for debugging purposes  Parallel for-each loop  <pre><code>foreach(i = 1:4) %dopar% {\n    Sys.sleep(4)\n}\n</code></pre>  Combine results through concatenation  <pre><code>foreach(i=1:4, .combine=c) %dopar% {\n    1\n}\n</code></pre>  Post-process results  <pre><code>foreach(..., .final=as.integer)\n</code></pre>  Provide initial output object  <pre><code>lm0 = lm(y~x, data=dt)\nforeach(i = 1:4, .init=lm0) %dopar% {\n    lm(y~x, data=dt)\n}\n</code></pre> Saves time  Run loop in arbitrary order  <pre><code>foreach(..., .inorder=FALSE)\n</code></pre> More efficient  Load packages needed by the for-loop body  <pre><code>foreach(..., .packages=c('data.table'))\n</code></pre>  Ignore and exclude errors from result  <pre><code>foreach(..., .errorhandling='remove')\n</code></pre>  Expose variable to for-loop body  <pre><code>foreach(..., .export=c('var'))\n</code></pre>  Exclude from export  <pre><code>foreach(..., .noexport=c('var'))\n</code></pre>  Verbose mode  <pre><code>foreach(..., .verbose=TRUE)\n</code></pre>"},{"location":"r/parallel/#register-parallel-back-end","title":"Register parallel back-end","text":"Action Code Details  snow  <pre><code>library(snow)\nlibrary(doSNOW)\ncl = makeCluster(detectCores()-1)\nregisterDoSNOW(cl)\n</code></pre>  Stop snow  <pre><code>stopCluster(cl)\n</code></pre>  snowfall  <pre><code>library(snowfall)\nlibrary(doSNOW)\nsfInit(parallel=TRUE, cpus=detectCores()-1)\nregisterDoSNOW(sfGetCluster())\n</code></pre>  Stop snowfall  <pre><code>sfStop()\n</code></pre>  Check if a parallel back-end is registered  <pre><code>getDoParRegistered()\n</code></pre>  Unregister parallel back-end  <pre><code>registerDoSEQ()\n</code></pre>"},{"location":"r/parallel/#future-package","title":"Future package","text":"Action Code Details  Create future  <pre><code>f = future({ 100 })\n</code></pre>  Apply a function to a list  <pre><code>future.apply::future_lapply(1:2, cat)\n</code></pre>  Check if a future has finished computation  <pre><code>resolved(f)\n</code></pre>  Get the computed value of a future (blocking)  <pre><code>value(f)\n</code></pre>  Get all futures from an environment or list  <pre><code>futures(results)\n</code></pre>  Retrieve result ignoring errors  <pre><code>result = tryCatch(x, error=function(e) NULL)\n</code></pre>"},{"location":"r/parallel/#run","title":"Run","text":"Action Code Details  Run an expression  <pre><code>x %&lt;-% { 100 }\n</code></pre> x %&lt;-% { 100 } y %&lt;-% { 200 } x  + y # blocks until results for x and y are in  Run expression with operator conflict from other package  <pre><code>future::`%&lt;-%`(x, { 100 })\n</code></pre>  Run expression with a label  <pre><code>x %&lt;-% { 100 } %label% 'math'\n</code></pre>  Run expression only once its value is requested  <pre><code>x %&lt;-% { 100 } %lazy% TRUE\n</code></pre>  Run expression with seed  <pre><code>RNGkind(\"L'Ecuyer-CMRG\")\nx %&lt;-% { rnorm(0, 1) } %seed% {set.seed(1); .Random.seed}\n</code></pre>  Run expressions and put results in list  <pre><code>results = listenv::listenv()\nresults[1] %&lt;-% 200;\nresults[2] %&lt;-% 300;\n</code></pre>"},{"location":"r/plot/","title":"Plots","text":""},{"location":"r/plot/#plots","title":"Plots","text":"<p>Sheets on data visualizations, plots, charts, graphs.</p>"},{"location":"r/plot/ggplot2/","title":"ggplot2","text":""},{"location":"r/plot/ggplot2/#ggplot2","title":"ggplot2","text":"<p>A declarative approach to creating plots from tidy data.</p> <p>See https://ggplot2.tidyverse.org/</p> <p>Details This sheet is a work in progress.</p> <p>Code <pre><code>library(ggplot2)\nlibrary(scales)\ndata(iris)\ndata(diamonds)\ndata(economics)\n\n# some snippets use the Orthodont data from the nlme package\nlibrary(nlme)\ndata(Orthodont)\n</code></pre></p>"},{"location":"r/plot/ggplot2/#theming","title":"Theming","text":"<p>For themes, see https://ggplot2-book.org/themes#sec-themes</p> Action Code Details  Set default theme  <pre><code>theme_set(theme_minimal())\n</code></pre>  Set viridis as default color  <pre><code>options(\n    ggplot2.discrete.colour = 'viridis',\n    ggplot2.discrete.fill = 'viridis',\n    ggplot2.continuous.colour = 'viridis',\n    ggplot2.continuous.fill = 'viridis'\n)\n</code></pre>  Set viridis option as default color  <pre><code>options(\n    ggplot2.discrete.colour = function(...) scale_color_viridis_d(..., option = 'turbo'),\n    ggplot2.discrete.fill = function(...) scale_fill_viridis_d(..., option = 'turbo'),\n    ggplot2.continuous.colour = function(...) scale_color_viridis_c(..., option = 'turbo'),\n    ggplot2.continuous.fill = function(...) scale_fill_viridis_c(..., option = 'turbo')\n)\n</code></pre>"},{"location":"r/plot/ggplot2/#plots","title":"Plots","text":""},{"location":"r/plot/ggplot2/#distribution-plots","title":"Distribution plots","text":""},{"location":"r/plot/ggplot2/#boxplots","title":"Boxplots","text":"Action Code Details  Boxplot, oriented horizontally  <pre><code>ggplot(iris, aes(x = Sepal.Length)) +\n    geom_boxplot()\n</code></pre>  Boxplot, hide outliers  <pre><code>ggplot(iris, aes(x = Sepal.Length)) +\n    geom_boxplot(outlier.shape = NA)\n</code></pre>  Boxplot, oriented vertically  <pre><code>ggplot(iris, aes(y = Sepal.Length)) +\n    geom_boxplot()\n</code></pre>  Boxplot by group  <pre><code>ggplot(iris, aes(x = Sepal.Length, y = Species)) +\n    geom_boxplot()\n</code></pre>  Boxplot by two grouping factors  <pre><code>ggplot(diamonds, aes(x = price, y = cut, fill = clarity)) +\n    geom_boxplot()\n</code></pre>"},{"location":"r/plot/ggplot2/#histograms","title":"Histograms","text":"Action Code Details  Plot histogram for discrete data (frequency per category)  <pre><code>ggplot(iris, aes(x = Species)) +\n    geom_bar()\n</code></pre>  Plot normalized histogram (AUC = 1) for discrete data  <pre><code>ggplot(iris, aes(x = Species)) +\n    geom_bar(aes(y = after_stat(count) / sum(after_stat(count))))\n</code></pre>  Plot histogram centered at integer values  <pre><code>ggplot(iris, aes(x = Sepal.Length)) +\n    geom_histogram(binwidth = 1, boundary = -.5)\n</code></pre>  Plot histogram for continuous data  <pre><code>ggplot(iris, aes(x = Sepal.Length)) +\n    geom_histogram()\n</code></pre>  Plot histogram as a stack of dots (dot plot)  <pre><code>ggplot(iris, aes(x = Sepal.Length)) +\n    geom_dotplot()\n</code></pre>  Plot histogram with bin-width  <pre><code>ggplot(iris, aes(x = Sepal.Length)) +\n    geom_histogram(binwidth = 1.0)\n</code></pre>  Plot histogram with a given number of bins  <pre><code>ggplot(iris, aes(x = Sepal.Length)) +\n    geom_histogram(bins = 5)\n</code></pre>  Plot histogram and kernel density, for bin width w <pre><code>ggplot(iris, aes(x = Sepal.Length)) +\n    geom_histogram(binwidth = w) +\n    geom_density(aes(y = ..count.. * w))\n</code></pre>  Plot normalized histogram (AUC = 1)  <pre><code>ggplot(iris, aes(x = Sepal.Length)) +\n    geom_histogram(aes(y = ..density..))\n</code></pre>  Plot normalized histogram (AUC = 1) and kernel density  <pre><code>ggplot(iris, aes(x = Sepal.Length)) +\n    geom_histogram(aes(y = ..density..)) +\n    geom_density()\n</code></pre>  Plot proportional histogram as percentage  <pre><code>ggplot(iris, aes(x = Sepal.Length)) +\n    geom_histogram(aes(y = after_stat(count) / sum(after_stat(count)))) +\n    scale_y_continuous(labels = scales::percent) +\n    labs(y = 'Proportion')\n</code></pre>  Facetted histogram chart  <pre><code>ggplot(iris, aes(x = Sepal.Length)) +\n    geom_histogram() +\n    facet_wrap(~ Species)\n</code></pre>  Facetted histogram chart, normalized per facet  <pre><code>ggplot(iris, aes(x = Sepal.Length)) +\n    geom_histogram(aes(y = after_stat(width * density))) +\n    facet_wrap(~ Species) +\n    scale_y_continuous(labels = scales::percent) +\n    labs(y = 'Proportion')\n</code></pre>  Facetted histogram chart, normalized per facet  <pre><code>ggplot(iris, aes(x = Sepal.Length)) +\n    geom_histogram(aes(\n        y = after_stat(count) /\n            tapply(after_stat(count), after_stat(PANEL), sum)[after_stat(PANEL)])\n    ) +\n    facet_wrap(~ Species)\n</code></pre> Yikes"},{"location":"r/plot/ggplot2/#kernel-density-plots","title":"Kernel density plots","text":"Action Code Details  Plot kernel density (AUC = 1)  <pre><code>ggplot(iris, aes(x = Sepal.Length)) +\n    geom_density()\n</code></pre>  Plot kernel density rescaled with peak at 1.0  <pre><code>ggplot(iris, aes(x = Sepal.Length)) +\n    geom_density(aes(y = ..ndensity..))\n</code></pre>  Plot kernel density rescaled with peak at 1.0  <pre><code>ggplot(iris, aes(x = Sepal.Length)) +\n    geom_density(aes(y = ..scaled..))\n</code></pre>  Plot kernel density by group  <pre><code>ggplot(iris, aes(x = Sepal.Length, color = Species)) +\n    geom_density()\n</code></pre>  Facetted kernel density chart  <pre><code>ggplot(iris, aes(x = Sepal.Length)) +\n    geom_density() + facet_wrap(~ Species)\n</code></pre>  Violin plot  <pre><code>?\n</code></pre> Doesn't seem to be possible.  Violin plot with grouping factor  <pre><code>ggplot(iris, aes(x = Sepal.Length, y = Species)) +\n    geom_violin()\n</code></pre>  Violin plot with grouping factor, oriented vertically  <pre><code>ggplot(iris, aes(x = Species, y = Sepal.Length)) +\n    geom_violin()\n</code></pre>"},{"location":"r/plot/ggplot2/#empirical-cumulative-density-plots","title":"Empirical cumulative density plots","text":"Action Code Details  Plot stepped cumulative density  <pre><code>ggplot(iris, aes(x = Sepal.Length)) +\n    stat_ecdf()\n</code></pre>  Plot stepped cumulative density for available interval only  <pre><code>ggplot(iris, aes(x = Sepal.Length)) +\n    stat_ecdf(pad = FALSE)\n</code></pre>  Plot stepped inversed / complementary cumulative density  <pre><code>ggplot(iris, aes(x = Sepal.Length)) +\n    geom_step(aes(y = 1 - ..y..), stat='ecdf')\n</code></pre>  Plot stepped cumulative density by group  <pre><code>ggplot(iris, aes(x = Sepal.Length, color = Species)) +\n    stat_ecdf()\n</code></pre>  Facetted plot of stepped cumulative density  <pre><code>ggplot(iris, aes(x = Sepal.Length)) +\n    stat_ecdf() + facet_wrap(~ Species)\n</code></pre>  Plot interpolated cumulative density  <pre><code>ggplot(iris, aes(x = Sepal.Length)) +\n    geom_line(stat='ecdf')\n</code></pre>  Plot cumulative density as barplot  <pre><code>ggplot(iris, aes(x = Sepal.Length)) +\n    stat_ecdf(geom='bar')\n</code></pre> Ugly, as bars are equal width  Plot step-wise cumulative density with density rug  <pre><code>ggplot(iris, aes(x = Sepal.Length)) +\n    stat_ecdf() + geom_rug()\n</code></pre>"},{"location":"r/plot/ggplot2/#bivariate-plots","title":"Bivariate plots","text":"<p>Plots involving two continuous variables.</p> Action Code Details  Add horizontal line  <pre><code>p + geom_hline(yintercept = 0)\n</code></pre>  Add vertical line  <pre><code>p + geom_vline(xintercept = 0)\n</code></pre>  Add intercept-slope (ab) line  <pre><code>p + geom_abline(intercept = 0, slope = 1)\n</code></pre>  Smooth data  <pre><code>ggplot(economics, aes(x = date, y = unemploy)) +\n    geom_line() +\n    geom_smooth()\n</code></pre>  Smooth with intercept-slope model  <pre><code>ggplot(economics, aes(x = date, y = unemploy)) +\n    geom_line() +\n    geom_smooth(method = 'lm', formula = y ~ x)\n</code></pre>  Smooth data only at the specified x-axis locations  <pre><code>ggplot(economics, aes(x = date, y = unemploy)) +\n    geom_line() +\n    geom_smooth(\n        xseq = seq(0, 5000, by = 100)\n    )\n</code></pre> Not a great example since this is easier for a numeric x-axis.  Quantile regression  <pre><code>ggplot(economics, aes(x = date, y = unemploy)) +\n    geom_line() +\n    geom_quantile()\n</code></pre>"},{"location":"r/plot/ggplot2/#scatter-plots","title":"Scatter plots","text":"Action Code Details  Scatter plot  <pre><code>ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +\n    geom_point()\n</code></pre>  Scatter plot without overlap (jitter plot)  <pre><code>ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +\n    geom_jitter()\n</code></pre>  Scatter plot with bigger points for overlaps, with legend for counts  <pre><code>ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +\n    geom_count()\n</code></pre>  Scatter plot with bigger points for overlaps, with legend for proportional size  <pre><code>ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +\n    geom_count(aes(size = ..prop..))\n</code></pre>  Scatter plot with grouping factor  <pre><code>ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +\n    geom_point()\n</code></pre>  Facetted scatter plot  <pre><code>ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +\n    geom_point() +\n    facet_wrap(~ Species)\n</code></pre>"},{"location":"r/plot/ggplot2/#line-plots","title":"Line plots","text":"Action Code Details  Line plot  <pre><code>ggplot(economics, aes(x = date, y = unemploy)) + geom_line()\n</code></pre>  Line plot, with separate lines per group  <pre><code>ggplot(Orthodont, aes(x = age, y = distance, group = Subject)) +\n    geom_line()\n</code></pre>  Line plot involving duplicate observations per x, as confidence region  <pre><code>?\n</code></pre>  Facetted line plot  <pre><code>ggplot(Orthodont, aes(x = age, y = distance, group = Subject)) +\n    geom_line() +\n    facet_wrap(~ Sex)\n</code></pre>"},{"location":"r/plot/ggplot2/#facetting","title":"Facetting","text":"Action Code Details  Use labeling function for facet titles  <pre><code>p + facet_grid(~ Group, labeller = label_parsed)\n</code></pre>"},{"location":"r/plot/ggplot2/#aestethic-options","title":"Aestethic options","text":"Action Code Details  Define mapping programmatically  <pre><code>var = 'Sepal.Length'\naes_string(x = var)\n</code></pre> Deprecated, but no clue what the alternative is, since documentation is lacking"},{"location":"r/plot/ggplot2/#plot-configuration-esthetics","title":"Plot configuration / esthetics","text":"Action Code Details  Set title  <pre><code>p + labs(title = 'My title')\n</code></pre>  Set subtitle  <pre><code>p + labs(subtitle = 'My subtitle')\n</code></pre>  Set caption  <pre><code>p + labs(caption = 'Based on iris data')\n</code></pre>  Flip axes  <pre><code>p + coord_flip()\n</code></pre>  1:1 aspect ratio of axes  <pre><code>p + coord_equal()\n</code></pre>  Set range of axes  <pre><code>p + xlim(c(0, 10)) + ylim(c(5, 15))\n</code></pre>  Extend range to include data points  <pre><code>p + expand_limits(x = c(0, 1, 5), y = 1)\n</code></pre>  Set axis ticks, with corresponding tick labels  <pre><code>p + scale_x_continuous(breaks = 1:3, labels = LETTERS[1:3])\n</code></pre>  Base-10 log scale axis  <pre><code>p + scale_x_log10()\n</code></pre>  Base 10 log scale axis with labels  <pre><code>p + scale_x_log10(labels = scales::label_log())\n</code></pre>  Set axis label  <pre><code>p + xlab('X-axis') + ylab('Y-axis')\n</code></pre>  Show labels at 45 degree angle  <pre><code>theme(axis.text.x = element_text(angle = 45))\n</code></pre>  Label with subscript  <pre><code>p + labs(x = expression('Pressure support cmH' [2] * 'O)' )\n</code></pre> Strange syntax  Set title and axis labels  <pre><code>p + labs(title = 'My title', x = 'X-axis', y = 'Y-axis')\n</code></pre>  Format axis with percentage labels  <pre><code>p + scale_x_continuous(labels=scales::percent)\n</code></pre>  Format axis with comma as thousands separator  <pre><code>p + scale_x_continuous(labels=scales::comma)\n</code></pre>  Broken axis  <pre><code>?\n</code></pre> Not possible unless manually drawing as two stacked plots  Hide legend of a specific scale  <pre><code>p + scale_fill_discrete(guide = 'none')\n</code></pre>  Hide all legends  <pre><code>theme(legend.position = 'none')\n</code></pre> It is more readable to specify per scale that the legend should be hidden, see <code>show.legend</code>  Hide all legends  <pre><code>p + guides(fill = 'none', color = 'none', linetype = 'none', shape = 'none')\n</code></pre>  Legend without lines  <pre><code>p + guides(\n    fill = guide_legend(override.aes = list(linetype = 0)),\n    color = guide_legend(override.aes = list(linetype = 0))\n)\n</code></pre>  Multirow legend  <pre><code>p + guides(fill = guide_legend(nrow = 2, byrow = TRUE))\n</code></pre> Makes the fill legend multirow  Draw grid in front of geoms  <pre><code>x_intercept = ggplot_build(p)$layout$panel_ranges[[1]]$x.major_source\ny_intercept = ggplot_build(p)$layout$panel_ranges[[1]]$y.major_source\n\np + geom_vline(xintercept = x_intercept, color = '#f0f0f0') +\n        geom_hline(yintercept = y_intercept, color = '#f0f0f0') +\n</code></pre>  Swap data of plot  <pre><code>p %+% newdata\n</code></pre>  Plot using a subset of the (new) data  <pre><code>p %+% subset(mpg, fl == '2')\n</code></pre>"},{"location":"r/rmarkdown/","title":"Rmarkdown","text":"","tags":["markdown","rmd"]},{"location":"r/rmarkdown/#rmarkdown","title":"Rmarkdown","text":"","tags":["markdown","rmd"]},{"location":"r/rmarkdown/#page-info","title":"Page info","text":"Action Code Details  Title  <pre><code>title: my title\n</code></pre>  Author  <pre><code>author: John Smith\n</code></pre>  Author with e-mail as footnote  <pre><code>author: John Smith^[example@example.com]\n</code></pre>  Authors  <pre><code>author:\n  - Bert\n  - Ernie\n</code></pre>  Date  <pre><code>date: 2024-07-17\n</code></pre>  Current date (dynamically)  <pre><code>date: \"r format(Sys.time(), '%d %B %Y')\"\n</code></pre>  Keywords  <pre><code>tags: [analysis, ai]\n</code></pre>","tags":["markdown","rmd"]},{"location":"r/rmarkdown/#text-formatting","title":"Text formatting","text":"Action Code Details  Bold  <pre><code>**text**\n</code></pre>  Italic  <pre><code>*text*\n</code></pre>  Hyperlink with label  <pre><code>[Text](url)\n</code></pre>  Code  <pre><code>`code`\n</code></pre>  Equation  <pre><code>$\\mu$\n</code></pre>","tags":["markdown","rmd"]},{"location":"r/rmarkdown/#document-structuring","title":"Document structuring","text":"","tags":["markdown","rmd"]},{"location":"r/rmarkdown/#sectioning","title":"Sectioning","text":"Action Code Details  Section  <pre><code># Section title\n</code></pre>  Unnumbered section  <pre><code># Section title {-}\n</code></pre>  Hide section from ToC  <pre><code># Section title {.toc-ignore}\n</code></pre>  Tabbed section  <pre><code>## title {.tabset .tabset-fade}\ncontent above tabbed region.\n\n### tab 1\ntab content 1\n\n### tab 2\ntab content 2\n\n##\ncontent below tabbed region\n</code></pre> The newlines are crucial!  Subsection  <pre><code>## Subsection title\n</code></pre>  Subsubsection  <pre><code>### Subsubsection title\n</code></pre>  Paragraph  <pre><code>#### Paragraph title\n</code></pre>  Collapsible paragraph  <pre><code>&lt;details&gt;\n&lt;summary&gt;Show details\u2026&lt;/summary&gt;\n&lt;p&gt;Derp&lt;/p&gt;\n&lt;/details&gt;\n</code></pre>  Horizontal line  <pre><code>***\n</code></pre>","tags":["markdown","rmd"]},{"location":"r/rmarkdown/#lists","title":"Lists","text":"Action Code Details  Define unordered list  <pre><code>* a\n* b\n</code></pre>  Define nested list  <pre><code>* a\n  + b\n* c\n</code></pre>  Dynamic list from code section  <pre><code>```{r, results='asis'}\npaste0('* ', items, collapse='\n') %&gt;% cat\n</code></pre> <pre><code>&lt;/td&gt;\n&lt;td markdown=\"1\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n## Figures\n&lt;table markdown = \"1\"&gt;\n&lt;thead&gt;\n&lt;tr&gt;\n&lt;th class=\"th-action\"&gt;Action&lt;/th&gt;\n&lt;th class=\"th-code\"&gt;Code&lt;/th&gt;\n&lt;th class=\"th-details\"&gt;Details&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tr markdown=\"1\"&gt;\n&lt;td markdown=\"1\"&gt;\nCaptioned dynamic figure from R code\n&lt;/td&gt;\n&lt;td&gt;\n```md\n```{r, fig.align=\"center\", fig.width=6, fig.height=6,\n    fig.cap=\"Figure: Your caption here.\"}\nR CODE HERE\n</code></pre> <pre><code>&lt;/td&gt;\n&lt;td markdown=\"1\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr markdown=\"1\"&gt;\n&lt;td markdown=\"1\"&gt;\nDynamic subfigures from R code\n&lt;/td&gt;\n&lt;td&gt;\n```md\n```{r out.width=c('50%', '50%'), fig.show='hold'}\nboxplot(1:10)\nplot(rnorm(10))\n</code></pre> <pre><code>&lt;/td&gt;\n&lt;td markdown=\"1\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr markdown=\"1\"&gt;\n&lt;td markdown=\"1\"&gt;\nInteractive ggplot\n&lt;/td&gt;\n&lt;td&gt;\n```md\n```{r}\np = ggplot(data, aes(x=x, y=y, color=z)) +\n    geom_point()\nplotly::ggplotly(p)\n</code></pre> <pre><code>&lt;/td&gt;\n&lt;td markdown=\"1\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n## Tables\n&lt;table markdown = \"1\"&gt;\n&lt;thead&gt;\n&lt;tr&gt;\n&lt;th class=\"th-action\"&gt;Action&lt;/th&gt;\n&lt;th class=\"th-code\"&gt;Code&lt;/th&gt;\n&lt;th class=\"th-details\"&gt;Details&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tr markdown=\"1\"&gt;\n&lt;td markdown=\"1\"&gt;\nDataframe as table\n&lt;/td&gt;\n&lt;td&gt;\n```md\nkable(df)\n</code></pre>  Dynamic sortable table from dataframe  <pre><code>DT::datatable(\u2026)\n</code></pre>  Scrollable table from dataframe  <pre><code>DT::datatable(mtcars, rownames = FALSE,\n    filter=\"top\", options = list(pageLength = 5, scrollX=T) )\n</code></pre>  Named list as table  <pre><code>`r unlist(mylist) %&gt;% as.data.frame %&gt;% kable(col.names='Value')`\n</code></pre>  Knitr params list as table  <pre><code>`r unlist(params) %&gt;% as.data.frame %&gt;%\n    kable(col.names='Value', caption='Parameters')`\n</code></pre>","tags":["markdown","rmd"]},{"location":"r/rmarkdown/#code-block-options","title":"Code block options","text":"<p>To hide code blocks by default, set code_folding: \"hide\" in the output document parameters.</p> Action Code Details  Run, show output only  <pre><code>echo=F\n</code></pre>  Run, show code only  <pre><code>echo=T, results='hide'\n</code></pre>  Show code, don't run  <pre><code>eval=F\n</code></pre>  Interpret output as markdown code  <pre><code>results='asis'\n</code></pre>  Hide messages  <pre><code>message=F\n</code></pre>  Hide warnings  <pre><code>warning=F\n</code></pre>","tags":["markdown","rmd"]},{"location":"r/stats/","title":"Stats","text":""},{"location":"r/stats/#stats","title":"Stats","text":""},{"location":"r/stats/formula/","title":"formula","text":""},{"location":"r/stats/formula/#formula","title":"formula","text":""},{"location":"r/stats/formula/#create","title":"Create","text":"Action Code Details  Intercept only  <pre><code>y ~ 1\n</code></pre>  With intercept and single variable  <pre><code>y ~ x\n</code></pre>  Without intercept, and single variable  <pre><code>y ~ -1 + x\n</code></pre>  With all variables  <pre><code>y ~ .\n</code></pre>  No response variable  <pre><code>~ 1\n</code></pre>  From string  <pre><code>as.formula(str)\n</code></pre>  From string  <pre><code>eval(parse(text='y ~ x'))\n</code></pre> Not recommended"},{"location":"r/stats/formula/#test","title":"Test","text":"Action Code Details  Is formula  <pre><code>is(f, 'formula')\n</code></pre>  Is formula or subclass  <pre><code>inherits(f, 'formula')\n</code></pre>  Formulas are equal  <pre><code>f1 == f2\n</code></pre>  Formulas are equal  <pre><code>isTRUE(all.equal(f1, f2))\n</code></pre>  Has response  <pre><code>attr(terms(f), 'response') != 0\n</code></pre>  Has intercept  <pre><code>attr(terms(f), 'intercept') != 0\n</code></pre> Surely there is an easier way"},{"location":"r/stats/formula/#extract","title":"Extract","text":"Action Code Details  Variable names  <pre><code>all.vars(f)\n</code></pre>  Left-hand side variable names  <pre><code>all.vars(update(f,  ~ 1))\n</code></pre>  Right-hand side variable names  <pre><code>all.vars(update(f,  1 ~ .))\n</code></pre>  Environment  <pre><code>environment(f)\n</code></pre>"},{"location":"r/stats/formula/#derive","title":"Derive","text":"Action Code Details  Add a term  <pre><code>update(f, ~ . + w)\n</code></pre>  Add terms  <pre><code>update(f, ~ . + w + z)\n</code></pre>  Set response  <pre><code>update(f, y ~ .)\n</code></pre>  Set terms  <pre><code>update(f, ~ w + z)\n</code></pre>  Remove response  <pre><code>update(f, NULL ~ .)\n</code></pre>  Remove response  <pre><code>formula(delete.response(terms(f)))\n</code></pre>  Remove intercept  <pre><code>update(f, ~ . + -1)\n</code></pre>  Remove environment  <pre><code>environment(f) = NULL\n</code></pre> Useful for formula serialization to prevent the entire workspace from being serialized along with it"},{"location":"r/stats/formula/#evaluate","title":"Evaluate","text":"Action Code Details  Evaluate a formula with known coefficients  <pre><code>mm = model.matrix( ~ a + poly(b, 2, raw=TRUE), data.frame(a=1, b=2:4))\npred = coef %*% t(mm)\n</code></pre>"},{"location":"r/stats/formula/#convert","title":"Convert","text":"Action Code Details  String  <pre><code>deparse(f)\n</code></pre>  String array  <pre><code>as.character(f)\n</code></pre>"},{"location":"r/stats/nlme/","title":"nlme","text":""},{"location":"r/stats/nlme/#nlme","title":"nlme","text":"<p>Useful links:</p> <ul> <li>https://quantdev.ssri.psu.edu/sites/qdev/files/ILD_Ch06_2017_MLMwithHeterogeneousVariance.html</li> </ul> <p>Code <pre><code>library(nlme)\n</code></pre></p>"},{"location":"r/stats/nlme/#create","title":"Create","text":"Action Code Details  Random intercept model with subject as grouping factor  <pre><code>lme(fixed = y ~ 1, random = ~ 1 | subject)\n</code></pre>"},{"location":"r/stats/nlme/#specify","title":"Specify","text":"<p>Further specification options for <code>lme()</code></p> Action Code Details  Random intercept per group  <pre><code>random = ~ 1 | subject\n</code></pre>  Random intercept per group  <pre><code>random = list(subject = pdSymm(form = ~ 1))\n</code></pre>  Random intercept, with different between-subject SD per secondary grouping  <pre><code>random = list(subject = pdDiag(form = ~ diagnosis))\n</code></pre>  Within-subject error per secondary grouping  <pre><code>weights = varIdent(form = ~ 1 | diagnosis)\n</code></pre>  With AR-1 correlation structure  <pre><code>correlation = corAR1(form = ~ 1 | subject)\n</code></pre>"},{"location":"r/stats/nlme/#model-fit","title":"Model fit","text":"Action Code Details  Log-likelihood  <pre><code>logLik(model)\n</code></pre>  AIC  <pre><code>AIC(model)\n</code></pre>  BIC  <pre><code>BIC(model)\n</code></pre>  ICC  <pre><code>performance::icc(model)\n</code></pre> Proportion of the total variance explained by the between-cluster variance. Higher is better. 0.1 is considered a meaningful threshold.  Marginal pseudo R-squared  <pre><code>r.squaredGLMM(model)[1, 'R2m']\n</code></pre>  Conditional pseudo R-squared  <pre><code>r.squaredGLMM(model)[1, 'R2c']\n</code></pre>  Plot residuals against predicted  <pre><code>plot(model)\n</code></pre>  Plot random effects  <pre><code>plot(ranef(model))\n</code></pre>  Q-Q plot  <pre><code>car::qqPlot(residuals(model))\n</code></pre>"},{"location":"r/stats/nlme/#extract-info-from-a-fitted-model","title":"Extract info from a fitted model.","text":"Action Code Details  Fixed effects coefficients  <pre><code>fixef(model)\n</code></pre>  Fixed effects coefficient intervals  <pre><code>intervals(model)\n</code></pre>  Variance and SD summary  <pre><code>VarCorr(model)\n</code></pre>  Variance-covariance matrix  <pre><code>vcov(model)\n</code></pre>  Within-group variance  <pre><code>sigma(model)^2\n</code></pre>  Within-group SD  <pre><code>sigma(model)\n</code></pre>  Within-subject SD for group $GROUP (when using <code>weights=varIdent</code>)  <pre><code>sigma(model) * coef(\n    model$modelStruct$varStruct,\n    unconstrained = FALSE,\n    allCoef = TRUE\n)['$GROUP']\n</code></pre>  Between-group variance  <pre><code>VarCorr(model)['Residual', 'Variance']\n</code></pre>  Between-group SD  <pre><code>VarCorr(model)['Residual', 'StdDev']\n</code></pre>"},{"location":"r/stats/nlme/#extract-effect-size","title":"Extract effect size","text":"Action Code Details  Cohen's d for main effects  <pre><code>EMAtools::lme.dscore(model, type = 'nlme')\n</code></pre>  Cohen's d for group difference  <pre><code>emg = emmeans::emmeans(model, ~ diagnosis)\nemmeans::eff_size(\n    emg,\n    sigma = sigma(model),\n    edf = data.frame(pairs(emg))$df[1]\n)\n</code></pre> Use with care  Cohen's f for main effects  <pre><code>effectsize::cohens_f(model)\n</code></pre> d = 2 * f"},{"location":"r/stats/nlme/#hypothesis-testing","title":"Hypothesis testing","text":"Action Code Details  Coefficient significance  <pre><code>car::Anova(model)\n</code></pre>  Test for nested model improvement (likelihood ratio test)  <pre><code>performance::test_lrt(model0, model1)\n</code></pre>  Test for nested model improvement (likelihood ratio test)  <pre><code>anova(model0, model1)\n</code></pre>"},{"location":"r/stats/rstan/","title":"RStan","text":"","tags":["stan"]},{"location":"r/stats/rstan/#rstan","title":"RStan","text":"<p>Code <pre><code>library(rstan)\n</code></pre></p>","tags":["stan"]},{"location":"r/stats/rstan/#installation","title":"Installation","text":"<p>For standard installation instructions, see https://github.com/stan-dev/rstan/wiki/RStan-Getting-Started</p> Action Code Details  Install latest dev version from Github  <pre><code>remotes::install_github(\"stan-dev/rstan\",\n    ref = \"develop\", subdir = \"rstan/rstan\", build_opts = \"\")\n</code></pre>  Reinstall on Windows  <pre><code># Install rtools\n# Check toolchain\npkgbuild::has_build_tools(debug = TRUE)\n# Optimize toolchain\ndotR &lt;- file.path(Sys.getenv(\"HOME\"), \".R\")\nif (!file.exists(dotR)) dir.create(dotR)\nM &lt;- file.path(dotR, ifelse(.Platform$OS.type == \"windows\", \"Makevars.win\", \"Makevars\"))\nif (!file.exists(M)) file.create(M)\ncat(\n    \"\nCXX14FLAGS=-O3 -march=native -mtune=native\",\n    if( grepl(\"^darwin\", R.version$os)) \"CXX14FLAGS += -arch x86_64 -ftemplate-depth-256\" else\n    if (.Platform$OS.type == \"windows\") \"CXX11FLAGS=-O3 -march=corei7 -mtune=corei7\" else\n    \"CXX14FLAGS += -fPIC\",\n    file = M, sep = \"\n\", append = TRUE\n)\n# Install package\nremove.packages(\"rstan\")\ninstall.packages(\"rstan\", repos = \"https://cloud.r-project.org/\", dependencies = TRUE)\n</code></pre>  Reinstall on Linux  <pre><code># check gcc version\nsystem('gcc -v')\nremove.packages(\"rstan\")\nremove.packages(\"StanHeaders\")\ninstall.packages('rstan')\n</code></pre>","tags":["stan"]},{"location":"shell/","title":"Shell","text":""},{"location":"shell/#shell","title":"Shell","text":"<p>A collection of shell script languages and command-line argument tools.</p>"},{"location":"shell/batch/","title":"Windows Batch","text":""},{"location":"shell/batch/#windows-batch","title":"Windows Batch","text":"<p>Scripting language for Windows Batch files.</p> <p>Details To write comments, start the line with <code>::</code> or <code>REM</code>. For in-line comments, use <code>&amp; ::</code> or <code>&amp; REM</code>.</p>"},{"location":"shell/batch/#command-line-argument-handling","title":"Command-line argument handling","text":"Action Code Details  Print _n_th parameter  <pre><code>echo %n\n</code></pre>  Check equality of _n_th parameter  <pre><code>if %n%==1 echo \"Arg is 1!\"\n</code></pre>"},{"location":"shell/batch/#variables","title":"Variables","text":"<p>By default, variables are global!</p> <p>For local declaration and usage of variables, encapsulate them in <code>SETLOCAL</code> and <code>ENDLOCAL</code>.</p> Action Code Details  Declare variable named name with value value <pre><code>set name = value\n</code></pre>  Declare string variable  <pre><code>set msg = Hello world!\n</code></pre>  Declare empty string variable  <pre><code>set msg =\n</code></pre>  Declare numeric variable named name with value value <pre><code>set /A name = value\n</code></pre>  Get value of variable named name <pre><code>%name%\n</code></pre> Environment variables are just variables.  Get PATH environment variable  <pre><code>%PATH%\n</code></pre>  Test of variable exists  <pre><code>set var1 = 2\nif defined var1 echo \"Variable var1 exists!\"\n</code></pre>"},{"location":"shell/batch/#control-flow","title":"Control flow","text":"Action Code Details  If  <pre><code>if %status% == 200 echo OK\n</code></pre>  If-else  <pre><code>if %status% == 200 (echo OK) else (echo Error)\n</code></pre>  For-loop over range [a, b] with stepsize s <pre><code>for /L %%var in (a,s,b) do echo %%var\n</code></pre>  Pause until user presses a key  <pre><code>pause\n</code></pre>  Pause until n seconds have elapsed or user presses a key  <pre><code>timeout n\n</code></pre>  End execution of script  <pre><code>exit /B\n</code></pre>  End execution of script  <pre><code>goto :eof\n</code></pre>"},{"location":"shell/batch/#number-handling","title":"Number handling","text":"Action Code Details  Add  <pre><code>set /A y = %x% + 1\n</code></pre>  Subtract  <pre><code>set /A y = %x% - 2\n</code></pre>  Multiply  <pre><code>set /A y = %x% * 2\n</code></pre>  Divide  <pre><code>set /A y = %x% / 2\n</code></pre>  Modulus  <pre><code>set /A y = x % 2\n</code></pre>"},{"location":"shell/batch/#string-handling","title":"String handling","text":"Action Code Details  Number of characters (length)  <pre><code>?\n</code></pre> No standard function available  Concatenate strings  <pre><code>set w = world\nset /a y = 2024\nset msg = Hello %w% in %y%!\n</code></pre>  Test for empty string  <pre><code>[%msg%]==[]\n</code></pre>  Parse as integer  <pre><code>set /a count = %countstr%\n</code></pre>"},{"location":"shell/batch/#output","title":"Output","text":"Action Code Details  Clear console  <pre><code>cls\n</code></pre>"},{"location":"shell/batch/#standard-output","title":"Standard output","text":"Action Code Details  Disable command prompts  <pre><code>@echo off\n</code></pre>  Print string  <pre><code>echo Hello world!\n</code></pre>"},{"location":"shell/batch/#filesystem-handling","title":"Filesystem handling","text":"Action Code Details  Check if file exists  <pre><code>if exist C:\\file.txt echo \"File exists\"\n</code></pre>"},{"location":"shell/ksh/","title":"Korn shell","text":""},{"location":"shell/ksh/#korn-shell","title":"Korn shell","text":"<p>https://en.wikipedia.org/wiki/KornShell</p> <p>Details Notes:</p> <ul> <li>Start script with: <code>#!/bin/ksh</code></li> <li>Enable executation for file by running <code>chmod u+x script.sh</code></li> </ul>"},{"location":"shell/ksh/#command-line-argument-parsing","title":"Command-line argument parsing","text":"Action Code Details  Program name, including the path if started from another directory  <pre><code>$0\n</code></pre>  Number of arguments  <pre><code>$#\n</code></pre>  Get the _n_th argument  <pre><code>$n\n</code></pre>  Get the _n_th argument, with default value  <pre><code>${n-\"Default value here\"}\n</code></pre>  Expand all arguments to a single word  <pre><code>$*\n</code></pre>  Expand all arguments to single string  <pre><code>$@\n</code></pre>  Expand arguments to separate words  <pre><code>\"$@\"\n</code></pre>"},{"location":"shell/ksh/#test","title":"Test","text":"Action Code Details  Check for zero arguments  <pre><code>if [[ $# -eq 0 ]];then\n    print \"No Arguments\"\n    exit\nfi\n</code></pre>"},{"location":"shell/ksh/#special-variables","title":"Special variables","text":"<p>Note that the positional parameters are special variables too.</p> Action Code Details  Exit status of last command  <pre><code>$?\n</code></pre>  Process id of current program  <pre><code>$$\n</code></pre>  Process id of last background job  <pre><code>$!\n</code></pre>"},{"location":"shell/ksh/#constants","title":"Constants","text":"Action Code Details  Declare constant  <pre><code>declare -r PASSWD_FILE=/etc/passwd\n</code></pre>"},{"location":"shell/ksh/#variables","title":"Variables","text":"<ul> <li>Don't put dots in variable names!</li> <li>By default, all variables are global! Even within functions!</li> </ul> Action Code Details  Get variable value  <pre><code>$var\n</code></pre>  Get variable value with default value value <pre><code>${var:-value}\n</code></pre>  Get variable value but throw error if not set  <pre><code>${var:?\"Error! var not set!\"}\n</code></pre>  Get variable and set it with default value if it is not set  <pre><code>${var:=value}\n</code></pre>  Check if variable is set  <pre><code>${var:+1}\n</code></pre> Returns 1 if set, else nothing  Set value for variable  <pre><code>var=value\n</code></pre>  Set value from user input  <pre><code>read var\n</code></pre>  Set command output for variable  <pre><code>var=command args\n</code></pre>  Declare local variable  <pre><code>typeset var\n</code></pre>  Set local variable  <pre><code>typeset var = value\n</code></pre>"},{"location":"shell/ksh/#functions","title":"Functions","text":"<p>Use the <code>local</code> statement to define local variables.</p> Action Code Details  Define function  <pre><code>function get_name {\n    return $name\n}\n</code></pre>  Define function with arguments  <pre><code>function increment {\n    local x = $1\n    return (( $x + 1 ))\n}\n</code></pre>  Call function  <pre><code>foo\n</code></pre>  Call function with arguments  <pre><code>foo arg1 arg2\n</code></pre>"},{"location":"shell/ksh/#control-flows","title":"Control flows","text":"<p>See http://www.bolthole.com/solaris/ksh-basics.html</p> Action Code Details  Chain (pipe) commands  <pre><code>command1 | command2 | command3\n</code></pre>  If  <pre><code>if [[ $value -eq 2 ]];then\n    print \"$value is 2\"\nfi\n</code></pre>  If-else  <pre><code>if [[ $value -eq 2 ]];then\n    print \"$value is 2\"\nelse\n    print \"$value is not 2\"\nfi\n</code></pre>  If-elseif  <pre><code>if [[ $status -eq 200 ]];then\n    print \"OK (status = 200)\"\nelif [[ $value -gt 400 ]];then\n    print \"Error (status &gt; 400)\"\nelse\n    print \"Not 200 but &lt; 400\"\nfi\n</code></pre>  Switch  <pre><code>case $food in\n    apple|pear) print \"fruit\";;\n    onion)  print \"veggy\";;\n    *)  print \"unknown\";;\nesac\n</code></pre> Cases don't fall through, unless <code>;&amp;</code> is used instead of <code>;;</code> Strings can be matched using wildcards.  For  <pre><code>for f in $(ls);do\n    (( count += 1 ))\ndone\nprint \"Total: $count\"\n</code></pre> Use <code>continue</code> to skip the loop. Use <code>break</code> to exit the loop.  Until  <pre><code>until [[ $stopnow -eq 1 ]] ; do\n    echo just run this once\n    stopnow=1;\n    echo we should not be here again.\ndone\n</code></pre>  Pause for n seconds  <pre><code>sleep n\n</code></pre>"},{"location":"shell/ksh/#error-handling","title":"Error handling","text":"Action Code Details  Throw error and stop execution, with unspecified error  <pre><code>exit 1\n</code></pre>  Throw error with message  <pre><code>echo \"Error!\" 1&gt;&amp;2\nexit 2\n</code></pre>  Run command only if the former command succeeds  <pre><code>command1 &amp;&amp; command2\n</code></pre>  Run command only if the former command fails  <pre><code>command1 || command2\n</code></pre>  Run (cleanup) function on error  <pre><code>trap cleanup ERR\n</code></pre> For a previously defined cleanup function  Run code on error  <pre><code>trap \"echo Oh no!\" ERR\n</code></pre>  Run code on interupt  <pre><code>trap \"echo Oh no!\" INT\n</code></pre> e.g., when user presses <code>Ctrl+C</code>  Run code on error or interrupt  <pre><code>trap \"echo Oh no!\" ERR INT\n</code></pre>  Run code on process termination  <pre><code>trap \"echo Oh no!\" TERM\n</code></pre>"},{"location":"shell/ksh/#number-handling","title":"Number handling","text":"Action Code Details  Increment variable  <pre><code>(( count += 1))\n</code></pre>  Increment variable  <pre><code>let count += 1\n</code></pre>  Sum variables  <pre><code>sum = $(( a + b ))\n</code></pre>  Equals number num <pre><code>$count -eq num\n</code></pre>  Not equals number num <pre><code>$count -ne num\n</code></pre>  Greater than number num <pre><code>$value -gt num\n</code></pre>  Less than number num <pre><code>$value -lt num\n</code></pre>"},{"location":"shell/ksh/#string-handling","title":"String handling","text":"Action Code Details  Equals string str <pre><code>$name = \"str\"\n</code></pre>  Not equals string str <pre><code>$name != \"str\"\n</code></pre>"},{"location":"shell/ksh/#path-handling","title":"Path handling","text":"Action Code Details  Get parent path  <pre><code>${name%/*}\n</code></pre>  Get filename from path  <pre><code>${name##*/}\n</code></pre>"},{"location":"shell/ksh/#output","title":"Output","text":"Action Code Details  Print message  <pre><code>echo \"Hello world!\"\n</code></pre>  Print variable  <pre><code>echo $var\n</code></pre>  Formatted printing  <pre><code>printf \"counting %d days\" $days\n</code></pre>"},{"location":"shell/ksh/#data-redirection","title":"Data redirection","text":"Action Code Details  Write to new file or overwrite file  <pre><code>command &gt; file\n</code></pre>  Append file  <pre><code>command &gt;&gt; file\n</code></pre>  Redirect error output  <pre><code>command 2&gt; file\n</code></pre>  Discard errors  <pre><code>command 2&gt;/dev/null\n</code></pre>  Redirect to normal output  <pre><code>command 2&gt;&amp;1\n</code></pre>  Discard all output  <pre><code>command &gt; /dev/null 2&gt;&amp;1\n</code></pre>  File as input to command  <pre><code>command &lt; file\n</code></pre>"},{"location":"shell/ksh/#filesystem-handling","title":"Filesystem handling","text":"Action Code Details  Check if directory exists  <pre><code>[ -d \"$DIRPATH\" ]\n</code></pre>  Check if directory is missing  <pre><code>[ ! -d \"$DIRPATH\" ]\n</code></pre>  Create directory  <pre><code>mkdir \"$DIRPATH\"\n</code></pre>  Check if file exists  <pre><code>[ -f \"$FILEPATH\" ]\n</code></pre>  Count the number of files in a directory  <pre><code>count=find $dir -maxdepth 1 -name \"*.txt\" -type f | wc -l\n</code></pre>"},{"location":"stan/","title":"Stan","text":""},{"location":"stan/#stan","title":"Stan","text":""},{"location":"stan/#output","title":"Output","text":"Action Code Details  Print string  <pre><code>print(\"Hello world\")\n</code></pre>  Print value of variable with name  <pre><code>print(\"x=\", x);\n</code></pre>"},{"location":"stan/#errors","title":"Errors","text":"Action Code Details  Throw error  <pre><code>reject(\"x contains NaNs\");\n</code></pre>"},{"location":"stan/array/","title":"Array","text":""},{"location":"stan/array/#array","title":"Array","text":""},{"location":"stan/array/#create","title":"Create","text":"Action Code Details  Declare 1D array of length N <pre><code>real a[N];\n</code></pre>  Declare 1D array with zeros  <pre><code>real a[N] = rep_array(0, N);\n</code></pre>  Declare 1D array with values  <pre><code>real a[] = {1, 2, 5}\n</code></pre>  Declare 2D array of size N by M <pre><code>real a[N,M];\n</code></pre>  Declare 2D array with values  <pre><code>int b[2, 3] = { { 1, 2, 3 }, { 4, 5, 6 } };\n</code></pre>  Declare 3D array of size N by M by O <pre><code>real a[N,M,O];\n</code></pre>"},{"location":"stan/array/#properties","title":"Properties","text":"Action Code Details  Dimensions  <pre><code>dims(a)\n</code></pre>  Size of first dimension  <pre><code>size(a)\n</code></pre> real a[4,3]; then size(a) = 4  Number of elements  <pre><code>num_elements(a)\n</code></pre>"},{"location":"stan/array/#derive","title":"Derive","text":""},{"location":"stan/array/#grow","title":"Grow","text":"Action Code Details  Append array  <pre><code>append_array(x, y)\n</code></pre>"},{"location":"stan/array/#convert","title":"Convert","text":"Action Code Details  To 1D array  <pre><code>to_array_1d(a)\n</code></pre>  To 2D array  <pre><code>to_array_2d(a)\n</code></pre>  To vector  <pre><code>to_vector(a)\n</code></pre>  To matrix  <pre><code>to_matrix(a)\n</code></pre>  1D array to matrix of size (column-major order)  <pre><code>to_matrix(a, nrow, ncol)\n</code></pre>"},{"location":"stan/matrix/","title":"Matrix","text":""},{"location":"stan/matrix/#matrix","title":"Matrix","text":""},{"location":"stan/matrix/#create","title":"Create","text":"Action Code Details  Declare N by M matrix  <pre><code>matrix[N,M] m;\n</code></pre>  Declare constrained matrix  <pre><code>matrix&lt;lower=0, upper=1&gt;[N,M] m;\n</code></pre>  Declare matrix with values  <pre><code>matrix[3,2] m = [ [1, 2], [3, 4], [5, 6] ];\n</code></pre>  Declare matrix filled with zeros  <pre><code>matrix[N,M] m = rep_matrix(0, N, M);\n</code></pre>  Declare matrix from series of row vectors  <pre><code>matrix[3,M] m = [ rv1, rv2, rv3 ];\n</code></pre>  Declare matrix from series of column vectors  <pre><code>matrix[N,3] m = [ v1', v2', v3']';\n</code></pre>  Create N by M matrix from replicated column vector of length N <pre><code>rep_matrix(v, M)\n</code></pre>  Create N by M matrix from replicated row vector of length N <pre><code>rep_matrix(v, N)\n</code></pre>  Declare K by K covariance matrix  <pre><code>cov_matrix[K] Omega;\n</code></pre>  Declare K by K correlation matrix  <pre><code>corr_matrix[K] Sigma;\n</code></pre>  Declare K by K Cholesky factors of covariance matrix  <pre><code>cholesky_factor_cov[K] L;\n</code></pre>  Declare M by N Cholesky factors of covariance matrix  <pre><code>cholesky_factor_cov[M,N] L;\n</code></pre>  Declare Cholesky factors of correlation matrix  <pre><code>cholesky_factor_corr[K] L;\n</code></pre>"},{"location":"stan/matrix/#properties","title":"Properties","text":"Action Code Details  Number of elements (NxM)  <pre><code>num_elements(m)\n</code></pre>  Dimension sizes  <pre><code>dims(m)\n</code></pre>  Number of columns (M)  <pre><code>cols(m)\n</code></pre>  Number of rows (N)  <pre><code>rows(m)\n</code></pre>"},{"location":"stan/matrix/#extract","title":"Extract","text":"Action Code Details  Element at row i, column j <pre><code>m[i,j]\n</code></pre>  Extract _j_th column  <pre><code>m[, j]\n</code></pre>  Extract _j_th column  <pre><code>col(m, j)\n</code></pre>  Extract _j_th column as a matrix  <pre><code>block(m, 1, j, N, 1)\n</code></pre>  Extract _i_th row  <pre><code>m[i, ]\n</code></pre> Accessing column-wise is much faster than row-wise  Extract _i_th row  <pre><code>row(m, i)\n</code></pre>  Extract _i_th row as a matrix  <pre><code>block(m, i, 1, 1, M)\n</code></pre>  Diagonal  <pre><code>diagonal(m)\n</code></pre>"},{"location":"stan/matrix/#derive","title":"Derive","text":"<p>For many useful functions, see https://jrnold.github.io/ssmodels-in-stan/stan-functions.html</p>"},{"location":"stan/matrix/#map","title":"Map","text":"Action Code Details  Inverse  <pre><code>inverse(m)\n</code></pre>  Sum elementwise  <pre><code>m + m2\n</code></pre>  Multiply elementwise  <pre><code>m .* m2\n</code></pre>  Column-wise vector multiplication  <pre><code>rep_matrix(v, N) .* m\n</code></pre>  Row-wise vector multiplication  <pre><code>rep_matrix(v', M) .* m\n</code></pre>"},{"location":"stan/matrix/#grow","title":"Grow","text":"Action Code Details  Append vector as column  <pre><code>append_col(m, v)\n</code></pre>  Append vector as row  <pre><code>append_row(m, v)\n</code></pre>"},{"location":"stan/matrix/#shrink","title":"Shrink","text":"Action Code Details  Slice columns  <pre><code>m[, 2:3]\n</code></pre>  Slice rows  <pre><code>m[2:3, ]\n</code></pre>  Submatrix by slicing rows and columns  <pre><code>m[1:2, 3:4]\n</code></pre>  Submatrix by start row and columns with length  <pre><code>block(m, rowstart, colstart, rowN, colN)\n</code></pre>"},{"location":"stan/matrix/#reshape","title":"Reshape","text":"<p>Change dimensions or form of the matrix</p> Action Code Details  Cross-product (post-multiply)  <pre><code>tcrossprod(m)\n</code></pre> m * m'  Cross-product (pre-multiply)  <pre><code>crossprod(m)\n</code></pre> m' * m  Quadratic form with matrix  <pre><code>quad_form(m, m2)\n</code></pre> m2' * m * m2  Quadratic form with vector  <pre><code>quad_form(m, v)\n</code></pre> v' * m * v"},{"location":"stan/matrix/#computations","title":"Computations","text":"Action Code Details  Column-wise self dot product  <pre><code>columns_dot_self(m)\n</code></pre>  Row-wise self dot product  <pre><code>rows_dot_self(m)\n</code></pre>  Dot product between columns  <pre><code>columns_dot_product(m, m2)\n</code></pre> vector result  Dot product between rows  <pre><code>rows_dot_product(m, m2)\n</code></pre> vector result  QR decomposition  <pre><code>Q = qr_Q(m);\nR = qr_R(m);\n</code></pre>  Thin QR decomposition  <pre><code>Q = qr_thin_Q(m) * sqrt(N - 1);\nR = qr_thin_R(m) / sqrt(N - 1);\n</code></pre>"},{"location":"stan/matrix/#convert","title":"Convert","text":"Action Code Details  To vector  <pre><code>to_vector(m)\n</code></pre>"},{"location":"stan/scalar/","title":"Scalar","text":""},{"location":"stan/scalar/#scalar","title":"Scalar","text":""},{"location":"stan/scalar/#create","title":"Create","text":"Action Code Details  NaN  <pre><code>not_a_number()\n</code></pre> \u03c0 <pre><code>pi()\n</code></pre> e <pre><code>e()\n</code></pre>  Square root of 2  <pre><code>sqrt2()\n</code></pre>  Positive infinity  <pre><code>positive_infinity()\n</code></pre>  Negative infinity  <pre><code>negative_infinity()\n</code></pre>  Float epsilon (smallest representable difference)  <pre><code>?\n</code></pre>"},{"location":"stan/scalar/#create_1","title":"Create","text":"Action Code Details  Declare unconstrainted integer variable  <pre><code>int x;\n</code></pre>  Declare constrained integer variable  <pre><code>int&lt;lower=1, upper=10&gt; n;\n</code></pre>  Declare unconstrained float variable  <pre><code>real x;\n</code></pre>  Declare unconstrained float with value  <pre><code>real x = 0.5;\n</code></pre>  Declare unconstrained float variable as NaN  <pre><code>real x = not_a_number();\n</code></pre>  Declare constrained float variable  <pre><code>real&lt;lower=0, upper=1&gt; prob;\n</code></pre>"},{"location":"stan/scalar/#test","title":"Test","text":"Action Code Details  Is integer equal  <pre><code>x == 5\n</code></pre> Not recommended for float types  Approximately equal with proportional tolerance tol <pre><code>?\n</code></pre>  Approximately equal with absolute tolerance tol <pre><code>?\n</code></pre>  Is NaN  <pre><code>is_nan(x)\n</code></pre>  Is NaN  <pre><code>is_not_a_number(x)\n</code></pre>  Is finite  <pre><code>!is_inf(x) &amp;&amp; !is_nan(x)\n</code></pre>  Is infinite  <pre><code>is_inf(x)\n</code></pre>  Is positive infinity  <pre><code>x &gt; 0 &amp;&amp; is_inf(x)\n</code></pre>  Is negative infinity  <pre><code>x &lt; 0 &amp;&amp; is_inf(x)\n</code></pre>"},{"location":"stan/scalar/#derive","title":"Derive","text":"Action Code Details  Absolute value  <pre><code>fabs(x)\n</code></pre>  Threshold (step)  <pre><code>step(x)\n</code></pre> 0 if x &lt; 0, else 1  Addition  <pre><code>x + y\n</code></pre>  Subtraction (difference)  <pre><code>x - y\n</code></pre>  Positive difference  <pre><code>fdim(x, y)\n</code></pre> x - y for x &gt;= y, else 0  Absolute difference  <pre><code>fabs(x - y)\n</code></pre>  Multiplication  <pre><code>x * y\n</code></pre>  Division  <pre><code>x / y\n</code></pre>  Reciprocal  <pre><code>inv(x)\n</code></pre> 1 / x  Multiplication followed by addition of z <pre><code>fma(x, y, z)\n</code></pre> x * y + z  Square (power of 2)  <pre><code>square(x)\n</code></pre> x ^ 2  Inverse square (power of -2)  <pre><code>inv_square(x)\n</code></pre> x ^ -2  Square root  <pre><code>sqrt(x)\n</code></pre>  Inverse square root  <pre><code>inv_sqrt(x)\n</code></pre> 1 / sqrt(x)  Cube root  <pre><code>cbrt(x)\n</code></pre> pow(x, 1/3)  Raise to power p <pre><code>x ^ p\n</code></pre>  Raise to power p <pre><code>pow(x, p)\n</code></pre>  Natural logarithm  <pre><code>log(x)\n</code></pre>  Base-2 logarithm  <pre><code>log2(x)\n</code></pre>  Base-10 logarithm  <pre><code>log10(x)\n</code></pre>  Natural logarithm of reciprocal  <pre><code>-log(x)\n</code></pre> log(1/x)  Natural logarithm of (1 - x)  <pre><code>log1m(x)\n</code></pre> log(1 - x)  Natural logarithm of 1 - exp(x)  <pre><code>log1m_exp(x)\n</code></pre> log(1 - e^x)  Natural logarithm of (1 + x)  <pre><code>log1p(x)\n</code></pre> log(1 + x)  Natural logarithm of 1 + exp(x)  <pre><code>log1p_exp(x)\n</code></pre> log(1 + e^x)  Multiplication with log  <pre><code>lmultiply(x , p)\n</code></pre> p * log(x) for x &gt; 0  Natural exponential  <pre><code>exp(x)\n</code></pre>  Natural exponential of x - 1  <pre><code>expm1(x)\n</code></pre> (e^x) - 1  Min  <pre><code>fmin(x, y)\n</code></pre>  Max  <pre><code>fmax(x, y)\n</code></pre>  Modulus  <pre><code>fmod(x, y)\n</code></pre> x - floor(x / y) * y  Floor  <pre><code>floor(x)\n</code></pre>  Ceil  <pre><code>ceil(x)\n</code></pre>  Round  <pre><code>round(x)\n</code></pre> Output is real  Truncate to nearest integer  <pre><code>trunc(x)\n</code></pre> Output is real  Log-sum of exponentials  <pre><code>log_sum_exp(x, y)\n</code></pre> log(e^x + e^y)  Log-diff of exponentials  <pre><code>log_diff_exp(x, y)\n</code></pre> log(e^x - e^y) for x &gt; y  Proportional log-sum of exponentials (used for mixtures)  <pre><code>log_mix(theta, x, y)\n</code></pre> log(theta * e^x + (1 - theta) * e^y)  Proportional log-sum of exponentials (used for mixtures)  <pre><code>log_sum_exp(theta + [x, y])\n</code></pre>  Proportional log-sum of exponentials (used for mixtures)  <pre><code>log_sum_exp(log(theta) + x, log1m(theta) + y)\n</code></pre>  Logit transform  <pre><code>logit(x)\n</code></pre>  Inverse logit transform  <pre><code>inv_logit(x)\n</code></pre>  Natural logarithm of inverse logit  <pre><code>log_inv_logit(x)\n</code></pre>  Natural logarithm of 1 minus inverse logit  <pre><code>log1m_inv_logit(x)\n</code></pre>  Binomial coefficient (ncr)  <pre><code>choose(m, k)\n</code></pre>"},{"location":"stan/vector/","title":"Vector","text":""},{"location":"stan/vector/#vector","title":"Vector","text":""},{"location":"stan/vector/#create","title":"Create","text":"Action Code Details  From matrix  <pre><code>to_vector(m)\n</code></pre> Type of vector depends on shape of the matrix?  From 1D array  <pre><code>real a[] = {1, 2};\nto_vector(a)\n</code></pre>"},{"location":"stan/vector/#create-column-vector","title":"Create column vector","text":"Action Code Details  Declare column vector of size N <pre><code>vector[N] v;\n</code></pre>  Declare column vector with values  <pre><code>vector[3] v = [3, 5, 7]'\n</code></pre>  Declare column vector filled with zeros  <pre><code>vector[N] v = rep_vector(0, N);\n</code></pre>  Declare column vector filled with value <pre><code>vector[N] v = rep_vector(value, N);\n</code></pre>"},{"location":"stan/vector/#create-row-vector","title":"Create row vector","text":"Action Code Details  Declare row vector of size N <pre><code>row_vector[N] v;\n</code></pre>  Declare row vector with values  <pre><code>row_vector[3] v = [3, 5, 7];\n</code></pre>"},{"location":"stan/vector/#create-special-vectors-with-constraints","title":"Create special vectors with constraints","text":"Action Code Details  Declare ordered vector of size N <pre><code>ordered[N] v;\n</code></pre>  Declare positive ordered vector of size N <pre><code>positive_ordered[N] v;\n</code></pre>  Declare simplex of size N (proportions vector that sum up to 1)  <pre><code>simplex[N] theta;\n</code></pre>  Declare unit vector  <pre><code>unit_vector[N] theta;\n</code></pre>  Declare optional vector in parameter block, conditional on include <pre><code>vector[include ? N : 0] v;\n</code></pre> Useful for disabling model feature to save memory"},{"location":"stan/vector/#properties","title":"Properties","text":"Action Code Details  Length (number of elements)  <pre><code>num_elements(v)\n</code></pre>"},{"location":"stan/vector/#extract","title":"Extract","text":"Action Code Details  Get element at index i <pre><code>v[i]\n</code></pre>  Get element at index i as vector  <pre><code>rep_vector(v[i], 1)\n</code></pre>  Get index of largest value  <pre><code>int which_max(vector x) {\n    real max_x = max(x);\n    int i = 0;\n    while (x[i] != max_x) {\n      i += 1;\n    }\n    return i;\n}\n\nwhich_max(v)\n</code></pre>"},{"location":"stan/vector/#derive","title":"Derive","text":""},{"location":"stan/vector/#map","title":"Map","text":"<p>Element-wise operations.</p> Action Code Details  Square elements  <pre><code>square(v)\n</code></pre>  Square root elements  <pre><code>sqrt(v)\n</code></pre>  Different multiplication per element  <pre><code>v .* w\n</code></pre>  Different power per element  <pre><code>exp(p * log(v))\n</code></pre> only for strictly positive v  Different power per element  <pre><code>N = num_elements(v);\nvector c[N];\nfor (i in 1:N) {\n  c[i] = v[i] ^ p[i];\n}\n</code></pre>  Cumulative sum  <pre><code>cumulative_sum(v)\n</code></pre>  Softmax  <pre><code>softmax(v)\n</code></pre>  Log-softmax  <pre><code>log_softmax(v)\n</code></pre>  Dot product  <pre><code>v * w\n</code></pre>  Dot product (self)  <pre><code>dot_self(v)\n</code></pre> <code>v * v</code>, or <code>sum(v .* v)</code>  Dot product  <pre><code>dot_product(v, w)\n</code></pre>"},{"location":"stan/vector/#grow","title":"Grow","text":"Action Code Details  Append element to column vector  <pre><code>append_row(v, x)\n</code></pre>  Prepend element to column vector  <pre><code>append_row(x, v)\n</code></pre>  Append element to row vector  <pre><code>append_col(v, x)\n</code></pre>  Prepend element to row vector  <pre><code>append_col(x, v)\n</code></pre>"},{"location":"stan/vector/#shrink","title":"Shrink","text":"Action Code Details  First n elements (head)  <pre><code>head(v, n)\n</code></pre>  Last n elements (tail)  <pre><code>tail(v, n)\n</code></pre>  Slice  <pre><code>v[start:end]\n</code></pre>  Slice of length n <pre><code>segment(v, start, n)\n</code></pre>"},{"location":"stan/vector/#reshape","title":"Reshape","text":"Action Code Details  Transpose  <pre><code>v'\n</code></pre>"},{"location":"stan/vector/#convert","title":"Convert","text":"Action Code Details  To row vector  <pre><code>to_row_vector(v)\n</code></pre>  Transpose: from row to column vector, or vice versa  <pre><code>v'\n</code></pre>  To n by m matrix, column-major order  <pre><code>to_matrix(v, nrow, ncol)\n</code></pre>  To matrix with 1 row or column  <pre><code>to_matrix(v)\n</code></pre> Depends on whether v is a row or column vector  To 1D array  <pre><code>to_array_1d(v)\n</code></pre>"},{"location":"test/","title":"Index","text":""},{"location":"test/#test-actionsheet","title":"Test actionsheet","text":"DescriptionDetailsCode <p>An ordered collection of elements.</p> <p>Tips:</p> <ul> <li>Lists can be efficiently used as a stack through append() (for push) and pop().</li> <li>Sorting seems to be broken for numeric lists containing NaN</li> </ul> <pre><code>def lol():\n    return 2\n</code></pre>"},{"location":"test/#create","title":"Create","text":"<p>asdasdsa</p> Action Code Details  200  <pre><code>import pandas as pd\n2 + 2\nx = pd.DataFrame()\npass\n</code></pre>  400  Markdown <code>here</code>. (\u2195\ufe0e Blank lines above and below!)   Derp derp"},{"location":"test/#test","title":"Test","text":"<p>Here is some code: <code>import pymdownx; pymdownx.__version__</code>.</p>"},{"location":"test/#inner-test","title":"Inner test","text":"<p>Hello</p>"}]}